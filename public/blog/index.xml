<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog posts on Anh Hoang Duc</title>
    <link>/blog/</link>
    <description>Recent content in Blog posts on Anh Hoang Duc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Anh Hoang Duc</copyright>
    <lastBuildDate>Sun, 01 Jan 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Automating Data Exploratory Analysis with purrr and NSE</title>
      <link>/blog/automate-dea-with-purrr-and-nse/</link>
      <pubDate>Sat, 25 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/automate-dea-with-purrr-and-nse/</guid>
      <description>In the life of an analyst, one have to spend much time on data exploratory analysis. When you have to repeat the task multiple times, you might need to write a function. For example, I often need to do an analysis between a numeric variable and a factor variable in the following process:
Compare statistics among groups (mean, median,…)Make an ANOVA model to compare mean among groupsDraw some chart to vizualize difference among groupsTo solve this problem, I create a function called compare_group as follows:</description>
    </item>
    
    <item>
      <title>Automating Data Exploratory Analysis with purrr and NSE</title>
      <link>/blog/automate-dea-with-purrr-and-nse/</link>
      <pubDate>Sat, 25 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/automate-dea-with-purrr-and-nse/</guid>
      <description>In the life of an analyst, one have to spend much time on data exploratory analysis. When you have to repeat the task multiple times, you might need to write a function. For example, I often need to do an analysis between a numeric variable and a factor variable in the following process:
Compare statistics among groups (mean, median,…)Make an ANOVA model to compare mean among groupsDraw some chart to vizualize difference among groupsTo solve this problem, I create a function called compare_group as follows:</description>
    </item>
    
    <item>
      <title>Writing a book with bookdown in foreign languages</title>
      <link>/blog/writing-a-book-with-bookdown-in-foreign-languages/</link>
      <pubDate>Sat, 25 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/writing-a-book-with-bookdown-in-foreign-languages/</guid>
      <description>I remember 4 years back when I started writing master thesis in Warsaw School of Economics, I started to learn LaTeX and it was an amazing tool to write technical documents. However, to master LaTeX is not an easy job at all as it is quite tricky to solve various problems. To tell you the truth, since then I never ever used LateX again.
When started using Rmarkdown in 2016, it was very clear to me that Rmarkdown would be my favarite language to write any technical and non-technical documents.</description>
    </item>
    
    <item>
      <title>Review gghighlight - a great package to highlight ggplot charts</title>
      <link>/blog/review-gghighlight/</link>
      <pubDate>Fri, 06 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/review-gghighlight/</guid>
      <description>I have been watching gghighlight for couple of months as his package addresses one of problems that I very much care about: “Highlighting in ggplot”. Recently, the package has released in CRAN with big improvement since the first version. So, I decided to test this package in some common charts in ggplot2
First, let’s set up some theme to use during the experiment.
#Set up library &amp;amp; themelibrary(dplyr)library(ggplot2)library(gghighlight)my_theme &amp;lt;- function(){list(theme_bw(),scale_fill_brewer(palette = &amp;quot;Set1&amp;quot;),scale_color_brewer(palette = &amp;quot;Set1&amp;quot;))}Highlight bar chartdata &amp;lt;- mtcars %&amp;gt;% mutate(cyl = factor(cyl))data %&amp;gt;% ggplot(aes(cyl, mpg)) +geom_bar(aes(fill = cyl), stat = &amp;quot;identity&amp;quot;) +my_theme() +gghighlight(cyl == 6) +labs(title = &amp;quot;Example 1 - highlight without text&amp;quot;) Highlight bar chart with textdata %&amp;gt;% group_by(cyl) %&amp;gt;% summarise(mpg = sum(mpg)) %&amp;gt;% ggplot(aes(cyl, mpg)) +geom_bar(aes(fill = cyl), stat = &amp;quot;identity&amp;quot;) +geom_text(aes(label = mpg),hjust = -0.</description>
    </item>
    
    <item>
      <title>Create waterfall chart with GGPLOT2</title>
      <link>/blog/create-waterfall-chart-with-ggplot2/</link>
      <pubDate>Wed, 09 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/create-waterfall-chart-with-ggplot2/</guid>
      <description>In digital world, active users is very important metrics but is quite hard to descrile performance of a website/service overtime. Typically, the formula of active user at given time t can be describle as follows:
\[active_{t} = active_{t-1} + new_{t} - churn_{t}\]
Naturally, waterfall chart comes to my mind as an candidate to vizualize performance of active users overtime. So, I tried to look for some real case study using waterfall chart for this very problem using R but I was stuck.</description>
    </item>
    
    <item>
      <title>Install R packages from Github through proxy</title>
      <link>/blog/install-r-packages-from-github-through-proxy/</link>
      <pubDate>Sat, 12 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/install-r-packages-from-github-through-proxy/</guid>
      <description>The easiest way to install an R package is from R-Cran. However, as the number of R users is growing up very fast, many developers are contribute to R community through Github. And the standard way to install from Github is to use devtools package with install_github() command.
In many organization, especially financial organization like banking industry, sometimes it is very hard to install an R package from CRAN or Github due to security process.</description>
    </item>
    
    <item>
      <title>How to manage libraries in R efficiently?</title>
      <link>/blog/how-to-manage-libraries-in-r-efficiently/</link>
      <pubDate>Thu, 10 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/how-to-manage-libraries-in-r-efficiently/</guid>
      <description>When starting using with R, installing and managing R libraries seems not to be a difficult task at all. However, when updating R to new version, it will make some problems. For most cases, you have to re-install your library, which takes much time.
There is another tricky way to solve that problem, which is to copy all your old libraries to the new library folder. For example, all your libraries in R version 3.</description>
    </item>
    
  </channel>
</rss>