{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Polars"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Giới thiệu"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Polars là một thư viện mới của Python, viết trên Rust và có thể hỗ trợ và tính toán dữ liệu nhanh chóng, kể cả với trường hợp dữ liệu vượt quá dung lượng bộ nhớ. Bên cạnh đó, `polars` còn có các ưu điểm vượt trội sau:\n",
    "\n",
    "- Cú pháp tương đồng với `pandas`\n",
    "- Hỗ trợ tốt hơn với các cú pháp xử lý và biến đổi dữ liệu đơn giản, hỗ trợ `pipe` hiệu quả\n",
    "- Hỗ trợ `lazy evaluation` để tăng tốc độ tính toán và xử lý\n",
    "\n",
    "Bên cạnh đó, cấu trúc dữ liệu của `polars` hoàn toàn tương thích với `plotnine` để xây dựng biểu đồ theo phong cách của ngữ pháp biểu đồ\n",
    "\n",
    "---\n",
    "\n",
    "Tài liệu đầy đủ của `polars` có thể tham khảo chi tiết tại [https://docs.pola.rs/]()\n",
    "\n",
    "Ta có thể cài đặt polars như sau:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "# Cơ bản\n",
    "pip install polars\n",
    "# polars với đầy đủ tính năng\n",
    "pip install \"polars[all]\"\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Polars cơ bản"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Series"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Tương tự như `pd.Series`, cấu trúc `Series` của polars cũng có cấu trúc tương tự"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (4,)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th></th></tr><tr><td>f64</td></tr></thead><tbody><tr><td>1.0</td></tr><tr><td>2.4</td></tr><tr><td>5.0</td></tr><tr><td>6.0</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (4,)\n",
       "Series: '' [f64]\n",
       "[\n",
       "\t1.0\n",
       "\t2.4\n",
       "\t5.0\n",
       "\t6.0\n",
       "]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import polars as pl\n",
    "# Series 1\n",
    "pl.Series([1, 2.4, 5, 6])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (3,)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th></th></tr><tr><td>cat</td></tr></thead><tbody><tr><td>&quot;a&quot;</td></tr><tr><td>&quot;b&quot;</td></tr><tr><td>&quot;c&quot;</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (3,)\n",
       "Series: '' [cat]\n",
       "[\n",
       "\t\"a\"\n",
       "\t\"b\"\n",
       "\t\"c\"\n",
       "]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Series 2\n",
    "pl.Series(['a', 'b', 'c'], dtype = pl.Categorical)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Cấu trúc dữ liệu trong `polars` hỗ trợ nhiều kiểu dữ liệu đa dạng, có thể chia làm mấy nhóm chính:\n",
    "\n",
    "- Integer: pl.int64\n",
    "- Float: pl.float64\n",
    "- String: pl.utf8\n",
    "- Category: pl.Categorical\n",
    "- Datetime: pl.datetime, pl.Date\n",
    "- Boolean: pl.Boolean\n",
    "- List: pl.List\n",
    "- Struct: Dữ liệu phức tạp, chứa dạng Dictionary `pl.struct`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape: (3, 8)\n",
      "┌────────────┬────────────┬────────────┬───────────┬───────────┬───────────┬───────────┬───────────┐\n",
      "│ int_column ┆ float_colu ┆ bool_colum ┆ str_colum ┆ date_colu ┆ list_colu ┆ struct_co ┆ categoric │\n",
      "│ ---        ┆ mn         ┆ n          ┆ n         ┆ mn        ┆ mn        ┆ lumn      ┆ al_column │\n",
      "│ i64        ┆ ---        ┆ ---        ┆ ---       ┆ ---       ┆ ---       ┆ ---       ┆ ---       │\n",
      "│            ┆ f64        ┆ bool       ┆ str       ┆ datetime[ ┆ list[i64] ┆ struct[2] ┆ cat       │\n",
      "│            ┆            ┆            ┆           ┆ μs]       ┆           ┆           ┆           │\n",
      "╞════════════╪════════════╪════════════╪═══════════╪═══════════╪═══════════╪═══════════╪═══════════╡\n",
      "│ 1          ┆ 1.0        ┆ true       ┆ a         ┆ 2023-01-0 ┆ [1, 2]    ┆ {1,\"a\"}   ┆ a         │\n",
      "│            ┆            ┆            ┆           ┆ 1         ┆           ┆           ┆           │\n",
      "│            ┆            ┆            ┆           ┆ 00:00:00  ┆           ┆           ┆           │\n",
      "│ 2          ┆ 2.5        ┆ false      ┆ b         ┆ 2023-01-0 ┆ [3, 4]    ┆ {2,\"b\"}   ┆ b         │\n",
      "│            ┆            ┆            ┆           ┆ 2         ┆           ┆           ┆           │\n",
      "│            ┆            ┆            ┆           ┆ 00:00:00  ┆           ┆           ┆           │\n",
      "│ 3          ┆ 3.3        ┆ true       ┆ c         ┆ 2023-01-0 ┆ [5, 6]    ┆ {3,\"c\"}   ┆ c         │\n",
      "│            ┆            ┆            ┆           ┆ 3         ┆           ┆           ┆           │\n",
      "│            ┆            ┆            ┆           ┆ 00:00:00  ┆           ┆           ┆           │\n",
      "└────────────┴────────────┴────────────┴───────────┴───────────┴───────────┴───────────┴───────────┘\n"
     ]
    }
   ],
   "source": [
    "import polars as pl\n",
    "from datetime import datetime\n",
    "\n",
    "# Create a DataFrame with various data types\n",
    "df = pl.DataFrame({\n",
    "    \"int_column\": [1, 2, 3],  # Int64 by default\n",
    "    \"float_column\": [1.0, 2.5, 3.3],  # Float64 by default\n",
    "    \"bool_column\": [True, False, True],  # Boolean\n",
    "    \"str_column\": [\"a\", \"b\", \"c\"],  # Utf8\n",
    "    \"date_column\": [datetime(2023, 1, 1), datetime(2023, 1, 2), datetime(2023, 1, 3)],  # Datetime\n",
    "    \"list_column\": [[1, 2], [3, 4], [5, 6]],  # List[Int64]\n",
    "    \"struct_column\": [{\"field1\": 1, \"field2\": \"a\"}, {\"field1\": 2, \"field2\": \"b\"}, {\"field1\": 3, \"field2\": \"c\"}]  # Struct\n",
    "})\n",
    "\n",
    "# Tạo categorical\n",
    "df = df.with_columns(\n",
    "    pl.col(\"str_column\").cast(pl.Categorical).alias(\"categorical_column\")\n",
    ")\n",
    "\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Cấu trúc dữ liệu giữa các nhóm có thể chuyển đổi qua lại theo cấu trúc sau\n",
    "\n",
    "```python\n",
    "pl.col(\"column\").cast(`pl.type_of_data`).alias(\"new_column\")\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Frame"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "DataFrame trong polars cũng có thể thực hiện với cấu trúc dictionary, list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (5, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>x</th><th>y</th></tr><tr><td>i32</td><td>str</td></tr></thead><tbody><tr><td>0</td><td>&quot;a&quot;</td></tr><tr><td>1</td><td>&quot;a&quot;</td></tr><tr><td>2</td><td>&quot;b&quot;</td></tr><tr><td>3</td><td>&quot;b&quot;</td></tr><tr><td>4</td><td>&quot;c&quot;</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (5, 2)\n",
       "┌─────┬─────┐\n",
       "│ x   ┆ y   │\n",
       "│ --- ┆ --- │\n",
       "│ i32 ┆ str │\n",
       "╞═════╪═════╡\n",
       "│ 0   ┆ a   │\n",
       "│ 1   ┆ a   │\n",
       "│ 2   ┆ b   │\n",
       "│ 3   ┆ b   │\n",
       "│ 4   ┆ c   │\n",
       "└─────┴─────┘"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "df = pl.DataFrame(\n",
    "    {\n",
    "        'x': np.arange(5),\n",
    "        'y': ['a', 'a', 'b', 'b', 'c']\n",
    "    }\n",
    ")\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "polars.dataframe.frame.DataFrame"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Cấu trúc dữ liệu\n",
    "type(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (9, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>statistic</th><th>x</th><th>y</th></tr><tr><td>str</td><td>f64</td><td>str</td></tr></thead><tbody><tr><td>&quot;count&quot;</td><td>5.0</td><td>&quot;5&quot;</td></tr><tr><td>&quot;null_count&quot;</td><td>0.0</td><td>&quot;0&quot;</td></tr><tr><td>&quot;mean&quot;</td><td>2.0</td><td>null</td></tr><tr><td>&quot;std&quot;</td><td>1.581139</td><td>null</td></tr><tr><td>&quot;min&quot;</td><td>0.0</td><td>&quot;a&quot;</td></tr><tr><td>&quot;25%&quot;</td><td>1.0</td><td>null</td></tr><tr><td>&quot;50%&quot;</td><td>2.0</td><td>null</td></tr><tr><td>&quot;75%&quot;</td><td>3.0</td><td>null</td></tr><tr><td>&quot;max&quot;</td><td>4.0</td><td>&quot;c&quot;</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (9, 3)\n",
       "┌────────────┬──────────┬──────┐\n",
       "│ statistic  ┆ x        ┆ y    │\n",
       "│ ---        ┆ ---      ┆ ---  │\n",
       "│ str        ┆ f64      ┆ str  │\n",
       "╞════════════╪══════════╪══════╡\n",
       "│ count      ┆ 5.0      ┆ 5    │\n",
       "│ null_count ┆ 0.0      ┆ 0    │\n",
       "│ mean       ┆ 2.0      ┆ null │\n",
       "│ std        ┆ 1.581139 ┆ null │\n",
       "│ min        ┆ 0.0      ┆ a    │\n",
       "│ 25%        ┆ 1.0      ┆ null │\n",
       "│ 50%        ┆ 2.0      ┆ null │\n",
       "│ 75%        ┆ 3.0      ┆ null │\n",
       "│ max        ┆ 4.0      ┆ c    │\n",
       "└────────────┴──────────┴──────┘"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Summary dữ liệu\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Int32, String]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Cấu trúc dữ liệu\n",
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (2, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>statistic</th><th>value</th></tr><tr><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;count&quot;</td><td>&quot;5&quot;</td></tr><tr><td>&quot;null_count&quot;</td><td>&quot;0&quot;</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (2, 2)\n",
       "┌────────────┬───────┐\n",
       "│ statistic  ┆ value │\n",
       "│ ---        ┆ ---   │\n",
       "│ str        ┆ str   │\n",
       "╞════════════╪═══════╡\n",
       "│ count      ┆ 5     │\n",
       "│ null_count ┆ 0     │\n",
       "└────────────┴───────┘"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Convert sang Categorical\n",
    "df[\"y\"].cast(pl.Categorical).describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Bên cạnh đó, ta cũng có thể convert từ `pandas.DataFrame` sang `polars.DataFrame`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.frame.DataFrame"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from plotnine.data import mtcars\n",
    "type(mtcars)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "polars.dataframe.frame.DataFrame"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Convert sang polars\n",
    "mtcars_pl = pl.from_pandas(mtcars)\n",
    "type(mtcars_pl)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Lưu ý**: Để thuận tiện trong quá trình sử dụng `polars`, các phần hướng dẫn biến đổi dữ liệu tiếp theo sẽ sử dụng tập dữ liệu `mtcars`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (5, 12)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>mpg</th><th>cyl</th><th>disp</th><th>hp</th><th>drat</th><th>wt</th><th>qsec</th><th>vs</th><th>am</th><th>gear</th><th>carb</th></tr><tr><td>str</td><td>f64</td><td>i64</td><td>f64</td><td>i64</td><td>f64</td><td>f64</td><td>f64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Mazda RX4&quot;</td><td>21.0</td><td>6</td><td>160.0</td><td>110</td><td>3.9</td><td>2.62</td><td>16.46</td><td>0</td><td>1</td><td>4</td><td>4</td></tr><tr><td>&quot;Mazda RX4 Wag&quot;</td><td>21.0</td><td>6</td><td>160.0</td><td>110</td><td>3.9</td><td>2.875</td><td>17.02</td><td>0</td><td>1</td><td>4</td><td>4</td></tr><tr><td>&quot;Datsun 710&quot;</td><td>22.8</td><td>4</td><td>108.0</td><td>93</td><td>3.85</td><td>2.32</td><td>18.61</td><td>1</td><td>1</td><td>4</td><td>1</td></tr><tr><td>&quot;Hornet 4 Drive&quot;</td><td>21.4</td><td>6</td><td>258.0</td><td>110</td><td>3.08</td><td>3.215</td><td>19.44</td><td>1</td><td>0</td><td>3</td><td>1</td></tr><tr><td>&quot;Hornet Sportabout&quot;</td><td>18.7</td><td>8</td><td>360.0</td><td>175</td><td>3.15</td><td>3.44</td><td>17.02</td><td>0</td><td>0</td><td>3</td><td>2</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (5, 12)\n",
       "┌───────────────────┬──────┬─────┬───────┬───┬─────┬─────┬──────┬──────┐\n",
       "│ name              ┆ mpg  ┆ cyl ┆ disp  ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │\n",
       "│ ---               ┆ ---  ┆ --- ┆ ---   ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │\n",
       "│ str               ┆ f64  ┆ i64 ┆ f64   ┆   ┆ i64 ┆ i64 ┆ i64  ┆ i64  │\n",
       "╞═══════════════════╪══════╪═════╪═══════╪═══╪═════╪═════╪══════╪══════╡\n",
       "│ Mazda RX4         ┆ 21.0 ┆ 6   ┆ 160.0 ┆ … ┆ 0   ┆ 1   ┆ 4    ┆ 4    │\n",
       "│ Mazda RX4 Wag     ┆ 21.0 ┆ 6   ┆ 160.0 ┆ … ┆ 0   ┆ 1   ┆ 4    ┆ 4    │\n",
       "│ Datsun 710        ┆ 22.8 ┆ 4   ┆ 108.0 ┆ … ┆ 1   ┆ 1   ┆ 4    ┆ 1    │\n",
       "│ Hornet 4 Drive    ┆ 21.4 ┆ 6   ┆ 258.0 ┆ … ┆ 1   ┆ 0   ┆ 3    ┆ 1    │\n",
       "│ Hornet Sportabout ┆ 18.7 ┆ 8   ┆ 360.0 ┆ … ┆ 0   ┆ 0   ┆ 3    ┆ 2    │\n",
       "└───────────────────┴──────┴─────┴───────┴───┴─────┴─────┴──────┴──────┘"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mtcars_pl.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Nhóm câu lệnh truy vấn dữ liệu"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "### Chọn biến"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Với polars, ta có thể chọn biến theo 2 cách\n",
    "\n",
    "- **Cách 1**: Sử dụng các biến dưới dạng list\n",
    "- **Cách 2**: Sử dụng hàm select"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (4,)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>mpg</th></tr><tr><td>f64</td></tr></thead><tbody><tr><td>21.0</td></tr><tr><td>21.0</td></tr><tr><td>22.8</td></tr><tr><td>21.4</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (4,)\n",
       "Series: 'mpg' [f64]\n",
       "[\n",
       "\t21.0\n",
       "\t21.0\n",
       "\t22.8\n",
       "\t21.4\n",
       "]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Chọn biến theo dạng list\n",
    "mtcars_pl['mpg'].head(4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (4, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>mpg</th><th>cyl</th></tr><tr><td>f64</td><td>i64</td></tr></thead><tbody><tr><td>21.0</td><td>6</td></tr><tr><td>21.0</td><td>6</td></tr><tr><td>22.8</td><td>4</td></tr><tr><td>21.4</td><td>6</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (4, 2)\n",
       "┌──────┬─────┐\n",
       "│ mpg  ┆ cyl │\n",
       "│ ---  ┆ --- │\n",
       "│ f64  ┆ i64 │\n",
       "╞══════╪═════╡\n",
       "│ 21.0 ┆ 6   │\n",
       "│ 21.0 ┆ 6   │\n",
       "│ 22.8 ┆ 4   │\n",
       "│ 21.4 ┆ 6   │\n",
       "└──────┴─────┘"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mtcars_pl[['mpg', 'cyl']].head(4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (32, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>mpg</th><th>cyl</th><th>vs</th></tr><tr><td>f64</td><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>21.0</td><td>6</td><td>0</td></tr><tr><td>21.0</td><td>6</td><td>0</td></tr><tr><td>22.8</td><td>4</td><td>1</td></tr><tr><td>21.4</td><td>6</td><td>1</td></tr><tr><td>18.7</td><td>8</td><td>0</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>30.4</td><td>4</td><td>1</td></tr><tr><td>15.8</td><td>8</td><td>0</td></tr><tr><td>19.7</td><td>6</td><td>0</td></tr><tr><td>15.0</td><td>8</td><td>0</td></tr><tr><td>21.4</td><td>4</td><td>1</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (32, 3)\n",
       "┌──────┬─────┬─────┐\n",
       "│ mpg  ┆ cyl ┆ vs  │\n",
       "│ ---  ┆ --- ┆ --- │\n",
       "│ f64  ┆ i64 ┆ i64 │\n",
       "╞══════╪═════╪═════╡\n",
       "│ 21.0 ┆ 6   ┆ 0   │\n",
       "│ 21.0 ┆ 6   ┆ 0   │\n",
       "│ 22.8 ┆ 4   ┆ 1   │\n",
       "│ 21.4 ┆ 6   ┆ 1   │\n",
       "│ 18.7 ┆ 8   ┆ 0   │\n",
       "│ …    ┆ …   ┆ …   │\n",
       "│ 30.4 ┆ 4   ┆ 1   │\n",
       "│ 15.8 ┆ 8   ┆ 0   │\n",
       "│ 19.7 ┆ 6   ┆ 0   │\n",
       "│ 15.0 ┆ 8   ┆ 0   │\n",
       "│ 21.4 ┆ 4   ┆ 1   │\n",
       "└──────┴─────┴─────┘"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "var = ['mpg', 'cyl', 'vs']\n",
    "mtcars_pl[var]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ngoài cách trên, ta có thể sử dụng method `filter` như sau"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (5, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>mpg</th><th>cyl</th><th>am</th></tr><tr><td>f64</td><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>21.0</td><td>6</td><td>1</td></tr><tr><td>21.0</td><td>6</td><td>1</td></tr><tr><td>22.8</td><td>4</td><td>1</td></tr><tr><td>21.4</td><td>6</td><td>0</td></tr><tr><td>18.7</td><td>8</td><td>0</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (5, 3)\n",
       "┌──────┬─────┬─────┐\n",
       "│ mpg  ┆ cyl ┆ am  │\n",
       "│ ---  ┆ --- ┆ --- │\n",
       "│ f64  ┆ i64 ┆ i64 │\n",
       "╞══════╪═════╪═════╡\n",
       "│ 21.0 ┆ 6   ┆ 1   │\n",
       "│ 21.0 ┆ 6   ┆ 1   │\n",
       "│ 22.8 ┆ 4   ┆ 1   │\n",
       "│ 21.4 ┆ 6   ┆ 0   │\n",
       "│ 18.7 ┆ 8   ┆ 0   │\n",
       "└──────┴─────┴─────┘"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mtcars_pl.select(['mpg', 'cyl', 'am']).head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Lọc dữ liệu theo dòng"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Với `polars`, ta có thể lọc các dòng đơn giản với list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (4, 12)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>mpg</th><th>cyl</th><th>disp</th><th>hp</th><th>drat</th><th>wt</th><th>qsec</th><th>vs</th><th>am</th><th>gear</th><th>carb</th></tr><tr><td>str</td><td>f64</td><td>i64</td><td>f64</td><td>i64</td><td>f64</td><td>f64</td><td>f64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Mazda RX4&quot;</td><td>21.0</td><td>6</td><td>160.0</td><td>110</td><td>3.9</td><td>2.62</td><td>16.46</td><td>0</td><td>1</td><td>4</td><td>4</td></tr><tr><td>&quot;Mazda RX4 Wag&quot;</td><td>21.0</td><td>6</td><td>160.0</td><td>110</td><td>3.9</td><td>2.875</td><td>17.02</td><td>0</td><td>1</td><td>4</td><td>4</td></tr><tr><td>&quot;Datsun 710&quot;</td><td>22.8</td><td>4</td><td>108.0</td><td>93</td><td>3.85</td><td>2.32</td><td>18.61</td><td>1</td><td>1</td><td>4</td><td>1</td></tr><tr><td>&quot;Hornet 4 Drive&quot;</td><td>21.4</td><td>6</td><td>258.0</td><td>110</td><td>3.08</td><td>3.215</td><td>19.44</td><td>1</td><td>0</td><td>3</td><td>1</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (4, 12)\n",
       "┌────────────────┬──────┬─────┬───────┬───┬─────┬─────┬──────┬──────┐\n",
       "│ name           ┆ mpg  ┆ cyl ┆ disp  ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │\n",
       "│ ---            ┆ ---  ┆ --- ┆ ---   ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │\n",
       "│ str            ┆ f64  ┆ i64 ┆ f64   ┆   ┆ i64 ┆ i64 ┆ i64  ┆ i64  │\n",
       "╞════════════════╪══════╪═════╪═══════╪═══╪═════╪═════╪══════╪══════╡\n",
       "│ Mazda RX4      ┆ 21.0 ┆ 6   ┆ 160.0 ┆ … ┆ 0   ┆ 1   ┆ 4    ┆ 4    │\n",
       "│ Mazda RX4 Wag  ┆ 21.0 ┆ 6   ┆ 160.0 ┆ … ┆ 0   ┆ 1   ┆ 4    ┆ 4    │\n",
       "│ Datsun 710     ┆ 22.8 ┆ 4   ┆ 108.0 ┆ … ┆ 1   ┆ 1   ┆ 4    ┆ 1    │\n",
       "│ Hornet 4 Drive ┆ 21.4 ┆ 6   ┆ 258.0 ┆ … ┆ 1   ┆ 0   ┆ 3    ┆ 1    │\n",
       "└────────────────┴──────┴─────┴───────┴───┴─────┴─────┴──────┴──────┘"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Lấy các dòng từ 1 đến 4\n",
    "mtcars_pl[0:4]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Lọc dữ liệu theo điều kiện"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`polars` sử dụng method `filter` để lọc điều kiện nhanh chóng"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (5, 12)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>mpg</th><th>cyl</th><th>disp</th><th>hp</th><th>drat</th><th>wt</th><th>qsec</th><th>vs</th><th>am</th><th>gear</th><th>carb</th></tr><tr><td>str</td><td>f64</td><td>i64</td><td>f64</td><td>i64</td><td>f64</td><td>f64</td><td>f64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Mazda RX4&quot;</td><td>21.0</td><td>6</td><td>160.0</td><td>110</td><td>3.9</td><td>2.62</td><td>16.46</td><td>0</td><td>1</td><td>4</td><td>4</td></tr><tr><td>&quot;Mazda RX4 Wag&quot;</td><td>21.0</td><td>6</td><td>160.0</td><td>110</td><td>3.9</td><td>2.875</td><td>17.02</td><td>0</td><td>1</td><td>4</td><td>4</td></tr><tr><td>&quot;Datsun 710&quot;</td><td>22.8</td><td>4</td><td>108.0</td><td>93</td><td>3.85</td><td>2.32</td><td>18.61</td><td>1</td><td>1</td><td>4</td><td>1</td></tr><tr><td>&quot;Hornet 4 Drive&quot;</td><td>21.4</td><td>6</td><td>258.0</td><td>110</td><td>3.08</td><td>3.215</td><td>19.44</td><td>1</td><td>0</td><td>3</td><td>1</td></tr><tr><td>&quot;Merc 240D&quot;</td><td>24.4</td><td>4</td><td>146.7</td><td>62</td><td>3.69</td><td>3.19</td><td>20.0</td><td>1</td><td>0</td><td>4</td><td>2</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (5, 12)\n",
       "┌────────────────┬──────┬─────┬───────┬───┬─────┬─────┬──────┬──────┐\n",
       "│ name           ┆ mpg  ┆ cyl ┆ disp  ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │\n",
       "│ ---            ┆ ---  ┆ --- ┆ ---   ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │\n",
       "│ str            ┆ f64  ┆ i64 ┆ f64   ┆   ┆ i64 ┆ i64 ┆ i64  ┆ i64  │\n",
       "╞════════════════╪══════╪═════╪═══════╪═══╪═════╪═════╪══════╪══════╡\n",
       "│ Mazda RX4      ┆ 21.0 ┆ 6   ┆ 160.0 ┆ … ┆ 0   ┆ 1   ┆ 4    ┆ 4    │\n",
       "│ Mazda RX4 Wag  ┆ 21.0 ┆ 6   ┆ 160.0 ┆ … ┆ 0   ┆ 1   ┆ 4    ┆ 4    │\n",
       "│ Datsun 710     ┆ 22.8 ┆ 4   ┆ 108.0 ┆ … ┆ 1   ┆ 1   ┆ 4    ┆ 1    │\n",
       "│ Hornet 4 Drive ┆ 21.4 ┆ 6   ┆ 258.0 ┆ … ┆ 1   ┆ 0   ┆ 3    ┆ 1    │\n",
       "│ Merc 240D      ┆ 24.4 ┆ 4   ┆ 146.7 ┆ … ┆ 1   ┆ 0   ┆ 4    ┆ 2    │\n",
       "└────────────────┴──────┴─────┴───────┴───┴─────┴─────┴──────┴──────┘"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Lọc mpg >= 20\n",
    "mtcars_pl.\\\n",
    "    filter(pl.col(\"mpg\") >= 20).\\\n",
    "    head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (5, 12)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>mpg</th><th>cyl</th><th>disp</th><th>hp</th><th>drat</th><th>wt</th><th>qsec</th><th>vs</th><th>am</th><th>gear</th><th>carb</th></tr><tr><td>str</td><td>f64</td><td>i64</td><td>f64</td><td>i64</td><td>f64</td><td>f64</td><td>f64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Datsun 710&quot;</td><td>22.8</td><td>4</td><td>108.0</td><td>93</td><td>3.85</td><td>2.32</td><td>18.61</td><td>1</td><td>1</td><td>4</td><td>1</td></tr><tr><td>&quot;Merc 240D&quot;</td><td>24.4</td><td>4</td><td>146.7</td><td>62</td><td>3.69</td><td>3.19</td><td>20.0</td><td>1</td><td>0</td><td>4</td><td>2</td></tr><tr><td>&quot;Merc 230&quot;</td><td>22.8</td><td>4</td><td>140.8</td><td>95</td><td>3.92</td><td>3.15</td><td>22.9</td><td>1</td><td>0</td><td>4</td><td>2</td></tr><tr><td>&quot;Fiat 128&quot;</td><td>32.4</td><td>4</td><td>78.7</td><td>66</td><td>4.08</td><td>2.2</td><td>19.47</td><td>1</td><td>1</td><td>4</td><td>1</td></tr><tr><td>&quot;Honda Civic&quot;</td><td>30.4</td><td>4</td><td>75.7</td><td>52</td><td>4.93</td><td>1.615</td><td>18.52</td><td>1</td><td>1</td><td>4</td><td>2</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (5, 12)\n",
       "┌─────────────┬──────┬─────┬───────┬───┬─────┬─────┬──────┬──────┐\n",
       "│ name        ┆ mpg  ┆ cyl ┆ disp  ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │\n",
       "│ ---         ┆ ---  ┆ --- ┆ ---   ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │\n",
       "│ str         ┆ f64  ┆ i64 ┆ f64   ┆   ┆ i64 ┆ i64 ┆ i64  ┆ i64  │\n",
       "╞═════════════╪══════╪═════╪═══════╪═══╪═════╪═════╪══════╪══════╡\n",
       "│ Datsun 710  ┆ 22.8 ┆ 4   ┆ 108.0 ┆ … ┆ 1   ┆ 1   ┆ 4    ┆ 1    │\n",
       "│ Merc 240D   ┆ 24.4 ┆ 4   ┆ 146.7 ┆ … ┆ 1   ┆ 0   ┆ 4    ┆ 2    │\n",
       "│ Merc 230    ┆ 22.8 ┆ 4   ┆ 140.8 ┆ … ┆ 1   ┆ 0   ┆ 4    ┆ 2    │\n",
       "│ Fiat 128    ┆ 32.4 ┆ 4   ┆ 78.7  ┆ … ┆ 1   ┆ 1   ┆ 4    ┆ 1    │\n",
       "│ Honda Civic ┆ 30.4 ┆ 4   ┆ 75.7  ┆ … ┆ 1   ┆ 1   ┆ 4    ┆ 2    │\n",
       "└─────────────┴──────┴─────┴───────┴───┴─────┴─────┴──────┴──────┘"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# mpg >= 20 & cyl = 4\n",
    "mtcars_pl.\\\n",
    "    filter((pl.col(\"mpg\") >= 20) & (pl.col(\"cyl\") == 4)).\\\n",
    "    head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ta cũng có thể viết theo pipe operator với nhiều điều kiện liên tiếp như sau"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (5, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>mpg</th><th>cyl</th></tr><tr><td>f64</td><td>i64</td></tr></thead><tbody><tr><td>22.8</td><td>4</td></tr><tr><td>24.4</td><td>4</td></tr><tr><td>22.8</td><td>4</td></tr><tr><td>32.4</td><td>4</td></tr><tr><td>30.4</td><td>4</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (5, 2)\n",
       "┌──────┬─────┐\n",
       "│ mpg  ┆ cyl │\n",
       "│ ---  ┆ --- │\n",
       "│ f64  ┆ i64 │\n",
       "╞══════╪═════╡\n",
       "│ 22.8 ┆ 4   │\n",
       "│ 24.4 ┆ 4   │\n",
       "│ 22.8 ┆ 4   │\n",
       "│ 32.4 ┆ 4   │\n",
       "│ 30.4 ┆ 4   │\n",
       "└──────┴─────┘"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Lấy thêm điều kiện cyl == 4\n",
    "mtcars_pl.\\\n",
    "    filter(pl.col(\"mpg\") >= 20).\\\n",
    "    filter(pl.col(\"cyl\") == 4).\\\n",
    "    select(pl.col([\"mpg\", \"cyl\"])).\\\n",
    "    head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Sắp xếp lại dữ liệu"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ta có thể sort lại dữ liệu với method `sort`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (5, 12)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>mpg</th><th>cyl</th><th>disp</th><th>hp</th><th>drat</th><th>wt</th><th>qsec</th><th>vs</th><th>am</th><th>gear</th><th>carb</th></tr><tr><td>str</td><td>f64</td><td>i64</td><td>f64</td><td>i64</td><td>f64</td><td>f64</td><td>f64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Cadillac Fleetwood&quot;</td><td>10.4</td><td>8</td><td>472.0</td><td>205</td><td>2.93</td><td>5.25</td><td>17.98</td><td>0</td><td>0</td><td>3</td><td>4</td></tr><tr><td>&quot;Lincoln Continental&quot;</td><td>10.4</td><td>8</td><td>460.0</td><td>215</td><td>3.0</td><td>5.424</td><td>17.82</td><td>0</td><td>0</td><td>3</td><td>4</td></tr><tr><td>&quot;Camaro Z28&quot;</td><td>13.3</td><td>8</td><td>350.0</td><td>245</td><td>3.73</td><td>3.84</td><td>15.41</td><td>0</td><td>0</td><td>3</td><td>4</td></tr><tr><td>&quot;Duster 360&quot;</td><td>14.3</td><td>8</td><td>360.0</td><td>245</td><td>3.21</td><td>3.57</td><td>15.84</td><td>0</td><td>0</td><td>3</td><td>4</td></tr><tr><td>&quot;Chrysler Imperial&quot;</td><td>14.7</td><td>8</td><td>440.0</td><td>230</td><td>3.23</td><td>5.345</td><td>17.42</td><td>0</td><td>0</td><td>3</td><td>4</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (5, 12)\n",
       "┌─────────────────────┬──────┬─────┬───────┬───┬─────┬─────┬──────┬──────┐\n",
       "│ name                ┆ mpg  ┆ cyl ┆ disp  ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │\n",
       "│ ---                 ┆ ---  ┆ --- ┆ ---   ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │\n",
       "│ str                 ┆ f64  ┆ i64 ┆ f64   ┆   ┆ i64 ┆ i64 ┆ i64  ┆ i64  │\n",
       "╞═════════════════════╪══════╪═════╪═══════╪═══╪═════╪═════╪══════╪══════╡\n",
       "│ Cadillac Fleetwood  ┆ 10.4 ┆ 8   ┆ 472.0 ┆ … ┆ 0   ┆ 0   ┆ 3    ┆ 4    │\n",
       "│ Lincoln Continental ┆ 10.4 ┆ 8   ┆ 460.0 ┆ … ┆ 0   ┆ 0   ┆ 3    ┆ 4    │\n",
       "│ Camaro Z28          ┆ 13.3 ┆ 8   ┆ 350.0 ┆ … ┆ 0   ┆ 0   ┆ 3    ┆ 4    │\n",
       "│ Duster 360          ┆ 14.3 ┆ 8   ┆ 360.0 ┆ … ┆ 0   ┆ 0   ┆ 3    ┆ 4    │\n",
       "│ Chrysler Imperial   ┆ 14.7 ┆ 8   ┆ 440.0 ┆ … ┆ 0   ┆ 0   ┆ 3    ┆ 4    │\n",
       "└─────────────────────┴──────┴─────┴───────┴───┴─────┴─────┴──────┴──────┘"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Lọc từ thấp đến cao\n",
    "mtcars_pl.sort('mpg').head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (5, 12)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>mpg</th><th>cyl</th><th>disp</th><th>hp</th><th>drat</th><th>wt</th><th>qsec</th><th>vs</th><th>am</th><th>gear</th><th>carb</th></tr><tr><td>str</td><td>f64</td><td>i64</td><td>f64</td><td>i64</td><td>f64</td><td>f64</td><td>f64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Toyota Corolla&quot;</td><td>33.9</td><td>4</td><td>71.1</td><td>65</td><td>4.22</td><td>1.835</td><td>19.9</td><td>1</td><td>1</td><td>4</td><td>1</td></tr><tr><td>&quot;Fiat 128&quot;</td><td>32.4</td><td>4</td><td>78.7</td><td>66</td><td>4.08</td><td>2.2</td><td>19.47</td><td>1</td><td>1</td><td>4</td><td>1</td></tr><tr><td>&quot;Honda Civic&quot;</td><td>30.4</td><td>4</td><td>75.7</td><td>52</td><td>4.93</td><td>1.615</td><td>18.52</td><td>1</td><td>1</td><td>4</td><td>2</td></tr><tr><td>&quot;Lotus Europa&quot;</td><td>30.4</td><td>4</td><td>95.1</td><td>113</td><td>3.77</td><td>1.513</td><td>16.9</td><td>1</td><td>1</td><td>5</td><td>2</td></tr><tr><td>&quot;Fiat X1-9&quot;</td><td>27.3</td><td>4</td><td>79.0</td><td>66</td><td>4.08</td><td>1.935</td><td>18.9</td><td>1</td><td>1</td><td>4</td><td>1</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (5, 12)\n",
       "┌────────────────┬──────┬─────┬──────┬───┬─────┬─────┬──────┬──────┐\n",
       "│ name           ┆ mpg  ┆ cyl ┆ disp ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │\n",
       "│ ---            ┆ ---  ┆ --- ┆ ---  ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │\n",
       "│ str            ┆ f64  ┆ i64 ┆ f64  ┆   ┆ i64 ┆ i64 ┆ i64  ┆ i64  │\n",
       "╞════════════════╪══════╪═════╪══════╪═══╪═════╪═════╪══════╪══════╡\n",
       "│ Toyota Corolla ┆ 33.9 ┆ 4   ┆ 71.1 ┆ … ┆ 1   ┆ 1   ┆ 4    ┆ 1    │\n",
       "│ Fiat 128       ┆ 32.4 ┆ 4   ┆ 78.7 ┆ … ┆ 1   ┆ 1   ┆ 4    ┆ 1    │\n",
       "│ Honda Civic    ┆ 30.4 ┆ 4   ┆ 75.7 ┆ … ┆ 1   ┆ 1   ┆ 4    ┆ 2    │\n",
       "│ Lotus Europa   ┆ 30.4 ┆ 4   ┆ 95.1 ┆ … ┆ 1   ┆ 1   ┆ 5    ┆ 2    │\n",
       "│ Fiat X1-9      ┆ 27.3 ┆ 4   ┆ 79.0 ┆ … ┆ 1   ┆ 1   ┆ 4    ┆ 1    │\n",
       "└────────────────┴──────┴─────┴──────┴───┴─────┴─────┴──────┴──────┘"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Lọc từ cao đến thấp\n",
    "mtcars_pl.sort('mpg', descending = True).head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Nhóm câu lệnh biến đổi dữ liệu"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Đổi tên biến\n",
    "\n",
    "**Cấu trúc**:\n",
    "`df.rename(columns = {old_var : new_var})`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (5, 12)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>mpg_new</th><th>cyl_new</th><th>disp</th><th>hp</th><th>drat</th><th>wt</th><th>qsec</th><th>vs</th><th>am</th><th>gear</th><th>carb</th></tr><tr><td>str</td><td>f64</td><td>i64</td><td>f64</td><td>i64</td><td>f64</td><td>f64</td><td>f64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Mazda RX4&quot;</td><td>21.0</td><td>6</td><td>160.0</td><td>110</td><td>3.9</td><td>2.62</td><td>16.46</td><td>0</td><td>1</td><td>4</td><td>4</td></tr><tr><td>&quot;Mazda RX4 Wag&quot;</td><td>21.0</td><td>6</td><td>160.0</td><td>110</td><td>3.9</td><td>2.875</td><td>17.02</td><td>0</td><td>1</td><td>4</td><td>4</td></tr><tr><td>&quot;Datsun 710&quot;</td><td>22.8</td><td>4</td><td>108.0</td><td>93</td><td>3.85</td><td>2.32</td><td>18.61</td><td>1</td><td>1</td><td>4</td><td>1</td></tr><tr><td>&quot;Hornet 4 Drive&quot;</td><td>21.4</td><td>6</td><td>258.0</td><td>110</td><td>3.08</td><td>3.215</td><td>19.44</td><td>1</td><td>0</td><td>3</td><td>1</td></tr><tr><td>&quot;Hornet Sportabout&quot;</td><td>18.7</td><td>8</td><td>360.0</td><td>175</td><td>3.15</td><td>3.44</td><td>17.02</td><td>0</td><td>0</td><td>3</td><td>2</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (5, 12)\n",
       "┌───────────────────┬─────────┬─────────┬───────┬───┬─────┬─────┬──────┬──────┐\n",
       "│ name              ┆ mpg_new ┆ cyl_new ┆ disp  ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │\n",
       "│ ---               ┆ ---     ┆ ---     ┆ ---   ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │\n",
       "│ str               ┆ f64     ┆ i64     ┆ f64   ┆   ┆ i64 ┆ i64 ┆ i64  ┆ i64  │\n",
       "╞═══════════════════╪═════════╪═════════╪═══════╪═══╪═════╪═════╪══════╪══════╡\n",
       "│ Mazda RX4         ┆ 21.0    ┆ 6       ┆ 160.0 ┆ … ┆ 0   ┆ 1   ┆ 4    ┆ 4    │\n",
       "│ Mazda RX4 Wag     ┆ 21.0    ┆ 6       ┆ 160.0 ┆ … ┆ 0   ┆ 1   ┆ 4    ┆ 4    │\n",
       "│ Datsun 710        ┆ 22.8    ┆ 4       ┆ 108.0 ┆ … ┆ 1   ┆ 1   ┆ 4    ┆ 1    │\n",
       "│ Hornet 4 Drive    ┆ 21.4    ┆ 6       ┆ 258.0 ┆ … ┆ 1   ┆ 0   ┆ 3    ┆ 1    │\n",
       "│ Hornet Sportabout ┆ 18.7    ┆ 8       ┆ 360.0 ┆ … ┆ 0   ┆ 0   ┆ 3    ┆ 2    │\n",
       "└───────────────────┴─────────┴─────────┴───────┴───┴─────┴─────┴──────┴──────┘"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mtcars_pl.rename(\n",
    "    {\n",
    "        'mpg' : 'mpg_new',\n",
    "        'cyl' : 'cyl_new'\n",
    "    }).\\\n",
    "    head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tạo & xóa biến mới "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Với `polars`, cách thuận tiện nhất để biến đổi dữ liệu các biến trong dataframe là dùng `with_columns` \n",
    "method.\n",
    "\n",
    "Với `with_columns`, ta có thể tạo và biến đổi dữ liệu. Tên của biến mới được khai báo thông qua `alias` method hoặc có thể tạo trực tiếp biến"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (5, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>mpg</th><th>cyl</th><th>new_var</th></tr><tr><td>f64</td><td>i64</td><td>f64</td></tr></thead><tbody><tr><td>21.0</td><td>6</td><td>42.0</td></tr><tr><td>21.0</td><td>6</td><td>42.0</td></tr><tr><td>22.8</td><td>4</td><td>45.6</td></tr><tr><td>21.4</td><td>6</td><td>42.8</td></tr><tr><td>18.7</td><td>8</td><td>37.4</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (5, 3)\n",
       "┌──────┬─────┬─────────┐\n",
       "│ mpg  ┆ cyl ┆ new_var │\n",
       "│ ---  ┆ --- ┆ ---     │\n",
       "│ f64  ┆ i64 ┆ f64     │\n",
       "╞══════╪═════╪═════════╡\n",
       "│ 21.0 ┆ 6   ┆ 42.0    │\n",
       "│ 21.0 ┆ 6   ┆ 42.0    │\n",
       "│ 22.8 ┆ 4   ┆ 45.6    │\n",
       "│ 21.4 ┆ 6   ┆ 42.8    │\n",
       "│ 18.7 ┆ 8   ┆ 37.4    │\n",
       "└──────┴─────┴─────────┘"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Cách 1: Tạo biến mới với alias\n",
    "df = mtcars_pl.\\\n",
    "    select(['mpg', 'cyl']).\\\n",
    "    with_columns(\n",
    "        (pl.col(\"mpg\")*2).alias('new_var')\n",
    "    )\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (5, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>mpg</th><th>cyl</th><th>new_var</th></tr><tr><td>f64</td><td>i64</td><td>f64</td></tr></thead><tbody><tr><td>21.0</td><td>6</td><td>42.0</td></tr><tr><td>21.0</td><td>6</td><td>42.0</td></tr><tr><td>22.8</td><td>4</td><td>45.6</td></tr><tr><td>21.4</td><td>6</td><td>42.8</td></tr><tr><td>18.7</td><td>8</td><td>37.4</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (5, 3)\n",
       "┌──────┬─────┬─────────┐\n",
       "│ mpg  ┆ cyl ┆ new_var │\n",
       "│ ---  ┆ --- ┆ ---     │\n",
       "│ f64  ┆ i64 ┆ f64     │\n",
       "╞══════╪═════╪═════════╡\n",
       "│ 21.0 ┆ 6   ┆ 42.0    │\n",
       "│ 21.0 ┆ 6   ┆ 42.0    │\n",
       "│ 22.8 ┆ 4   ┆ 45.6    │\n",
       "│ 21.4 ┆ 6   ┆ 42.8    │\n",
       "│ 18.7 ┆ 8   ┆ 37.4    │\n",
       "└──────┴─────┴─────────┘"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Cách 2: Không dùng alias\n",
    "mtcars_pl.\\\n",
    "    select(['mpg', 'cyl']).\\\n",
    "    with_columns(\n",
    "        new_var = (pl.col(\"mpg\")*2)\n",
    "    ).\\\n",
    "    head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (5, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>mpg</th><th>cyl</th></tr><tr><td>f64</td><td>i64</td></tr></thead><tbody><tr><td>21.0</td><td>6</td></tr><tr><td>21.0</td><td>6</td></tr><tr><td>22.8</td><td>4</td></tr><tr><td>21.4</td><td>6</td></tr><tr><td>18.7</td><td>8</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (5, 2)\n",
       "┌──────┬─────┐\n",
       "│ mpg  ┆ cyl │\n",
       "│ ---  ┆ --- │\n",
       "│ f64  ┆ i64 │\n",
       "╞══════╪═════╡\n",
       "│ 21.0 ┆ 6   │\n",
       "│ 21.0 ┆ 6   │\n",
       "│ 22.8 ┆ 4   │\n",
       "│ 21.4 ┆ 6   │\n",
       "│ 18.7 ┆ 8   │\n",
       "└──────┴─────┘"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Drop biến new_var\n",
    "df.drop('new_var').head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tạo biến mới theo nhóm\n",
    "\n",
    "**Lưu ý**: `polars` có sẵn rất nhiều methods cho phép tính toán & tổng hợp dữ liệu có sẵn mà không cần phải chuyển qua các thư viện khác như numpy hay pandas.\n",
    "\n",
    "Ta có thể tạo biến mới theo nhóm bằng cách kết hợp giữa `with_columns` và `over` như sau\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (32, 14)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>mpg</th><th>cyl</th><th>disp</th><th>hp</th><th>drat</th><th>wt</th><th>qsec</th><th>vs</th><th>am</th><th>gear</th><th>carb</th><th>sum_mpg</th><th>q75</th></tr><tr><td>str</td><td>f64</td><td>i64</td><td>f64</td><td>i64</td><td>f64</td><td>f64</td><td>f64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>&quot;Mazda RX4&quot;</td><td>21.0</td><td>6</td><td>160.0</td><td>110</td><td>3.9</td><td>2.62</td><td>16.46</td><td>0</td><td>1</td><td>4</td><td>4</td><td>138.2</td><td>21.0</td></tr><tr><td>&quot;Mazda RX4 Wag&quot;</td><td>21.0</td><td>6</td><td>160.0</td><td>110</td><td>3.9</td><td>2.875</td><td>17.02</td><td>0</td><td>1</td><td>4</td><td>4</td><td>138.2</td><td>21.0</td></tr><tr><td>&quot;Datsun 710&quot;</td><td>22.8</td><td>4</td><td>108.0</td><td>93</td><td>3.85</td><td>2.32</td><td>18.61</td><td>1</td><td>1</td><td>4</td><td>1</td><td>293.3</td><td>30.4</td></tr><tr><td>&quot;Hornet 4 Drive&quot;</td><td>21.4</td><td>6</td><td>258.0</td><td>110</td><td>3.08</td><td>3.215</td><td>19.44</td><td>1</td><td>0</td><td>3</td><td>1</td><td>138.2</td><td>21.0</td></tr><tr><td>&quot;Hornet Sportabout&quot;</td><td>18.7</td><td>8</td><td>360.0</td><td>175</td><td>3.15</td><td>3.44</td><td>17.02</td><td>0</td><td>0</td><td>3</td><td>2</td><td>211.4</td><td>16.4</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>&quot;Lotus Europa&quot;</td><td>30.4</td><td>4</td><td>95.1</td><td>113</td><td>3.77</td><td>1.513</td><td>16.9</td><td>1</td><td>1</td><td>5</td><td>2</td><td>293.3</td><td>30.4</td></tr><tr><td>&quot;Ford Pantera L&quot;</td><td>15.8</td><td>8</td><td>351.0</td><td>264</td><td>4.22</td><td>3.17</td><td>14.5</td><td>0</td><td>1</td><td>5</td><td>4</td><td>211.4</td><td>16.4</td></tr><tr><td>&quot;Ferrari Dino&quot;</td><td>19.7</td><td>6</td><td>145.0</td><td>175</td><td>3.62</td><td>2.77</td><td>15.5</td><td>0</td><td>1</td><td>5</td><td>6</td><td>138.2</td><td>21.0</td></tr><tr><td>&quot;Maserati Bora&quot;</td><td>15.0</td><td>8</td><td>301.0</td><td>335</td><td>3.54</td><td>3.57</td><td>14.6</td><td>0</td><td>1</td><td>5</td><td>8</td><td>211.4</td><td>16.4</td></tr><tr><td>&quot;Volvo 142E&quot;</td><td>21.4</td><td>4</td><td>121.0</td><td>109</td><td>4.11</td><td>2.78</td><td>18.6</td><td>1</td><td>1</td><td>4</td><td>2</td><td>293.3</td><td>30.4</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (32, 14)\n",
       "┌───────────────────┬──────┬─────┬───────┬───┬──────┬──────┬─────────┬──────┐\n",
       "│ name              ┆ mpg  ┆ cyl ┆ disp  ┆ … ┆ gear ┆ carb ┆ sum_mpg ┆ q75  │\n",
       "│ ---               ┆ ---  ┆ --- ┆ ---   ┆   ┆ ---  ┆ ---  ┆ ---     ┆ ---  │\n",
       "│ str               ┆ f64  ┆ i64 ┆ f64   ┆   ┆ i64  ┆ i64  ┆ f64     ┆ f64  │\n",
       "╞═══════════════════╪══════╪═════╪═══════╪═══╪══════╪══════╪═════════╪══════╡\n",
       "│ Mazda RX4         ┆ 21.0 ┆ 6   ┆ 160.0 ┆ … ┆ 4    ┆ 4    ┆ 138.2   ┆ 21.0 │\n",
       "│ Mazda RX4 Wag     ┆ 21.0 ┆ 6   ┆ 160.0 ┆ … ┆ 4    ┆ 4    ┆ 138.2   ┆ 21.0 │\n",
       "│ Datsun 710        ┆ 22.8 ┆ 4   ┆ 108.0 ┆ … ┆ 4    ┆ 1    ┆ 293.3   ┆ 30.4 │\n",
       "│ Hornet 4 Drive    ┆ 21.4 ┆ 6   ┆ 258.0 ┆ … ┆ 3    ┆ 1    ┆ 138.2   ┆ 21.0 │\n",
       "│ Hornet Sportabout ┆ 18.7 ┆ 8   ┆ 360.0 ┆ … ┆ 3    ┆ 2    ┆ 211.4   ┆ 16.4 │\n",
       "│ …                 ┆ …    ┆ …   ┆ …     ┆ … ┆ …    ┆ …    ┆ …       ┆ …    │\n",
       "│ Lotus Europa      ┆ 30.4 ┆ 4   ┆ 95.1  ┆ … ┆ 5    ┆ 2    ┆ 293.3   ┆ 30.4 │\n",
       "│ Ford Pantera L    ┆ 15.8 ┆ 8   ┆ 351.0 ┆ … ┆ 5    ┆ 4    ┆ 211.4   ┆ 16.4 │\n",
       "│ Ferrari Dino      ┆ 19.7 ┆ 6   ┆ 145.0 ┆ … ┆ 5    ┆ 6    ┆ 138.2   ┆ 21.0 │\n",
       "│ Maserati Bora     ┆ 15.0 ┆ 8   ┆ 301.0 ┆ … ┆ 5    ┆ 8    ┆ 211.4   ┆ 16.4 │\n",
       "│ Volvo 142E        ┆ 21.4 ┆ 4   ┆ 121.0 ┆ … ┆ 4    ┆ 2    ┆ 293.3   ┆ 30.4 │\n",
       "└───────────────────┴──────┴─────┴───────┴───┴──────┴──────┴─────────┴──────┘"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mtcars_pl.\\\n",
    "    with_columns(\n",
    "         # Tổng mpg\n",
    "         pl.col(\"mpg\").sum().over(\"cyl\").alias(\"sum_mpg\"),\n",
    "         # Quantile 0.75 của mpg\n",
    "         pl.col(\"mpg\").quantile(0.75).over(\"cyl\").alias(\"q75\")\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Join\n",
    "\n",
    "Tương tự như pandas, join trong polars có thể dùng hàm `join`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape: (4, 2)\n",
      "┌──────────┬─────────────┐\n",
      "│ employee ┆ group       │\n",
      "│ ---      ┆ ---         │\n",
      "│ str      ┆ str         │\n",
      "╞══════════╪═════════════╡\n",
      "│ Bob      ┆ Accounting  │\n",
      "│ Jake     ┆ Engineering │\n",
      "│ Lisa     ┆ Engineering │\n",
      "│ Sue      ┆ HR          │\n",
      "└──────────┴─────────────┘\n",
      "shape: (3, 2)\n",
      "┌──────────┬───────────┐\n",
      "│ employee ┆ hire_date │\n",
      "│ ---      ┆ ---       │\n",
      "│ str      ┆ i64       │\n",
      "╞══════════╪═══════════╡\n",
      "│ Lisa     ┆ 2004      │\n",
      "│ Bob      ┆ 2008      │\n",
      "│ Jake     ┆ 2012      │\n",
      "└──────────┴───────────┘\n"
     ]
    }
   ],
   "source": [
    "df1 = pl.DataFrame({'employee': ['Bob', 'Jake', 'Lisa', 'Sue'],\n",
    "                    'group': ['Accounting', 'Engineering', 'Engineering', 'HR']})\n",
    "df2 = pl.DataFrame({'employee': ['Lisa', 'Bob', 'Jake'],\n",
    "                    'hire_date': [2004, 2008, 2012]})\n",
    "print(df1); print(df2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (3, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>employee</th><th>group</th><th>hire_date</th></tr><tr><td>str</td><td>str</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Bob&quot;</td><td>&quot;Accounting&quot;</td><td>2008</td></tr><tr><td>&quot;Jake&quot;</td><td>&quot;Engineering&quot;</td><td>2012</td></tr><tr><td>&quot;Lisa&quot;</td><td>&quot;Engineering&quot;</td><td>2004</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (3, 3)\n",
       "┌──────────┬─────────────┬───────────┐\n",
       "│ employee ┆ group       ┆ hire_date │\n",
       "│ ---      ┆ ---         ┆ ---       │\n",
       "│ str      ┆ str         ┆ i64       │\n",
       "╞══════════╪═════════════╪═══════════╡\n",
       "│ Bob      ┆ Accounting  ┆ 2008      │\n",
       "│ Jake     ┆ Engineering ┆ 2012      │\n",
       "│ Lisa     ┆ Engineering ┆ 2004      │\n",
       "└──────────┴─────────────┴───────────┘"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.join(df2, on = \"employee\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Lưu ý**: Khi dùng `join`, ` polars`sẽ tự động bỏ các trường không chứa trong cả 2 bảng. Nếu muốn chuyển thành `left_join`, cần thêm option `how`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (4, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>employee</th><th>group</th><th>hire_date</th></tr><tr><td>str</td><td>str</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Bob&quot;</td><td>&quot;Accounting&quot;</td><td>2008</td></tr><tr><td>&quot;Jake&quot;</td><td>&quot;Engineering&quot;</td><td>2012</td></tr><tr><td>&quot;Lisa&quot;</td><td>&quot;Engineering&quot;</td><td>2004</td></tr><tr><td>&quot;Sue&quot;</td><td>&quot;HR&quot;</td><td>null</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (4, 3)\n",
       "┌──────────┬─────────────┬───────────┐\n",
       "│ employee ┆ group       ┆ hire_date │\n",
       "│ ---      ┆ ---         ┆ ---       │\n",
       "│ str      ┆ str         ┆ i64       │\n",
       "╞══════════╪═════════════╪═══════════╡\n",
       "│ Bob      ┆ Accounting  ┆ 2008      │\n",
       "│ Jake     ┆ Engineering ┆ 2012      │\n",
       "│ Lisa     ┆ Engineering ┆ 2004      │\n",
       "│ Sue      ┆ HR          ┆ null      │\n",
       "└──────────┴─────────────┴───────────┘"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.join(df2, on = \"employee\", how = \"left\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (1, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>employee</th><th>group</th></tr><tr><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;Sue&quot;</td><td>&quot;HR&quot;</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (1, 2)\n",
       "┌──────────┬───────┐\n",
       "│ employee ┆ group │\n",
       "│ ---      ┆ ---   │\n",
       "│ str      ┆ str   │\n",
       "╞══════════╪═══════╡\n",
       "│ Sue      ┆ HR    │\n",
       "└──────────┴───────┘"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Lấy các trưởng không ở cả 2 bảng\n",
    "df1.join(df2, on = \"employee\", how = 'anti')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "Với trường hợp bảng dữ liệu khác key, ta cần lựa chọn các biến ở bảng"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape: (4, 2)\n",
      "┌──────────┬─────────────┐\n",
      "│ employee ┆ group       │\n",
      "│ ---      ┆ ---         │\n",
      "│ str      ┆ str         │\n",
      "╞══════════╪═════════════╡\n",
      "│ Bob      ┆ Accounting  │\n",
      "│ Jake     ┆ Engineering │\n",
      "│ Lisa     ┆ Engineering │\n",
      "│ Sue      ┆ HR          │\n",
      "└──────────┴─────────────┘\n",
      "shape: (4, 2)\n",
      "┌──────┬────────┐\n",
      "│ name ┆ salary │\n",
      "│ ---  ┆ ---    │\n",
      "│ str  ┆ i64    │\n",
      "╞══════╪════════╡\n",
      "│ Bob  ┆ 70000  │\n",
      "│ Jake ┆ 80000  │\n",
      "│ Lisa ┆ 120000 │\n",
      "│ Sue  ┆ 90000  │\n",
      "└──────┴────────┘\n"
     ]
    }
   ],
   "source": [
    "df3 = pl.DataFrame({'name': ['Bob', 'Jake', 'Lisa', 'Sue'],\n",
    "                    'salary': [70000, 80000, 120000, 90000]})\n",
    "print(df1); print(df3);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (4, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>employee</th><th>group</th><th>salary</th></tr><tr><td>str</td><td>str</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Bob&quot;</td><td>&quot;Accounting&quot;</td><td>70000</td></tr><tr><td>&quot;Jake&quot;</td><td>&quot;Engineering&quot;</td><td>80000</td></tr><tr><td>&quot;Lisa&quot;</td><td>&quot;Engineering&quot;</td><td>120000</td></tr><tr><td>&quot;Sue&quot;</td><td>&quot;HR&quot;</td><td>90000</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (4, 3)\n",
       "┌──────────┬─────────────┬────────┐\n",
       "│ employee ┆ group       ┆ salary │\n",
       "│ ---      ┆ ---         ┆ ---    │\n",
       "│ str      ┆ str         ┆ i64    │\n",
       "╞══════════╪═════════════╪════════╡\n",
       "│ Bob      ┆ Accounting  ┆ 70000  │\n",
       "│ Jake     ┆ Engineering ┆ 80000  │\n",
       "│ Lisa     ┆ Engineering ┆ 120000 │\n",
       "│ Sue      ┆ HR          ┆ 90000  │\n",
       "└──────────┴─────────────┴────────┘"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.join(df3, left_on = 'employee', right_on = 'name')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Ghép dữ liệu"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Với pandas, cấu trúc của DataFrame được chia thành hàng và cột. Do đó, cả 2 trường hợp ghép dòng và ghép cột, ta có thể dùng hàm `concat` tương tự như `pandas`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Ghép dòng"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape: (3, 2)\n",
      "┌─────┬─────┐\n",
      "│ a   ┆ b   │\n",
      "│ --- ┆ --- │\n",
      "│ i64 ┆ i64 │\n",
      "╞═════╪═════╡\n",
      "│ 4   ┆ 7   │\n",
      "│ 5   ┆ 8   │\n",
      "│ 6   ┆ 9   │\n",
      "└─────┴─────┘\n",
      "shape: (2, 2)\n",
      "┌─────┬─────┐\n",
      "│ a   ┆ b   │\n",
      "│ --- ┆ --- │\n",
      "│ i64 ┆ i64 │\n",
      "╞═════╪═════╡\n",
      "│ 1   ┆ 8   │\n",
      "│ 2   ┆ 9   │\n",
      "└─────┴─────┘\n"
     ]
    }
   ],
   "source": [
    "df1 = pl.DataFrame(\n",
    "    {\n",
    "        \"a\" : [4 ,5, 6], \n",
    "        \"b\" : [7, 8, 9]\n",
    "    }\n",
    ")\n",
    "\n",
    "df2 = pl.DataFrame({\n",
    "    \"a\" : [1,2],\n",
    "    \"b\" : [8, 9]\n",
    "})\n",
    "print(df1); print(df2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (5, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>a</th><th>b</th></tr><tr><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>4</td><td>7</td></tr><tr><td>5</td><td>8</td></tr><tr><td>6</td><td>9</td></tr><tr><td>1</td><td>8</td></tr><tr><td>2</td><td>9</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (5, 2)\n",
       "┌─────┬─────┐\n",
       "│ a   ┆ b   │\n",
       "│ --- ┆ --- │\n",
       "│ i64 ┆ i64 │\n",
       "╞═════╪═════╡\n",
       "│ 4   ┆ 7   │\n",
       "│ 5   ┆ 8   │\n",
       "│ 6   ┆ 9   │\n",
       "│ 1   ┆ 8   │\n",
       "│ 2   ┆ 9   │\n",
       "└─────┴─────┘"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Ghép theo dòng\n",
    "pl.concat([df1, df2], how = \"vertical\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Ghép theo cột"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dữ liệu mới\n",
    "df3 = pl.DataFrame({\n",
    "    \"c\" : ['x', 'y', 'z']})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (3, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>a</th><th>b</th><th>c</th></tr><tr><td>i64</td><td>i64</td><td>str</td></tr></thead><tbody><tr><td>4</td><td>7</td><td>&quot;x&quot;</td></tr><tr><td>5</td><td>8</td><td>&quot;y&quot;</td></tr><tr><td>6</td><td>9</td><td>&quot;z&quot;</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (3, 3)\n",
       "┌─────┬─────┬─────┐\n",
       "│ a   ┆ b   ┆ c   │\n",
       "│ --- ┆ --- ┆ --- │\n",
       "│ i64 ┆ i64 ┆ str │\n",
       "╞═════╪═════╪═════╡\n",
       "│ 4   ┆ 7   ┆ x   │\n",
       "│ 5   ┆ 8   ┆ y   │\n",
       "│ 6   ┆ 9   ┆ z   │\n",
       "└─────┴─────┴─────┘"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pl.concat([df1, df3], how = \"horizontal\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Điều kiện `when`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Polars cho phép sử dụng cú pháp `when ... then` linh động như sau\n",
    "\n",
    "```python\n",
    "pl.when(`condition 1`).then(`kết quả 1`)\n",
    "pl.when(`condition 2`).then(`kết quả 2`)\n",
    "...\n",
    "otherwise(`kết quả n`)\n",
    ".alias(`name variable`)\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ví dụ với mtcars"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (32, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>mpg</th><th>cyl</th><th>mpg_category</th></tr><tr><td>f64</td><td>i64</td><td>cat</td></tr></thead><tbody><tr><td>21.0</td><td>6</td><td>&quot;&gt;20&quot;</td></tr><tr><td>21.0</td><td>6</td><td>&quot;&gt;20&quot;</td></tr><tr><td>22.8</td><td>4</td><td>&quot;&gt;20&quot;</td></tr><tr><td>21.4</td><td>6</td><td>&quot;&gt;20&quot;</td></tr><tr><td>18.7</td><td>8</td><td>&quot;&lt;20&quot;</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>30.4</td><td>4</td><td>&quot;&gt;20&quot;</td></tr><tr><td>15.8</td><td>8</td><td>&quot;&lt;20&quot;</td></tr><tr><td>19.7</td><td>6</td><td>&quot;&lt;20&quot;</td></tr><tr><td>15.0</td><td>8</td><td>&quot;&lt;20&quot;</td></tr><tr><td>21.4</td><td>4</td><td>&quot;&gt;20&quot;</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (32, 3)\n",
       "┌──────┬─────┬──────────────┐\n",
       "│ mpg  ┆ cyl ┆ mpg_category │\n",
       "│ ---  ┆ --- ┆ ---          │\n",
       "│ f64  ┆ i64 ┆ cat          │\n",
       "╞══════╪═════╪══════════════╡\n",
       "│ 21.0 ┆ 6   ┆ >20          │\n",
       "│ 21.0 ┆ 6   ┆ >20          │\n",
       "│ 22.8 ┆ 4   ┆ >20          │\n",
       "│ 21.4 ┆ 6   ┆ >20          │\n",
       "│ 18.7 ┆ 8   ┆ <20          │\n",
       "│ …    ┆ …   ┆ …            │\n",
       "│ 30.4 ┆ 4   ┆ >20          │\n",
       "│ 15.8 ┆ 8   ┆ <20          │\n",
       "│ 19.7 ┆ 6   ┆ <20          │\n",
       "│ 15.0 ┆ 8   ┆ <20          │\n",
       "│ 21.4 ┆ 4   ┆ >20          │\n",
       "└──────┴─────┴──────────────┘"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(\n",
    "    mtcars_pl.select(pl.col(\"mpg\", \"cyl\"))\n",
    "    .with_columns(\n",
    "        pl.when(pl.col(\"mpg\") > 20).then(pl.lit(\">20\"))\n",
    "        .otherwise(pl.lit(\"<20\"))\n",
    "        .cast(pl.Categorical)\n",
    "        .alias(\"mpg_category\")\n",
    "    )\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Tổng hợp dữ liệu"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### groupby & aggregate"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`polars` cho phép sử dụng nhiều cách linh hoạt để tổng hợp dữ liệu nhanh chóng với `agg` method kết hợp với `groupby` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (9, 13)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>statistic</th><th>name</th><th>mpg</th><th>cyl</th><th>disp</th><th>hp</th><th>drat</th><th>wt</th><th>qsec</th><th>vs</th><th>am</th><th>gear</th><th>carb</th></tr><tr><td>str</td><td>str</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>&quot;count&quot;</td><td>&quot;32&quot;</td><td>32.0</td><td>32.0</td><td>32.0</td><td>32.0</td><td>32.0</td><td>32.0</td><td>32.0</td><td>32.0</td><td>32.0</td><td>32.0</td><td>32.0</td></tr><tr><td>&quot;null_count&quot;</td><td>&quot;0&quot;</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td></tr><tr><td>&quot;mean&quot;</td><td>null</td><td>20.090625</td><td>6.1875</td><td>230.721875</td><td>146.6875</td><td>3.5965625</td><td>3.21725</td><td>17.84875</td><td>0.4375</td><td>0.40625</td><td>3.6875</td><td>2.8125</td></tr><tr><td>&quot;std&quot;</td><td>null</td><td>6.026948</td><td>1.785922</td><td>123.938694</td><td>68.562868</td><td>0.534679</td><td>0.978457</td><td>1.786943</td><td>0.504016</td><td>0.498991</td><td>0.737804</td><td>1.6152</td></tr><tr><td>&quot;min&quot;</td><td>&quot;AMC Javelin&quot;</td><td>10.4</td><td>4.0</td><td>71.1</td><td>52.0</td><td>2.76</td><td>1.513</td><td>14.5</td><td>0.0</td><td>0.0</td><td>3.0</td><td>1.0</td></tr><tr><td>&quot;25%&quot;</td><td>null</td><td>15.5</td><td>4.0</td><td>121.0</td><td>97.0</td><td>3.08</td><td>2.62</td><td>16.9</td><td>0.0</td><td>0.0</td><td>3.0</td><td>2.0</td></tr><tr><td>&quot;50%&quot;</td><td>null</td><td>19.2</td><td>6.0</td><td>225.0</td><td>123.0</td><td>3.7</td><td>3.435</td><td>17.82</td><td>0.0</td><td>0.0</td><td>4.0</td><td>2.0</td></tr><tr><td>&quot;75%&quot;</td><td>null</td><td>22.8</td><td>8.0</td><td>318.0</td><td>180.0</td><td>3.92</td><td>3.57</td><td>18.9</td><td>1.0</td><td>1.0</td><td>4.0</td><td>4.0</td></tr><tr><td>&quot;max&quot;</td><td>&quot;Volvo 142E&quot;</td><td>33.9</td><td>8.0</td><td>472.0</td><td>335.0</td><td>4.93</td><td>5.424</td><td>22.9</td><td>1.0</td><td>1.0</td><td>5.0</td><td>8.0</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (9, 13)\n",
       "┌────────────┬─────────────┬───────────┬──────────┬───┬──────────┬──────────┬──────────┬────────┐\n",
       "│ statistic  ┆ name        ┆ mpg       ┆ cyl      ┆ … ┆ vs       ┆ am       ┆ gear     ┆ carb   │\n",
       "│ ---        ┆ ---         ┆ ---       ┆ ---      ┆   ┆ ---      ┆ ---      ┆ ---      ┆ ---    │\n",
       "│ str        ┆ str         ┆ f64       ┆ f64      ┆   ┆ f64      ┆ f64      ┆ f64      ┆ f64    │\n",
       "╞════════════╪═════════════╪═══════════╪══════════╪═══╪══════════╪══════════╪══════════╪════════╡\n",
       "│ count      ┆ 32          ┆ 32.0      ┆ 32.0     ┆ … ┆ 32.0     ┆ 32.0     ┆ 32.0     ┆ 32.0   │\n",
       "│ null_count ┆ 0           ┆ 0.0       ┆ 0.0      ┆ … ┆ 0.0      ┆ 0.0      ┆ 0.0      ┆ 0.0    │\n",
       "│ mean       ┆ null        ┆ 20.090625 ┆ 6.1875   ┆ … ┆ 0.4375   ┆ 0.40625  ┆ 3.6875   ┆ 2.8125 │\n",
       "│ std        ┆ null        ┆ 6.026948  ┆ 1.785922 ┆ … ┆ 0.504016 ┆ 0.498991 ┆ 0.737804 ┆ 1.6152 │\n",
       "│ min        ┆ AMC Javelin ┆ 10.4      ┆ 4.0      ┆ … ┆ 0.0      ┆ 0.0      ┆ 3.0      ┆ 1.0    │\n",
       "│ 25%        ┆ null        ┆ 15.5      ┆ 4.0      ┆ … ┆ 0.0      ┆ 0.0      ┆ 3.0      ┆ 2.0    │\n",
       "│ 50%        ┆ null        ┆ 19.2      ┆ 6.0      ┆ … ┆ 0.0      ┆ 0.0      ┆ 4.0      ┆ 2.0    │\n",
       "│ 75%        ┆ null        ┆ 22.8      ┆ 8.0      ┆ … ┆ 1.0      ┆ 1.0      ┆ 4.0      ┆ 4.0    │\n",
       "│ max        ┆ Volvo 142E  ┆ 33.9      ┆ 8.0      ┆ … ┆ 1.0      ┆ 1.0      ┆ 5.0      ┆ 8.0    │\n",
       "└────────────┴─────────────┴───────────┴──────────┴───┴──────────┴──────────┴──────────┴────────┘"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Summary toàn bộ data.frame\n",
    "mtcars_pl.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "Khác với pandas cho phép rất linh hoạt, cách thức `polars`, tổng hợp dữ liệu rất nhất quán và đơn giản. Có 2 điểm khác biệt chính như sau:\n",
    "\n",
    "- `polars` sử dụng `alias` để tạo biến mới\n",
    "- Các hàm tính toán tổng hợp thông thường như `min`, `max`, `count`, `sum`, `mean`, `quantile`,... đều có thể sử dụng trực tiếp methods trong `polars`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Hoang Duc Anh\\AppData\\Local\\Temp\\ipykernel_16084\\312397274.py:3: DeprecationWarning: `groupby` is deprecated. It has been renamed to `group_by`.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (4, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>am</th><th>vs</th><th>mean_mpg</th><th>sum_wt</th></tr><tr><td>i64</td><td>i64</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>1</td><td>1</td><td>28.371429</td><td>14.198</td></tr><tr><td>0</td><td>0</td><td>15.05</td><td>49.249</td></tr><tr><td>0</td><td>1</td><td>20.742857</td><td>22.36</td></tr><tr><td>1</td><td>0</td><td>19.75</td><td>17.145</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (4, 4)\n",
       "┌─────┬─────┬───────────┬────────┐\n",
       "│ am  ┆ vs  ┆ mean_mpg  ┆ sum_wt │\n",
       "│ --- ┆ --- ┆ ---       ┆ ---    │\n",
       "│ i64 ┆ i64 ┆ f64       ┆ f64    │\n",
       "╞═════╪═════╪═══════════╪════════╡\n",
       "│ 1   ┆ 1   ┆ 28.371429 ┆ 14.198 │\n",
       "│ 0   ┆ 0   ┆ 15.05     ┆ 49.249 │\n",
       "│ 0   ┆ 1   ┆ 20.742857 ┆ 22.36  │\n",
       "│ 1   ┆ 0   ┆ 19.75     ┆ 17.145 │\n",
       "└─────┴─────┴───────────┴────────┘"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Summary theo nhóm với biến mpg\n",
    "mtcars_pl.\\\n",
    "    groupby(['am', 'vs']).\\\n",
    "    agg(\n",
    "        pl.col(\"mpg\").mean().alias(\"mean_mpg\"),\n",
    "        pl.col(\"wt\").sum().alias(\"sum_wt\")\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Bên cạnh đó, `polars` còn cho phép tổng hợp rất linh hoạt theo điều kiện. Quay trở lại ví dụ trên, ta có thể đặt ra yêu cầu như sau:\n",
    "\n",
    "- Nhóm biến theo `am` và `vs`\n",
    "- Tính tổng `mpg` với `cyl = 4`\n",
    "- Tính giá trị trung bình `mpg` với `cyl = 6`\n",
    "\n",
    "Ta có thể thực hiện như sau"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (4, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>am</th><th>vs</th><th>sum_mpg</th><th>mean_wt</th></tr><tr><td>i64</td><td>i64</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>1</td><td>0</td><td>26.0</td><td>2.755</td></tr><tr><td>0</td><td>1</td><td>68.7</td><td>3.38875</td></tr><tr><td>0</td><td>0</td><td>0.0</td><td>null</td></tr><tr><td>1</td><td>1</td><td>198.6</td><td>null</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (4, 4)\n",
       "┌─────┬─────┬─────────┬─────────┐\n",
       "│ am  ┆ vs  ┆ sum_mpg ┆ mean_wt │\n",
       "│ --- ┆ --- ┆ ---     ┆ ---     │\n",
       "│ i64 ┆ i64 ┆ f64     ┆ f64     │\n",
       "╞═════╪═════╪═════════╪═════════╡\n",
       "│ 1   ┆ 0   ┆ 26.0    ┆ 2.755   │\n",
       "│ 0   ┆ 1   ┆ 68.7    ┆ 3.38875 │\n",
       "│ 0   ┆ 0   ┆ 0.0     ┆ null    │\n",
       "│ 1   ┆ 1   ┆ 198.6   ┆ null    │\n",
       "└─────┴─────┴─────────┴─────────┘"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mtcars_pl.\\\n",
    "    group_by(['am', 'vs']).\\\n",
    "    agg(\n",
    "        pl.col(\"mpg\").filter(pl.col(\"cyl\") == 4).sum().alias(\"sum_mpg\"),\n",
    "        pl.col(\"wt\").filter(pl.col(\"cyl\") == 6).mean().alias(\"mean_wt\")\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Các hàm nâng cao"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Select theo loại biến"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`polars` cho phép select cùng lúc các biến cùng thuộc một kiểu dữ liệu. Xem ví dụ dưới đây:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Int64, String, Int64, Float64]"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pl.DataFrame({\n",
    "    'x': [1, 2, 3],\n",
    "    'y' : ['a', 'b', 'c'],\n",
    "    'z' : [4, 5, 6],\n",
    "    't' : [0.5, 6.2, 7.8]\n",
    "})\n",
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (3, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>x</th><th>z</th><th>t</th></tr><tr><td>i64</td><td>i64</td><td>f64</td></tr></thead><tbody><tr><td>1</td><td>4</td><td>0.5</td></tr><tr><td>2</td><td>5</td><td>6.2</td></tr><tr><td>3</td><td>6</td><td>7.8</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (3, 3)\n",
       "┌─────┬─────┬─────┐\n",
       "│ x   ┆ z   ┆ t   │\n",
       "│ --- ┆ --- ┆ --- │\n",
       "│ i64 ┆ i64 ┆ f64 │\n",
       "╞═════╪═════╪═════╡\n",
       "│ 1   ┆ 4   ┆ 0.5 │\n",
       "│ 2   ┆ 5   ┆ 6.2 │\n",
       "│ 3   ┆ 6   ┆ 7.8 │\n",
       "└─────┴─────┴─────┘"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Chọn các biến là biến số dạng integer\n",
    "df.select(pl.col(pl.Int64, pl.Float64))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ta có thể sử dụng `selectors` để có thể sử dụng linh hoạt hơn như sau"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (3, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>x</th><th>z</th><th>t</th></tr><tr><td>i64</td><td>i64</td><td>f64</td></tr></thead><tbody><tr><td>1</td><td>4</td><td>0.5</td></tr><tr><td>2</td><td>5</td><td>6.2</td></tr><tr><td>3</td><td>6</td><td>7.8</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (3, 3)\n",
       "┌─────┬─────┬─────┐\n",
       "│ x   ┆ z   ┆ t   │\n",
       "│ --- ┆ --- ┆ --- │\n",
       "│ i64 ┆ i64 ┆ f64 │\n",
       "╞═════╪═════╪═════╡\n",
       "│ 1   ┆ 4   ┆ 0.5 │\n",
       "│ 2   ┆ 5   ┆ 6.2 │\n",
       "│ 3   ┆ 6   ┆ 7.8 │\n",
       "└─────┴─────┴─────┘"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import polars.selectors as cs\n",
    "# Chọn tất cả biến số\n",
    "df.select(cs.numeric())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Xoay chiều dữ liệu"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Tương tự pandas, `polars` cho phép xoay chiều dữ liệu từ ngang sang dọc và dọc sang ngang với 2 hàm:\n",
    "\n",
    "-  `melt`\n",
    "- `long_to_wide`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_df = pl.DataFrame({\n",
    "    'id' : [1,2,3],\n",
    "    'var1' : [3,4,5],\n",
    "    'var2' : ['a', 'a', 'b'],\n",
    "    'var3' : ['x', 'y', 'z']\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (3, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>id</th><th>var1</th><th>var2</th><th>var3</th></tr><tr><td>i64</td><td>i64</td><td>str</td><td>str</td></tr></thead><tbody><tr><td>1</td><td>3</td><td>&quot;a&quot;</td><td>&quot;x&quot;</td></tr><tr><td>2</td><td>4</td><td>&quot;a&quot;</td><td>&quot;y&quot;</td></tr><tr><td>3</td><td>5</td><td>&quot;b&quot;</td><td>&quot;z&quot;</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (3, 4)\n",
       "┌─────┬──────┬──────┬──────┐\n",
       "│ id  ┆ var1 ┆ var2 ┆ var3 │\n",
       "│ --- ┆ ---  ┆ ---  ┆ ---  │\n",
       "│ i64 ┆ i64  ┆ str  ┆ str  │\n",
       "╞═════╪══════╪══════╪══════╡\n",
       "│ 1   ┆ 3    ┆ a    ┆ x    │\n",
       "│ 2   ┆ 4    ┆ a    ┆ y    │\n",
       "│ 3   ┆ 5    ┆ b    ┆ z    │\n",
       "└─────┴──────┴──────┴──────┘"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (9, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>id</th><th>variable</th><th>value</th></tr><tr><td>i64</td><td>str</td><td>str</td></tr></thead><tbody><tr><td>1</td><td>&quot;var1&quot;</td><td>&quot;3&quot;</td></tr><tr><td>2</td><td>&quot;var1&quot;</td><td>&quot;4&quot;</td></tr><tr><td>3</td><td>&quot;var1&quot;</td><td>&quot;5&quot;</td></tr><tr><td>1</td><td>&quot;var2&quot;</td><td>&quot;a&quot;</td></tr><tr><td>2</td><td>&quot;var2&quot;</td><td>&quot;a&quot;</td></tr><tr><td>3</td><td>&quot;var2&quot;</td><td>&quot;b&quot;</td></tr><tr><td>1</td><td>&quot;var3&quot;</td><td>&quot;x&quot;</td></tr><tr><td>2</td><td>&quot;var3&quot;</td><td>&quot;y&quot;</td></tr><tr><td>3</td><td>&quot;var3&quot;</td><td>&quot;z&quot;</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (9, 3)\n",
       "┌─────┬──────────┬───────┐\n",
       "│ id  ┆ variable ┆ value │\n",
       "│ --- ┆ ---      ┆ ---   │\n",
       "│ i64 ┆ str      ┆ str   │\n",
       "╞═════╪══════════╪═══════╡\n",
       "│ 1   ┆ var1     ┆ 3     │\n",
       "│ 2   ┆ var1     ┆ 4     │\n",
       "│ 3   ┆ var1     ┆ 5     │\n",
       "│ 1   ┆ var2     ┆ a     │\n",
       "│ 2   ┆ var2     ┆ a     │\n",
       "│ 3   ┆ var2     ┆ b     │\n",
       "│ 1   ┆ var3     ┆ x     │\n",
       "│ 2   ┆ var3     ┆ y     │\n",
       "│ 3   ┆ var3     ┆ z     │\n",
       "└─────┴──────────┴───────┘"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_df.melt(id_vars = \"id\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (6, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>id</th><th>var1</th><th>variable</th><th>value</th></tr><tr><td>i64</td><td>i64</td><td>str</td><td>str</td></tr></thead><tbody><tr><td>1</td><td>3</td><td>&quot;var2&quot;</td><td>&quot;a&quot;</td></tr><tr><td>2</td><td>4</td><td>&quot;var2&quot;</td><td>&quot;a&quot;</td></tr><tr><td>3</td><td>5</td><td>&quot;var2&quot;</td><td>&quot;b&quot;</td></tr><tr><td>1</td><td>3</td><td>&quot;var3&quot;</td><td>&quot;x&quot;</td></tr><tr><td>2</td><td>4</td><td>&quot;var3&quot;</td><td>&quot;y&quot;</td></tr><tr><td>3</td><td>5</td><td>&quot;var3&quot;</td><td>&quot;z&quot;</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (6, 4)\n",
       "┌─────┬──────┬──────────┬───────┐\n",
       "│ id  ┆ var1 ┆ variable ┆ value │\n",
       "│ --- ┆ ---  ┆ ---      ┆ ---   │\n",
       "│ i64 ┆ i64  ┆ str      ┆ str   │\n",
       "╞═════╪══════╪══════════╪═══════╡\n",
       "│ 1   ┆ 3    ┆ var2     ┆ a     │\n",
       "│ 2   ┆ 4    ┆ var2     ┆ a     │\n",
       "│ 3   ┆ 5    ┆ var2     ┆ b     │\n",
       "│ 1   ┆ 3    ┆ var3     ┆ x     │\n",
       "│ 2   ┆ 4    ┆ var3     ┆ y     │\n",
       "│ 3   ┆ 5    ┆ var3     ┆ z     │\n",
       "└─────┴──────┴──────────┴───────┘"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# melt nhiều biến\n",
    "my_df.melt(['id', 'var1'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "Xoay chiều từ dọc sang ngang"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (9, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>id</th><th>variable</th><th>value</th></tr><tr><td>i64</td><td>str</td><td>str</td></tr></thead><tbody><tr><td>1</td><td>&quot;var1&quot;</td><td>&quot;3&quot;</td></tr><tr><td>2</td><td>&quot;var1&quot;</td><td>&quot;4&quot;</td></tr><tr><td>3</td><td>&quot;var1&quot;</td><td>&quot;5&quot;</td></tr><tr><td>1</td><td>&quot;var2&quot;</td><td>&quot;a&quot;</td></tr><tr><td>2</td><td>&quot;var2&quot;</td><td>&quot;a&quot;</td></tr><tr><td>3</td><td>&quot;var2&quot;</td><td>&quot;b&quot;</td></tr><tr><td>1</td><td>&quot;var3&quot;</td><td>&quot;x&quot;</td></tr><tr><td>2</td><td>&quot;var3&quot;</td><td>&quot;y&quot;</td></tr><tr><td>3</td><td>&quot;var3&quot;</td><td>&quot;z&quot;</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (9, 3)\n",
       "┌─────┬──────────┬───────┐\n",
       "│ id  ┆ variable ┆ value │\n",
       "│ --- ┆ ---      ┆ ---   │\n",
       "│ i64 ┆ str      ┆ str   │\n",
       "╞═════╪══════════╪═══════╡\n",
       "│ 1   ┆ var1     ┆ 3     │\n",
       "│ 2   ┆ var1     ┆ 4     │\n",
       "│ 3   ┆ var1     ┆ 5     │\n",
       "│ 1   ┆ var2     ┆ a     │\n",
       "│ 2   ┆ var2     ┆ a     │\n",
       "│ 3   ┆ var2     ┆ b     │\n",
       "│ 1   ┆ var3     ┆ x     │\n",
       "│ 2   ┆ var3     ┆ y     │\n",
       "│ 3   ┆ var3     ┆ z     │\n",
       "└─────┴──────────┴───────┘"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2 = my_df.melt('id')\n",
    "df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (3, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>id</th><th>var1</th><th>var2</th><th>var3</th></tr><tr><td>i64</td><td>str</td><td>str</td><td>str</td></tr></thead><tbody><tr><td>1</td><td>&quot;3&quot;</td><td>&quot;a&quot;</td><td>&quot;x&quot;</td></tr><tr><td>2</td><td>&quot;4&quot;</td><td>&quot;a&quot;</td><td>&quot;y&quot;</td></tr><tr><td>3</td><td>&quot;5&quot;</td><td>&quot;b&quot;</td><td>&quot;z&quot;</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (3, 4)\n",
       "┌─────┬──────┬──────┬──────┐\n",
       "│ id  ┆ var1 ┆ var2 ┆ var3 │\n",
       "│ --- ┆ ---  ┆ ---  ┆ ---  │\n",
       "│ i64 ┆ str  ┆ str  ┆ str  │\n",
       "╞═════╪══════╪══════╪══════╡\n",
       "│ 1   ┆ 3    ┆ a    ┆ x    │\n",
       "│ 2   ┆ 4    ┆ a    ┆ y    │\n",
       "│ 3   ┆ 5    ┆ b    ┆ z    │\n",
       "└─────┴──────┴──────┴──────┘"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.pivot(index = 'id', columns = 'variable', \n",
    "                values = 'value', aggregate_function = 'first')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Ghép nhiều cột với nhau"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (2, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>value</th><th>score</th></tr><tr><td>str</td><td>str</td><td>i64</td></tr></thead><tbody><tr><td>&quot;a&quot;</td><td>&quot;x&quot;</td><td>1</td></tr><tr><td>&quot;b&quot;</td><td>&quot;y&quot;</td><td>2</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (2, 3)\n",
       "┌──────┬───────┬───────┐\n",
       "│ name ┆ value ┆ score │\n",
       "│ ---  ┆ ---   ┆ ---   │\n",
       "│ str  ┆ str   ┆ i64   │\n",
       "╞══════╪═══════╪═══════╡\n",
       "│ a    ┆ x     ┆ 1     │\n",
       "│ b    ┆ y     ┆ 2     │\n",
       "└──────┴───────┴───────┘"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pl.DataFrame({\n",
    "    'name': ['a', 'b'],\n",
    "    'value': ['x', 'y'],\n",
    "    'score': [1, 2]\n",
    "})\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (2, 5)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>value</th><th>score</th><th>concat_2</th><th>concat_3</th></tr><tr><td>str</td><td>str</td><td>i64</td><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;a&quot;</td><td>&quot;x&quot;</td><td>1</td><td>&quot;a-x&quot;</td><td>&quot;a-x-1&quot;</td></tr><tr><td>&quot;b&quot;</td><td>&quot;y&quot;</td><td>2</td><td>&quot;b-y&quot;</td><td>&quot;b-y-2&quot;</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (2, 5)\n",
       "┌──────┬───────┬───────┬──────────┬──────────┐\n",
       "│ name ┆ value ┆ score ┆ concat_2 ┆ concat_3 │\n",
       "│ ---  ┆ ---   ┆ ---   ┆ ---      ┆ ---      │\n",
       "│ str  ┆ str   ┆ i64   ┆ str      ┆ str      │\n",
       "╞══════╪═══════╪═══════╪══════════╪══════════╡\n",
       "│ a    ┆ x     ┆ 1     ┆ a-x      ┆ a-x-1    │\n",
       "│ b    ┆ y     ┆ 2     ┆ b-y      ┆ b-y-2    │\n",
       "└──────┴───────┴───────┴──────────┴──────────┘"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.with_columns(\n",
    "    pl.concat_str(\n",
    "        pl.col(\"name\"),\n",
    "        pl.lit(\"-\"),\n",
    "        pl.col(\"value\")\n",
    "    ).alias(\"concat_2\"),\n",
    "    pl.concat_str(\n",
    "        pl.col(\"name\"),\n",
    "        pl.lit(\"-\"),\n",
    "        pl.col(\"value\"),\n",
    "        pl.lit(\"-\"),\n",
    "        pl.col(\"score\")\n",
    "    ).alias(\"concat_3\"),\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tách 1 cột thành nhiều cột"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape: (3, 1)\n",
      "┌───────┐\n",
      "│ x     │\n",
      "│ ---   │\n",
      "│ str   │\n",
      "╞═══════╡\n",
      "│ 1,2,3 │\n",
      "│ 4,5,6 │\n",
      "│ 7,8,9 │\n",
      "└───────┘\n"
     ]
    }
   ],
   "source": [
    "import polars as pl\n",
    "\n",
    "# Create a DataFrame with a string column containing multiple values\n",
    "df = pl.DataFrame({\n",
    "    \"x\": [\"1,2,3\", \"4,5,6\", \"7,8,9\"]\n",
    "})\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape: (3, 2)\n",
      "┌───────┬─────────────────┐\n",
      "│ x     ┆ split_data      │\n",
      "│ ---   ┆ ---             │\n",
      "│ str   ┆ list[str]       │\n",
      "╞═══════╪═════════════════╡\n",
      "│ 1,2,3 ┆ [\"1\", \"2\", \"3\"] │\n",
      "│ 4,5,6 ┆ [\"4\", \"5\", \"6\"] │\n",
      "│ 7,8,9 ┆ [\"7\", \"8\", \"9\"] │\n",
      "└───────┴─────────────────┘\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Split the 'data' column into multiple columns\n",
    "df_split = df.with_columns(\n",
    "    df[\"x\"].str.split(\",\").alias(\"split_data\")\n",
    ")\n",
    "print(df_split)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (3, 5)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>x</th><th>split_data</th><th>value_1</th><th>value_2</th><th>value_3</th></tr><tr><td>str</td><td>list[str]</td><td>f64</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>&quot;1,2,3&quot;</td><td>[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]</td><td>1.0</td><td>2.0</td><td>3.0</td></tr><tr><td>&quot;4,5,6&quot;</td><td>[&quot;4&quot;, &quot;5&quot;, &quot;6&quot;]</td><td>4.0</td><td>5.0</td><td>6.0</td></tr><tr><td>&quot;7,8,9&quot;</td><td>[&quot;7&quot;, &quot;8&quot;, &quot;9&quot;]</td><td>7.0</td><td>8.0</td><td>9.0</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (3, 5)\n",
       "┌───────┬─────────────────┬─────────┬─────────┬─────────┐\n",
       "│ x     ┆ split_data      ┆ value_1 ┆ value_2 ┆ value_3 │\n",
       "│ ---   ┆ ---             ┆ ---     ┆ ---     ┆ ---     │\n",
       "│ str   ┆ list[str]       ┆ f64     ┆ f64     ┆ f64     │\n",
       "╞═══════╪═════════════════╪═════════╪═════════╪═════════╡\n",
       "│ 1,2,3 ┆ [\"1\", \"2\", \"3\"] ┆ 1.0     ┆ 2.0     ┆ 3.0     │\n",
       "│ 4,5,6 ┆ [\"4\", \"5\", \"6\"] ┆ 4.0     ┆ 5.0     ┆ 6.0     │\n",
       "│ 7,8,9 ┆ [\"7\", \"8\", \"9\"] ┆ 7.0     ┆ 8.0     ┆ 9.0     │\n",
       "└───────┴─────────────────┴─────────┴─────────┴─────────┘"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Cột mới tạo sử dụng list method\n",
    "df_split.with_columns(\n",
    "    [\n",
    "        pl.col(\"split_data\").list.get(i).cast(pl.Float64).alias(f\"value_{i+1}\") for i in range(3)\n",
    "    ]\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (3, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>date</th><th>value</th></tr><tr><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>1</td><td>6</td></tr><tr><td>2</td><td>7</td></tr><tr><td>3</td><td>8</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (3, 2)\n",
       "┌──────┬───────┐\n",
       "│ date ┆ value │\n",
       "│ ---  ┆ ---   │\n",
       "│ i64  ┆ i64   │\n",
       "╞══════╪═══════╡\n",
       "│ 1    ┆ 6     │\n",
       "│ 2    ┆ 7     │\n",
       "│ 3    ┆ 8     │\n",
       "└──────┴───────┘"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pl.DataFrame({\n",
    "    'date' : [1,2,3],\n",
    "    'value' : [6,7,8]\n",
    "})\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Biến lead, lag với `shift`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ta có thể tạo các nhóm dữ liệu tịnh tiến n quan sát bằng hàm `shift`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (5, 5)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>date</th><th>group</th><th>value</th><th>lag_1</th><th>lead_1</th></tr><tr><td>i64</td><td>str</td><td>i64</td><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>1</td><td>&quot;a&quot;</td><td>5</td><td>null</td><td>6</td></tr><tr><td>2</td><td>&quot;a&quot;</td><td>6</td><td>5</td><td>7</td></tr><tr><td>3</td><td>&quot;a&quot;</td><td>7</td><td>6</td><td>8</td></tr><tr><td>4</td><td>&quot;b&quot;</td><td>8</td><td>7</td><td>9</td></tr><tr><td>5</td><td>&quot;c&quot;</td><td>9</td><td>8</td><td>null</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (5, 5)\n",
       "┌──────┬───────┬───────┬───────┬────────┐\n",
       "│ date ┆ group ┆ value ┆ lag_1 ┆ lead_1 │\n",
       "│ ---  ┆ ---   ┆ ---   ┆ ---   ┆ ---    │\n",
       "│ i64  ┆ str   ┆ i64   ┆ i64   ┆ i64    │\n",
       "╞══════╪═══════╪═══════╪═══════╪════════╡\n",
       "│ 1    ┆ a     ┆ 5     ┆ null  ┆ 6      │\n",
       "│ 2    ┆ a     ┆ 6     ┆ 5     ┆ 7      │\n",
       "│ 3    ┆ a     ┆ 7     ┆ 6     ┆ 8      │\n",
       "│ 4    ┆ b     ┆ 8     ┆ 7     ┆ 9      │\n",
       "│ 5    ┆ c     ┆ 9     ┆ 8     ┆ null   │\n",
       "└──────┴───────┴───────┴───────┴────────┘"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pl.DataFrame({\n",
    "    'date': [1,2, 3, 4, 5],\n",
    "    'group': ['a', 'a', 'a', 'b', 'c'],\n",
    "    'value': [5, 6, 7, 8, 9]\n",
    "})\n",
    "# Tạo biến lead & lag\n",
    "df.with_columns(\n",
    "    lag_1 = pl.col(\"value\").shift(1),\n",
    "    lead_1 = pl.col(\"value\").shift(-1)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (5, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>date</th><th>group</th><th>value</th><th>lead</th></tr><tr><td>i64</td><td>str</td><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>1</td><td>&quot;a&quot;</td><td>5</td><td>null</td></tr><tr><td>2</td><td>&quot;a&quot;</td><td>6</td><td>5</td></tr><tr><td>3</td><td>&quot;a&quot;</td><td>7</td><td>6</td></tr><tr><td>4</td><td>&quot;b&quot;</td><td>8</td><td>null</td></tr><tr><td>5</td><td>&quot;c&quot;</td><td>9</td><td>null</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (5, 4)\n",
       "┌──────┬───────┬───────┬──────┐\n",
       "│ date ┆ group ┆ value ┆ lead │\n",
       "│ ---  ┆ ---   ┆ ---   ┆ ---  │\n",
       "│ i64  ┆ str   ┆ i64   ┆ i64  │\n",
       "╞══════╪═══════╪═══════╪══════╡\n",
       "│ 1    ┆ a     ┆ 5     ┆ null │\n",
       "│ 2    ┆ a     ┆ 6     ┆ 5    │\n",
       "│ 3    ┆ a     ┆ 7     ┆ 6    │\n",
       "│ 4    ┆ b     ┆ 8     ┆ null │\n",
       "│ 5    ┆ c     ┆ 9     ┆ null │\n",
       "└──────┴───────┴───────┴──────┘"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Tạo lag theo group\n",
    "(\n",
    "    df.with_columns(\n",
    "            pl.col(\"value\").\n",
    "                shift(1).\n",
    "                over(pl.col(\"group\")).\n",
    "                alias(\"lead\")\n",
    "        )\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Rank"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Các biến cũng có thể được `rank` đơn giản với method rank như sau"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_df = pl.DataFrame({\n",
    "    'id' : [1,2,3, 3],\n",
    "    'var1' : [5,4,2, 6],\n",
    "    'var2' : ['a', 'a', 'b', 'c'],\n",
    "    'var3' : ['x', 'y', 'z', 'y']\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (4, 6)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>id</th><th>var1</th><th>var2</th><th>var3</th><th>ordinal_rank</th><th>min_rank</th></tr><tr><td>i64</td><td>i64</td><td>str</td><td>str</td><td>u32</td><td>u32</td></tr></thead><tbody><tr><td>1</td><td>5</td><td>&quot;a&quot;</td><td>&quot;x&quot;</td><td>3</td><td>3</td></tr><tr><td>2</td><td>4</td><td>&quot;a&quot;</td><td>&quot;y&quot;</td><td>2</td><td>2</td></tr><tr><td>3</td><td>2</td><td>&quot;b&quot;</td><td>&quot;z&quot;</td><td>1</td><td>1</td></tr><tr><td>3</td><td>6</td><td>&quot;c&quot;</td><td>&quot;y&quot;</td><td>4</td><td>4</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (4, 6)\n",
       "┌─────┬──────┬──────┬──────┬──────────────┬──────────┐\n",
       "│ id  ┆ var1 ┆ var2 ┆ var3 ┆ ordinal_rank ┆ min_rank │\n",
       "│ --- ┆ ---  ┆ ---  ┆ ---  ┆ ---          ┆ ---      │\n",
       "│ i64 ┆ i64  ┆ str  ┆ str  ┆ u32          ┆ u32      │\n",
       "╞═════╪══════╪══════╪══════╪══════════════╪══════════╡\n",
       "│ 1   ┆ 5    ┆ a    ┆ x    ┆ 3            ┆ 3        │\n",
       "│ 2   ┆ 4    ┆ a    ┆ y    ┆ 2            ┆ 2        │\n",
       "│ 3   ┆ 2    ┆ b    ┆ z    ┆ 1            ┆ 1        │\n",
       "│ 3   ┆ 6    ┆ c    ┆ y    ┆ 4            ┆ 4        │\n",
       "└─────┴──────┴──────┴──────┴──────────────┴──────────┘"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_df.\\\n",
    "    with_columns(\n",
    "        pl.col(\"var1\").rank(\"ordinal\").alias(\"ordinal_rank\"),\n",
    "        pl.col(\"var1\").rank(\"min\").alias(\"min_rank\")\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Lazy evaluation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`Polars` cho phép sử dụng lazy evaluation để tính toán và tổng hợp dữ liệu. Khác với các câu lệnh thông thường chỉ tính toán theo từng câu lệnh. `Lazy evaluation` cho phép optimize toàn bộ câu lệnh trước khi thực sự thực hiện. \n",
    "\n",
    "Có 2 cách để sử dụng `lazy evaluation`:\n",
    "\n",
    "- Biến đổi polars dataframe sang lazy\n",
    "- Scan file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Cách 1: Tạo lazy object\n",
    "mtcars_pl2 = mtcars_pl.lazy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "naive plan: (run LazyFrame.explain(optimized=True) to see the optimized plan)\n",
      "\n",
      "AGGREGATE\n",
      "\t[col(\"mpg\").mean().alias(\"mean_mpg\")] BY [col(\"am\")] FROM\n",
      "  FILTER [(col(\"vs\")) == (1)] FROM\n",
      "    DF [\"name\", \"mpg\", \"cyl\", \"disp\"]; PROJECT */12 COLUMNS; SELECTION: None\n"
     ]
    }
   ],
   "source": [
    "# Hiển thị plan\n",
    "q1 = mtcars_pl2.\\\n",
    "    filter(pl.col(\"vs\") == 1).\\\n",
    "    group_by(pl.col(\"am\")).\\\n",
    "    agg(\n",
    "        pl.col(\"mpg\").mean().alias(\"mean_mpg\")\n",
    "    )\n",
    "print(q1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (2, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>am</th><th>mean_mpg</th></tr><tr><td>i64</td><td>f64</td></tr></thead><tbody><tr><td>0</td><td>20.742857</td></tr><tr><td>1</td><td>28.371429</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (2, 2)\n",
       "┌─────┬───────────┐\n",
       "│ am  ┆ mean_mpg  │\n",
       "│ --- ┆ ---       │\n",
       "│ i64 ┆ f64       │\n",
       "╞═════╪═══════════╡\n",
       "│ 0   ┆ 20.742857 │\n",
       "│ 1   ┆ 28.371429 │\n",
       "└─────┴───────────┘"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Thực hiện với collect\n",
    "q1.collect()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "**Cách 2**: Scan file\n",
    "\n",
    "Bên cạnh việc tối ưu hóa, polars và lazy evaluation cho phép sử dụng option `streaming` để tính toán từng phần với dữ liệu lớn"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "pl.scan_parquet(\"file_parquet\")\n",
    "    .filter(pl.col(\"x\") > 30).\n",
    "    .collect(streaming = True)\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Map"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Polars có thể áp dụng các nhóm hàm map như sau"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (3, 1)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>x</th></tr><tr><td>i64</td></tr></thead><tbody><tr><td>1</td></tr><tr><td>2</td></tr><tr><td>3</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (3, 1)\n",
       "┌─────┐\n",
       "│ x   │\n",
       "│ --- │\n",
       "│ i64 │\n",
       "╞═════╡\n",
       "│ 1   │\n",
       "│ 2   │\n",
       "│ 3   │\n",
       "└─────┘"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pl.DataFrame({\n",
    "    'x' : [1, 2, 3]\n",
    "})\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Khởi tạo hàm mới\n",
    "def plus_one(x):\n",
    "    return(x + 1)\n",
    "\n",
    "plus_one(6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Hoang Duc Anh\\AppData\\Local\\Temp\\ipykernel_16084\\3498082010.py:3: PolarsInefficientMapWarning: \n",
      "Expr.map_elements is significantly slower than the native expressions API.\n",
      "Only use if you absolutely CANNOT implement your logic otherwise.\n",
      "Replace this expression...\n",
      "  - pl.col(\"x\").map_elements(plus_one)\n",
      "with this one instead:\n",
      "  + pl.col(\"x\") + 1\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (3, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>x</th><th>x + 1</th></tr><tr><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>1</td><td>2</td></tr><tr><td>2</td><td>3</td></tr><tr><td>3</td><td>4</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (3, 2)\n",
       "┌─────┬───────┐\n",
       "│ x   ┆ x + 1 │\n",
       "│ --- ┆ ---   │\n",
       "│ i64 ┆ i64   │\n",
       "╞═════╪═══════╡\n",
       "│ 1   ┆ 2     │\n",
       "│ 2   ┆ 3     │\n",
       "│ 3   ┆ 4     │\n",
       "└─────┴───────┘"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.with_columns(\n",
    "    pl.col(\"x\")\n",
    "        .map_elements(plus_one, return_dtype = pl.Int64)\n",
    "        .alias(\"x + 1\")\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Đọc & ghi dữ liệu"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "### Import dữ liệu"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "#### Kết nối với database\n",
    "\n",
    "Ta có thể đọc dữ liệu từ SQL Server thông qua odbc"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "```python\n",
    "import pyodbc\n",
    "conn = pyodbc.connect(\n",
    "    r'DRIVER={ODBC Driver 13 for SQL Server};'\n",
    "    r'SERVER=ADMINMI-JTBJEPG;' # Name of server\n",
    "    r'DATABASE=learningsql;'   # Data base\n",
    "    r'UID=user_name;'                 # User\n",
    "    r'PWD=pwd'              # Password\n",
    "    )\n",
    "df = pl.read_database('SELECT * FROM ACCOUNT', conn)\n",
    "df.head\n",
    "```\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "**Ghi dữ liệu vào database**: Khi có một dataframe tên df, ta có thể sử dụng method `write_database` để ghi vào server như sau"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "pyodbc_uri = (\n",
    "    \"mssql+pyodbc://user:pass@server:1433/test?\"\n",
    "    \"driver=ODBC+Driver+17+for+SQL+Server\"\n",
    ")\n",
    "engine = create_engine(pyodbc_uri, fast_executemany=True)  \n",
    "df.write_database(\n",
    "    table_name=\"target_table\",\n",
    "    connection=engine,\n",
    ")  \n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Import từ file"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "df = pl.read_csv(\"file.csv\")\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Kiểm tra các kiểu dữ liệu có thể đọc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pl.read_avro\n",
      "pl.read_clipboard\n",
      "pl.read_csv\n",
      "pl.read_csv_batched\n",
      "pl.read_database\n",
      "pl.read_database_uri\n",
      "pl.read_delta\n",
      "pl.read_excel\n",
      "pl.read_ipc\n",
      "pl.read_ipc_schema\n",
      "pl.read_ipc_stream\n",
      "pl.read_json\n",
      "pl.read_ndjson\n",
      "pl.read_ods\n",
      "pl.read_parquet\n",
      "pl.read_parquet_schema"
     ]
    }
   ],
   "source": [
    "?pl.read_*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Lưu dữ liệu"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_df = pl.DataFrame({\n",
    "    'x' : [1,2,3],\n",
    "    'y' : [3,4,5],\n",
    "    'group' : ['a', 'a', 'b']\n",
    "})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Dữ liệu polars có thể lưu trữ dưới nhiều định dạng khác nhau với nhóm methods `write_*`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "my_df.write_excel('test_excel_pdf.xlsx')\n",
    "my_df.write_parquet('test_pq.parquet')\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/javascript": "(function(root) {\n  function now() {\n    return new Date();\n  }\n\n  var force = true;\n  var py_version = '3.4.1'.replace('rc', '-rc.').replace('.dev', '-dev.');\n  var reloading = false;\n  var Bokeh = root.Bokeh;\n\n  if (typeof (root._bokeh_timeout) === \"undefined\" || force) {\n    root._bokeh_timeout = Date.now() + 5000;\n    root._bokeh_failed_load = false;\n  }\n\n  function run_callbacks() {\n    try {\n      root._bokeh_onload_callbacks.forEach(function(callback) {\n        if (callback != null)\n          callback();\n      });\n    } finally {\n      delete root._bokeh_onload_callbacks;\n    }\n    console.debug(\"Bokeh: all callbacks have finished\");\n  }\n\n  function load_libs(css_urls, js_urls, js_modules, js_exports, callback) {\n    if (css_urls == null) css_urls = [];\n    if (js_urls == null) js_urls = [];\n    if (js_modules == null) js_modules = [];\n    if (js_exports == null) js_exports = {};\n\n    root._bokeh_onload_callbacks.push(callback);\n\n    if (root._bokeh_is_loading > 0) {\n      console.debug(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n      return null;\n    }\n    if (js_urls.length === 0 && js_modules.length === 0 && Object.keys(js_exports).length === 0) {\n      run_callbacks();\n      return null;\n    }\n    if (!reloading) {\n      console.debug(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n    }\n\n    function on_load() {\n      root._bokeh_is_loading--;\n      if (root._bokeh_is_loading === 0) {\n        console.debug(\"Bokeh: all BokehJS libraries/stylesheets loaded\");\n        run_callbacks()\n      }\n    }\n    window._bokeh_on_load = on_load\n\n    function on_error() {\n      console.error(\"failed to load \" + url);\n    }\n\n    var skip = [];\n    if (window.requirejs) {\n      window.requirejs.config({'packages': {}, 'paths': {}, 'shim': {}});\n      root._bokeh_is_loading = css_urls.length + 0;\n    } else {\n      root._bokeh_is_loading = css_urls.length + js_urls.length + js_modules.length + Object.keys(js_exports).length;\n    }\n\n    var existing_stylesheets = []\n    var links = document.getElementsByTagName('link')\n    for (var i = 0; i < links.length; i++) {\n      var link = links[i]\n      if (link.href != null) {\n\texisting_stylesheets.push(link.href)\n      }\n    }\n    for (var i = 0; i < css_urls.length; i++) {\n      var url = css_urls[i];\n      if (existing_stylesheets.indexOf(url) !== -1) {\n\ton_load()\n\tcontinue;\n      }\n      const element = document.createElement(\"link\");\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.rel = \"stylesheet\";\n      element.type = \"text/css\";\n      element.href = url;\n      console.debug(\"Bokeh: injecting link tag for BokehJS stylesheet: \", url);\n      document.body.appendChild(element);\n    }    var existing_scripts = []\n    var scripts = document.getElementsByTagName('script')\n    for (var i = 0; i < scripts.length; i++) {\n      var script = scripts[i]\n      if (script.src != null) {\n\texisting_scripts.push(script.src)\n      }\n    }\n    for (var i = 0; i < js_urls.length; i++) {\n      var url = js_urls[i];\n      if (skip.indexOf(url) !== -1 || existing_scripts.indexOf(url) !== -1) {\n\tif (!window.requirejs) {\n\t  on_load();\n\t}\n\tcontinue;\n      }\n      var element = document.createElement('script');\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.async = false;\n      element.src = url;\n      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n      document.head.appendChild(element);\n    }\n    for (var i = 0; i < js_modules.length; i++) {\n      var url = js_modules[i];\n      if (skip.indexOf(url) !== -1 || existing_scripts.indexOf(url) !== -1) {\n\tif (!window.requirejs) {\n\t  on_load();\n\t}\n\tcontinue;\n      }\n      var element = document.createElement('script');\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.async = false;\n      element.src = url;\n      element.type = \"module\";\n      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n      document.head.appendChild(element);\n    }\n    for (const name in js_exports) {\n      var url = js_exports[name];\n      if (skip.indexOf(url) >= 0 || root[name] != null) {\n\tif (!window.requirejs) {\n\t  on_load();\n\t}\n\tcontinue;\n      }\n      var element = document.createElement('script');\n      element.onerror = on_error;\n      element.async = false;\n      element.type = \"module\";\n      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n      element.textContent = `\n      import ${name} from \"${url}\"\n      window.${name} = ${name}\n      window._bokeh_on_load()\n      `\n      document.head.appendChild(element);\n    }\n    if (!js_urls.length && !js_modules.length) {\n      on_load()\n    }\n  };\n\n  function inject_raw_css(css) {\n    const element = document.createElement(\"style\");\n    element.appendChild(document.createTextNode(css));\n    document.body.appendChild(element);\n  }\n\n  var js_urls = [\"https://cdn.bokeh.org/bokeh/release/bokeh-3.4.1.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-gl-3.4.1.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-3.4.1.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-3.4.1.min.js\", \"https://cdn.holoviz.org/panel/1.4.3/dist/panel.min.js\"];\n  var js_modules = [];\n  var js_exports = {};\n  var css_urls = [];\n  var inline_js = [    function(Bokeh) {\n      Bokeh.set_log_level(\"info\");\n    },\nfunction(Bokeh) {} // ensure no trailing comma for IE\n  ];\n\n  function run_inline_js() {\n    if ((root.Bokeh !== undefined) || (force === true)) {\n      for (var i = 0; i < inline_js.length; i++) {\n\ttry {\n          inline_js[i].call(root, root.Bokeh);\n\t} catch(e) {\n\t  if (!reloading) {\n\t    throw e;\n\t  }\n\t}\n      }\n      // Cache old bokeh versions\n      if (Bokeh != undefined && !reloading) {\n\tvar NewBokeh = root.Bokeh;\n\tif (Bokeh.versions === undefined) {\n\t  Bokeh.versions = new Map();\n\t}\n\tif (NewBokeh.version !== Bokeh.version) {\n\t  Bokeh.versions.set(NewBokeh.version, NewBokeh)\n\t}\n\troot.Bokeh = Bokeh;\n      }} else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(run_inline_js, 100);\n    } else if (!root._bokeh_failed_load) {\n      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n      root._bokeh_failed_load = true;\n    }\n    root._bokeh_is_initializing = false\n  }\n\n  function load_or_wait() {\n    // Implement a backoff loop that tries to ensure we do not load multiple\n    // versions of Bokeh and its dependencies at the same time.\n    // In recent versions we use the root._bokeh_is_initializing flag\n    // to determine whether there is an ongoing attempt to initialize\n    // bokeh, however for backward compatibility we also try to ensure\n    // that we do not start loading a newer (Panel>=1.0 and Bokeh>3) version\n    // before older versions are fully initialized.\n    if (root._bokeh_is_initializing && Date.now() > root._bokeh_timeout) {\n      root._bokeh_is_initializing = false;\n      root._bokeh_onload_callbacks = undefined;\n      console.log(\"Bokeh: BokehJS was loaded multiple times but one version failed to initialize.\");\n      load_or_wait();\n    } else if (root._bokeh_is_initializing || (typeof root._bokeh_is_initializing === \"undefined\" && root._bokeh_onload_callbacks !== undefined)) {\n      setTimeout(load_or_wait, 100);\n    } else {\n      root._bokeh_is_initializing = true\n      root._bokeh_onload_callbacks = []\n      var bokeh_loaded = Bokeh != null && (Bokeh.version === py_version || (Bokeh.versions !== undefined && Bokeh.versions.has(py_version)));\n      if (!reloading && !bokeh_loaded) {\n\troot.Bokeh = undefined;\n      }\n      load_libs(css_urls, js_urls, js_modules, js_exports, function() {\n\tconsole.debug(\"Bokeh: BokehJS plotting callback run at\", now());\n\trun_inline_js();\n      });\n    }\n  }\n  // Give older versions of the autoload script a head-start to ensure\n  // they initialize before we start loading newer version.\n  setTimeout(load_or_wait, 100)\n}(window));",
      "application/vnd.holoviews_load.v0+json": ""
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": "\nif ((window.PyViz === undefined) || (window.PyViz instanceof HTMLElement)) {\n  window.PyViz = {comms: {}, comm_status:{}, kernels:{}, receivers: {}, plot_index: []}\n}\n\n\n    function JupyterCommManager() {\n    }\n\n    JupyterCommManager.prototype.register_target = function(plot_id, comm_id, msg_handler) {\n      if (window.comm_manager || ((window.Jupyter !== undefined) && (Jupyter.notebook.kernel != null))) {\n        var comm_manager = window.comm_manager || Jupyter.notebook.kernel.comm_manager;\n        comm_manager.register_target(comm_id, function(comm) {\n          comm.on_msg(msg_handler);\n        });\n      } else if ((plot_id in window.PyViz.kernels) && (window.PyViz.kernels[plot_id])) {\n        window.PyViz.kernels[plot_id].registerCommTarget(comm_id, function(comm) {\n          comm.onMsg = msg_handler;\n        });\n      } else if (typeof google != 'undefined' && google.colab.kernel != null) {\n        google.colab.kernel.comms.registerTarget(comm_id, (comm) => {\n          var messages = comm.messages[Symbol.asyncIterator]();\n          function processIteratorResult(result) {\n            var message = result.value;\n            console.log(message)\n            var content = {data: message.data, comm_id};\n            var buffers = []\n            for (var buffer of message.buffers || []) {\n              buffers.push(new DataView(buffer))\n            }\n            var metadata = message.metadata || {};\n            var msg = {content, buffers, metadata}\n            msg_handler(msg);\n            return messages.next().then(processIteratorResult);\n          }\n          return messages.next().then(processIteratorResult);\n        })\n      }\n    }\n\n    JupyterCommManager.prototype.get_client_comm = function(plot_id, comm_id, msg_handler) {\n      if (comm_id in window.PyViz.comms) {\n        return window.PyViz.comms[comm_id];\n      } else if (window.comm_manager || ((window.Jupyter !== undefined) && (Jupyter.notebook.kernel != null))) {\n        var comm_manager = window.comm_manager || Jupyter.notebook.kernel.comm_manager;\n        var comm = comm_manager.new_comm(comm_id, {}, {}, {}, comm_id);\n        if (msg_handler) {\n          comm.on_msg(msg_handler);\n        }\n      } else if ((plot_id in window.PyViz.kernels) && (window.PyViz.kernels[plot_id])) {\n        var comm = window.PyViz.kernels[plot_id].connectToComm(comm_id);\n        comm.open();\n        if (msg_handler) {\n          comm.onMsg = msg_handler;\n        }\n      } else if (typeof google != 'undefined' && google.colab.kernel != null) {\n        var comm_promise = google.colab.kernel.comms.open(comm_id)\n        comm_promise.then((comm) => {\n          window.PyViz.comms[comm_id] = comm;\n          if (msg_handler) {\n            var messages = comm.messages[Symbol.asyncIterator]();\n            function processIteratorResult(result) {\n              var message = result.value;\n              var content = {data: message.data};\n              var metadata = message.metadata || {comm_id};\n              var msg = {content, metadata}\n              msg_handler(msg);\n              return messages.next().then(processIteratorResult);\n            }\n            return messages.next().then(processIteratorResult);\n          }\n        }) \n        var sendClosure = (data, metadata, buffers, disposeOnDone) => {\n          return comm_promise.then((comm) => {\n            comm.send(data, metadata, buffers, disposeOnDone);\n          });\n        };\n        var comm = {\n          send: sendClosure\n        };\n      }\n      window.PyViz.comms[comm_id] = comm;\n      return comm;\n    }\n    window.PyViz.comm_manager = new JupyterCommManager();\n    \n\n\nvar JS_MIME_TYPE = 'application/javascript';\nvar HTML_MIME_TYPE = 'text/html';\nvar EXEC_MIME_TYPE = 'application/vnd.holoviews_exec.v0+json';\nvar CLASS_NAME = 'output';\n\n/**\n * Render data to the DOM node\n */\nfunction render(props, node) {\n  var div = document.createElement(\"div\");\n  var script = document.createElement(\"script\");\n  node.appendChild(div);\n  node.appendChild(script);\n}\n\n/**\n * Handle when a new output is added\n */\nfunction handle_add_output(event, handle) {\n  var output_area = handle.output_area;\n  var output = handle.output;\n  if ((output.data == undefined) || (!output.data.hasOwnProperty(EXEC_MIME_TYPE))) {\n    return\n  }\n  var id = output.metadata[EXEC_MIME_TYPE][\"id\"];\n  var toinsert = output_area.element.find(\".\" + CLASS_NAME.split(' ')[0]);\n  if (id !== undefined) {\n    var nchildren = toinsert.length;\n    var html_node = toinsert[nchildren-1].children[0];\n    html_node.innerHTML = output.data[HTML_MIME_TYPE];\n    var scripts = [];\n    var nodelist = html_node.querySelectorAll(\"script\");\n    for (var i in nodelist) {\n      if (nodelist.hasOwnProperty(i)) {\n        scripts.push(nodelist[i])\n      }\n    }\n\n    scripts.forEach( function (oldScript) {\n      var newScript = document.createElement(\"script\");\n      var attrs = [];\n      var nodemap = oldScript.attributes;\n      for (var j in nodemap) {\n        if (nodemap.hasOwnProperty(j)) {\n          attrs.push(nodemap[j])\n        }\n      }\n      attrs.forEach(function(attr) { newScript.setAttribute(attr.name, attr.value) });\n      newScript.appendChild(document.createTextNode(oldScript.innerHTML));\n      oldScript.parentNode.replaceChild(newScript, oldScript);\n    });\n    if (JS_MIME_TYPE in output.data) {\n      toinsert[nchildren-1].children[1].textContent = output.data[JS_MIME_TYPE];\n    }\n    output_area._hv_plot_id = id;\n    if ((window.Bokeh !== undefined) && (id in Bokeh.index)) {\n      window.PyViz.plot_index[id] = Bokeh.index[id];\n    } else {\n      window.PyViz.plot_index[id] = null;\n    }\n  } else if (output.metadata[EXEC_MIME_TYPE][\"server_id\"] !== undefined) {\n    var bk_div = document.createElement(\"div\");\n    bk_div.innerHTML = output.data[HTML_MIME_TYPE];\n    var script_attrs = bk_div.children[0].attributes;\n    for (var i = 0; i < script_attrs.length; i++) {\n      toinsert[toinsert.length - 1].childNodes[1].setAttribute(script_attrs[i].name, script_attrs[i].value);\n    }\n    // store reference to server id on output_area\n    output_area._bokeh_server_id = output.metadata[EXEC_MIME_TYPE][\"server_id\"];\n  }\n}\n\n/**\n * Handle when an output is cleared or removed\n */\nfunction handle_clear_output(event, handle) {\n  var id = handle.cell.output_area._hv_plot_id;\n  var server_id = handle.cell.output_area._bokeh_server_id;\n  if (((id === undefined) || !(id in PyViz.plot_index)) && (server_id !== undefined)) { return; }\n  var comm = window.PyViz.comm_manager.get_client_comm(\"hv-extension-comm\", \"hv-extension-comm\", function () {});\n  if (server_id !== null) {\n    comm.send({event_type: 'server_delete', 'id': server_id});\n    return;\n  } else if (comm !== null) {\n    comm.send({event_type: 'delete', 'id': id});\n  }\n  delete PyViz.plot_index[id];\n  if ((window.Bokeh !== undefined) & (id in window.Bokeh.index)) {\n    var doc = window.Bokeh.index[id].model.document\n    doc.clear();\n    const i = window.Bokeh.documents.indexOf(doc);\n    if (i > -1) {\n      window.Bokeh.documents.splice(i, 1);\n    }\n  }\n}\n\n/**\n * Handle kernel restart event\n */\nfunction handle_kernel_cleanup(event, handle) {\n  delete PyViz.comms[\"hv-extension-comm\"];\n  window.PyViz.plot_index = {}\n}\n\n/**\n * Handle update_display_data messages\n */\nfunction handle_update_output(event, handle) {\n  handle_clear_output(event, {cell: {output_area: handle.output_area}})\n  handle_add_output(event, handle)\n}\n\nfunction register_renderer(events, OutputArea) {\n  function append_mime(data, metadata, element) {\n    // create a DOM node to render to\n    var toinsert = this.create_output_subarea(\n    metadata,\n    CLASS_NAME,\n    EXEC_MIME_TYPE\n    );\n    this.keyboard_manager.register_events(toinsert);\n    // Render to node\n    var props = {data: data, metadata: metadata[EXEC_MIME_TYPE]};\n    render(props, toinsert[0]);\n    element.append(toinsert);\n    return toinsert\n  }\n\n  events.on('output_added.OutputArea', handle_add_output);\n  events.on('output_updated.OutputArea', handle_update_output);\n  events.on('clear_output.CodeCell', handle_clear_output);\n  events.on('delete.Cell', handle_clear_output);\n  events.on('kernel_ready.Kernel', handle_kernel_cleanup);\n\n  OutputArea.prototype.register_mime_type(EXEC_MIME_TYPE, append_mime, {\n    safe: true,\n    index: 0\n  });\n}\n\nif (window.Jupyter !== undefined) {\n  try {\n    var events = require('base/js/events');\n    var OutputArea = require('notebook/js/outputarea').OutputArea;\n    if (OutputArea.prototype.mime_types().indexOf(EXEC_MIME_TYPE) == -1) {\n      register_renderer(events, OutputArea);\n    }\n  } catch(err) {\n  }\n}\n",
      "application/vnd.holoviews_load.v0+json": ""
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>*[data-root-id],\n",
       "*[data-root-id] > * {\n",
       "  box-sizing: border-box;\n",
       "  font-family: var(--jp-ui-font-family);\n",
       "  font-size: var(--jp-ui-font-size1);\n",
       "  color: var(--vscode-editor-foreground, var(--jp-ui-font-color1));\n",
       "}\n",
       "\n",
       "/* Override VSCode background color */\n",
       ".cell-output-ipywidget-background:has(\n",
       "    > .cell-output-ipywidget-background > .lm-Widget > *[data-root-id]\n",
       "  ),\n",
       ".cell-output-ipywidget-background:has(> .lm-Widget > *[data-root-id]) {\n",
       "  background-color: transparent !important;\n",
       "}\n",
       "</style>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.holoviews_exec.v0+json": "",
      "text/html": [
       "<div id='p1002'>\n",
       "  <div id=\"c026542d-3485-45e2-8111-8543e8749d2f\" data-root-id=\"p1002\" style=\"display: contents;\"></div>\n",
       "</div>\n",
       "<script type=\"application/javascript\">(function(root) {\n",
       "  var docs_json = {\"daa06983-4a38-4918-a4c8-33cecbc318ba\":{\"version\":\"3.4.1\",\"title\":\"Bokeh Application\",\"roots\":[{\"type\":\"object\",\"name\":\"panel.models.browser.BrowserInfo\",\"id\":\"p1002\"},{\"type\":\"object\",\"name\":\"panel.models.comm_manager.CommManager\",\"id\":\"p1003\",\"attributes\":{\"plot_id\":\"p1002\",\"comm_id\":\"315102f26fdc46859ee760259f36b602\",\"client_comm_id\":\"42a526c115b14eefbb262b62033378eb\"}}],\"defs\":[{\"type\":\"model\",\"name\":\"ReactiveHTML1\"},{\"type\":\"model\",\"name\":\"FlexBox1\",\"properties\":[{\"name\":\"align_content\",\"kind\":\"Any\",\"default\":\"flex-start\"},{\"name\":\"align_items\",\"kind\":\"Any\",\"default\":\"flex-start\"},{\"name\":\"flex_direction\",\"kind\":\"Any\",\"default\":\"row\"},{\"name\":\"flex_wrap\",\"kind\":\"Any\",\"default\":\"wrap\"},{\"name\":\"gap\",\"kind\":\"Any\",\"default\":\"\"},{\"name\":\"justify_content\",\"kind\":\"Any\",\"default\":\"flex-start\"}]},{\"type\":\"model\",\"name\":\"FloatPanel1\",\"properties\":[{\"name\":\"config\",\"kind\":\"Any\",\"default\":{\"type\":\"map\"}},{\"name\":\"contained\",\"kind\":\"Any\",\"default\":true},{\"name\":\"position\",\"kind\":\"Any\",\"default\":\"right-top\"},{\"name\":\"offsetx\",\"kind\":\"Any\",\"default\":null},{\"name\":\"offsety\",\"kind\":\"Any\",\"default\":null},{\"name\":\"theme\",\"kind\":\"Any\",\"default\":\"primary\"},{\"name\":\"status\",\"kind\":\"Any\",\"default\":\"normalized\"}]},{\"type\":\"model\",\"name\":\"GridStack1\",\"properties\":[{\"name\":\"mode\",\"kind\":\"Any\",\"default\":\"warn\"},{\"name\":\"ncols\",\"kind\":\"Any\",\"default\":null},{\"name\":\"nrows\",\"kind\":\"Any\",\"default\":null},{\"name\":\"allow_resize\",\"kind\":\"Any\",\"default\":true},{\"name\":\"allow_drag\",\"kind\":\"Any\",\"default\":true},{\"name\":\"state\",\"kind\":\"Any\",\"default\":[]}]},{\"type\":\"model\",\"name\":\"drag1\",\"properties\":[{\"name\":\"slider_width\",\"kind\":\"Any\",\"default\":5},{\"name\":\"slider_color\",\"kind\":\"Any\",\"default\":\"black\"},{\"name\":\"value\",\"kind\":\"Any\",\"default\":50}]},{\"type\":\"model\",\"name\":\"click1\",\"properties\":[{\"name\":\"terminal_output\",\"kind\":\"Any\",\"default\":\"\"},{\"name\":\"debug_name\",\"kind\":\"Any\",\"default\":\"\"},{\"name\":\"clears\",\"kind\":\"Any\",\"default\":0}]},{\"type\":\"model\",\"name\":\"FastWrapper1\",\"properties\":[{\"name\":\"object\",\"kind\":\"Any\",\"default\":null},{\"name\":\"style\",\"kind\":\"Any\",\"default\":null}]},{\"type\":\"model\",\"name\":\"NotificationAreaBase1\",\"properties\":[{\"name\":\"js_events\",\"kind\":\"Any\",\"default\":{\"type\":\"map\"}},{\"name\":\"position\",\"kind\":\"Any\",\"default\":\"bottom-right\"},{\"name\":\"_clear\",\"kind\":\"Any\",\"default\":0}]},{\"type\":\"model\",\"name\":\"NotificationArea1\",\"properties\":[{\"name\":\"js_events\",\"kind\":\"Any\",\"default\":{\"type\":\"map\"}},{\"name\":\"notifications\",\"kind\":\"Any\",\"default\":[]},{\"name\":\"position\",\"kind\":\"Any\",\"default\":\"bottom-right\"},{\"name\":\"_clear\",\"kind\":\"Any\",\"default\":0},{\"name\":\"types\",\"kind\":\"Any\",\"default\":[{\"type\":\"map\",\"entries\":[[\"type\",\"warning\"],[\"background\",\"#ffc107\"],[\"icon\",{\"type\":\"map\",\"entries\":[[\"className\",\"fas fa-exclamation-triangle\"],[\"tagName\",\"i\"],[\"color\",\"white\"]]}]]},{\"type\":\"map\",\"entries\":[[\"type\",\"info\"],[\"background\",\"#007bff\"],[\"icon\",{\"type\":\"map\",\"entries\":[[\"className\",\"fas fa-info-circle\"],[\"tagName\",\"i\"],[\"color\",\"white\"]]}]]}]}]},{\"type\":\"model\",\"name\":\"Notification\",\"properties\":[{\"name\":\"background\",\"kind\":\"Any\",\"default\":null},{\"name\":\"duration\",\"kind\":\"Any\",\"default\":3000},{\"name\":\"icon\",\"kind\":\"Any\",\"default\":null},{\"name\":\"message\",\"kind\":\"Any\",\"default\":\"\"},{\"name\":\"notification_type\",\"kind\":\"Any\",\"default\":null},{\"name\":\"_destroyed\",\"kind\":\"Any\",\"default\":false}]},{\"type\":\"model\",\"name\":\"TemplateActions1\",\"properties\":[{\"name\":\"open_modal\",\"kind\":\"Any\",\"default\":0},{\"name\":\"close_modal\",\"kind\":\"Any\",\"default\":0}]},{\"type\":\"model\",\"name\":\"BootstrapTemplateActions1\",\"properties\":[{\"name\":\"open_modal\",\"kind\":\"Any\",\"default\":0},{\"name\":\"close_modal\",\"kind\":\"Any\",\"default\":0}]},{\"type\":\"model\",\"name\":\"TemplateEditor1\",\"properties\":[{\"name\":\"layout\",\"kind\":\"Any\",\"default\":[]}]},{\"type\":\"model\",\"name\":\"MaterialTemplateActions1\",\"properties\":[{\"name\":\"open_modal\",\"kind\":\"Any\",\"default\":0},{\"name\":\"close_modal\",\"kind\":\"Any\",\"default\":0}]},{\"type\":\"model\",\"name\":\"copy_to_clipboard1\",\"properties\":[{\"name\":\"fill\",\"kind\":\"Any\",\"default\":\"none\"},{\"name\":\"value\",\"kind\":\"Any\",\"default\":null}]}]}};\n",
       "  var render_items = [{\"docid\":\"daa06983-4a38-4918-a4c8-33cecbc318ba\",\"roots\":{\"p1002\":\"c026542d-3485-45e2-8111-8543e8749d2f\"},\"root_ids\":[\"p1002\"]}];\n",
       "  var docs = Object.values(docs_json)\n",
       "  if (!docs) {\n",
       "    return\n",
       "  }\n",
       "  const py_version = docs[0].version.replace('rc', '-rc.').replace('.dev', '-dev.')\n",
       "  async function embed_document(root) {\n",
       "    var Bokeh = get_bokeh(root)\n",
       "    await Bokeh.embed.embed_items_notebook(docs_json, render_items);\n",
       "    for (const render_item of render_items) {\n",
       "      for (const root_id of render_item.root_ids) {\n",
       "\tconst id_el = document.getElementById(root_id)\n",
       "\tif (id_el.children.length && id_el.children[0].hasAttribute('data-root-id')) {\n",
       "\t  const root_el = id_el.children[0]\n",
       "\t  root_el.id = root_el.id + '-rendered'\n",
       "\t  for (const child of root_el.children) {\n",
       "            // Ensure JupyterLab does not capture keyboard shortcuts\n",
       "            // see: https://jupyterlab.readthedocs.io/en/4.1.x/extension/notebook.html#keyboard-interaction-model\n",
       "\t    child.setAttribute('data-lm-suppress-shortcuts', 'true')\n",
       "\t  }\n",
       "\t}\n",
       "      }\n",
       "    }\n",
       "  }\n",
       "  function get_bokeh(root) {\n",
       "    if (root.Bokeh === undefined) {\n",
       "      return null\n",
       "    } else if (root.Bokeh.version !== py_version) {\n",
       "      if (root.Bokeh.versions === undefined || !root.Bokeh.versions.has(py_version)) {\n",
       "\treturn null\n",
       "      }\n",
       "      return root.Bokeh.versions.get(py_version);\n",
       "    } else if (root.Bokeh.version === py_version) {\n",
       "      return root.Bokeh\n",
       "    }\n",
       "    return null\n",
       "  }\n",
       "  function is_loaded(root) {\n",
       "    var Bokeh = get_bokeh(root)\n",
       "    return (Bokeh != null && Bokeh.Panel !== undefined)\n",
       "  }\n",
       "  if (is_loaded(root)) {\n",
       "    embed_document(root);\n",
       "  } else {\n",
       "    var attempts = 0;\n",
       "    var timer = setInterval(function(root) {\n",
       "      if (is_loaded(root)) {\n",
       "        clearInterval(timer);\n",
       "        embed_document(root);\n",
       "      } else if (document.readyState == \"complete\") {\n",
       "        attempts++;\n",
       "        if (attempts > 200) {\n",
       "          clearInterval(timer);\n",
       "\t  var Bokeh = get_bokeh(root)\n",
       "\t  if (Bokeh == null || Bokeh.Panel == null) {\n",
       "            console.warn(\"Panel: ERROR: Unable to run Panel code because Bokeh or Panel library is missing\");\n",
       "\t  } else {\n",
       "\t    console.warn(\"Panel: WARNING: Attempting to render but not all required libraries could be resolved.\")\n",
       "\t    embed_document(root)\n",
       "\t  }\n",
       "        }\n",
       "      }\n",
       "    }, 25, root)\n",
       "  }\n",
       "})(window);</script>"
      ]
     },
     "metadata": {
      "application/vnd.holoviews_exec.v0+json": {
       "id": "p1002"
      }
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "my_df.write_avro\n",
      "my_df.write_clipboard\n",
      "my_df.write_csv\n",
      "my_df.write_database\n",
      "my_df.write_delta\n",
      "my_df.write_excel\n",
      "my_df.write_ipc\n",
      "my_df.write_ipc_stream\n",
      "my_df.write_json\n",
      "my_df.write_ndjson\n",
      "my_df.write_parquet"
     ]
    }
   ],
   "source": [
    "# Kiêm tra các cách lưu trữ từ polars\n",
    "?my_df.write_*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Các mẹo khác"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Pull cột dưới dạng vector"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "polars.dataframe.frame.DataFrame"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(mtcars_pl.select(pl.col(\"mpg\")))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (32,)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>mpg</th></tr><tr><td>f64</td></tr></thead><tbody><tr><td>21.0</td></tr><tr><td>21.0</td></tr><tr><td>22.8</td></tr><tr><td>21.4</td></tr><tr><td>18.7</td></tr><tr><td>&hellip;</td></tr><tr><td>30.4</td></tr><tr><td>15.8</td></tr><tr><td>19.7</td></tr><tr><td>15.0</td></tr><tr><td>21.4</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (32,)\n",
       "Series: 'mpg' [f64]\n",
       "[\n",
       "\t21.0\n",
       "\t21.0\n",
       "\t22.8\n",
       "\t21.4\n",
       "\t18.7\n",
       "\t…\n",
       "\t30.4\n",
       "\t15.8\n",
       "\t19.7\n",
       "\t15.0\n",
       "\t21.4\n",
       "]"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mtcars_pl.select(pl.col(\"mpg\")).to_series()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Sử dụng `lit`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`pl.lit` là cấu trúc dữ liệu khai báo hằng số trong `polars` và được sử dụng trong các trường hợp sau:\n",
    "\n",
    "- Tạo cột hằng số\n",
    "- Tính toán điều kiện when\n",
    "- Tính toán với giá trị mới"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (5, 13)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>mpg</th><th>cyl</th><th>disp</th><th>hp</th><th>drat</th><th>wt</th><th>qsec</th><th>vs</th><th>am</th><th>gear</th><th>carb</th><th>x</th></tr><tr><td>str</td><td>f64</td><td>i64</td><td>f64</td><td>i64</td><td>f64</td><td>f64</td><td>f64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i32</td></tr></thead><tbody><tr><td>&quot;Mazda RX4&quot;</td><td>21.0</td><td>6</td><td>160.0</td><td>110</td><td>3.9</td><td>2.62</td><td>16.46</td><td>0</td><td>1</td><td>4</td><td>4</td><td>10</td></tr><tr><td>&quot;Mazda RX4 Wag&quot;</td><td>21.0</td><td>6</td><td>160.0</td><td>110</td><td>3.9</td><td>2.875</td><td>17.02</td><td>0</td><td>1</td><td>4</td><td>4</td><td>10</td></tr><tr><td>&quot;Datsun 710&quot;</td><td>22.8</td><td>4</td><td>108.0</td><td>93</td><td>3.85</td><td>2.32</td><td>18.61</td><td>1</td><td>1</td><td>4</td><td>1</td><td>10</td></tr><tr><td>&quot;Hornet 4 Drive&quot;</td><td>21.4</td><td>6</td><td>258.0</td><td>110</td><td>3.08</td><td>3.215</td><td>19.44</td><td>1</td><td>0</td><td>3</td><td>1</td><td>10</td></tr><tr><td>&quot;Hornet Sportabout&quot;</td><td>18.7</td><td>8</td><td>360.0</td><td>175</td><td>3.15</td><td>3.44</td><td>17.02</td><td>0</td><td>0</td><td>3</td><td>2</td><td>10</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (5, 13)\n",
       "┌───────────────────┬──────┬─────┬───────┬───┬─────┬──────┬──────┬─────┐\n",
       "│ name              ┆ mpg  ┆ cyl ┆ disp  ┆ … ┆ am  ┆ gear ┆ carb ┆ x   │\n",
       "│ ---               ┆ ---  ┆ --- ┆ ---   ┆   ┆ --- ┆ ---  ┆ ---  ┆ --- │\n",
       "│ str               ┆ f64  ┆ i64 ┆ f64   ┆   ┆ i64 ┆ i64  ┆ i64  ┆ i32 │\n",
       "╞═══════════════════╪══════╪═════╪═══════╪═══╪═════╪══════╪══════╪═════╡\n",
       "│ Mazda RX4         ┆ 21.0 ┆ 6   ┆ 160.0 ┆ … ┆ 1   ┆ 4    ┆ 4    ┆ 10  │\n",
       "│ Mazda RX4 Wag     ┆ 21.0 ┆ 6   ┆ 160.0 ┆ … ┆ 1   ┆ 4    ┆ 4    ┆ 10  │\n",
       "│ Datsun 710        ┆ 22.8 ┆ 4   ┆ 108.0 ┆ … ┆ 1   ┆ 4    ┆ 1    ┆ 10  │\n",
       "│ Hornet 4 Drive    ┆ 21.4 ┆ 6   ┆ 258.0 ┆ … ┆ 0   ┆ 3    ┆ 1    ┆ 10  │\n",
       "│ Hornet Sportabout ┆ 18.7 ┆ 8   ┆ 360.0 ┆ … ┆ 0   ┆ 3    ┆ 2    ┆ 10  │\n",
       "└───────────────────┴──────┴─────┴───────┴───┴─────┴──────┴──────┴─────┘"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Trường hợp 1: Tạo cột hằng số\n",
    "mtcars_pl.with_columns(\n",
    "    pl.lit(10).alias(\"x\")\n",
    ").head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "ename": "ColumnNotFoundError",
     "evalue": ">20",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mColumnNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[72], line 3\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m# Trường hợp 2: Tính toán điều kiện when\u001b[39;00m\n\u001b[0;32m      2\u001b[0m \u001b[38;5;66;03m# Không sử dụng pl.lit sẽ không chạy\u001b[39;00m\n\u001b[1;32m----> 3\u001b[0m \u001b[43mmtcars_pl\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mselect\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mmpg\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mwith_columns\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m      4\u001b[0m \u001b[43m    \u001b[49m\u001b[43mpl\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mwhen\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpl\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcol\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mmpg\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m>\u001b[39;49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;241;43m20\u001b[39;49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mthen\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43m>20\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[0;32m      5\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43motherwise\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43m<20\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[0;32m      6\u001b[0m \u001b[43m)\u001b[49m\n",
      "File \u001b[1;32mc:\\Users\\Hoang Duc Anh\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\polars\\dataframe\\frame.py:8642\u001b[0m, in \u001b[0;36mDataFrame.with_columns\u001b[1;34m(self, *exprs, **named_exprs)\u001b[0m\n\u001b[0;32m   8496\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mwith_columns\u001b[39m(\n\u001b[0;32m   8497\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[0;32m   8498\u001b[0m     \u001b[38;5;241m*\u001b[39mexprs: IntoExpr \u001b[38;5;241m|\u001b[39m Iterable[IntoExpr],\n\u001b[0;32m   8499\u001b[0m     \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mnamed_exprs: IntoExpr,\n\u001b[0;32m   8500\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m DataFrame:\n\u001b[0;32m   8501\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m   8502\u001b[0m \u001b[38;5;124;03m    Add columns to this DataFrame.\u001b[39;00m\n\u001b[0;32m   8503\u001b[0m \n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m   8640\u001b[0m \u001b[38;5;124;03m    └─────┴──────┴─────────────┘\u001b[39;00m\n\u001b[0;32m   8641\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[1;32m-> 8642\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mlazy\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mwith_columns\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mexprs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mnamed_exprs\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcollect\u001b[49m\u001b[43m(\u001b[49m\u001b[43m_eager\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32mc:\\Users\\Hoang Duc Anh\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\polars\\lazyframe\\frame.py:1837\u001b[0m, in \u001b[0;36mLazyFrame.collect\u001b[1;34m(self, type_coercion, predicate_pushdown, projection_pushdown, simplify_expression, slice_pushdown, comm_subplan_elim, comm_subexpr_elim, cluster_with_columns, no_optimization, streaming, background, _eager, **_kwargs)\u001b[0m\n\u001b[0;32m   1834\u001b[0m \u001b[38;5;66;03m# Only for testing purposes atm.\u001b[39;00m\n\u001b[0;32m   1835\u001b[0m callback \u001b[38;5;241m=\u001b[39m _kwargs\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpost_opt_callback\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m-> 1837\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m wrap_df(\u001b[43mldf\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcollect\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcallback\u001b[49m\u001b[43m)\u001b[49m)\n",
      "\u001b[1;31mColumnNotFoundError\u001b[0m: >20"
     ]
    }
   ],
   "source": [
    "# Trường hợp 2: Tính toán điều kiện when\n",
    "# Không sử dụng pl.lit sẽ không chạy\n",
    "mtcars_pl.select(\"mpg\").with_columns(\n",
    "    pl.when(pl.col(\"mpg\") >= 20).then(\">20\")\n",
    "        .otherwise(\"<20\")\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (32, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>mpg</th><th>literal</th></tr><tr><td>f64</td><td>str</td></tr></thead><tbody><tr><td>21.0</td><td>&quot;&gt;20&quot;</td></tr><tr><td>21.0</td><td>&quot;&gt;20&quot;</td></tr><tr><td>22.8</td><td>&quot;&gt;20&quot;</td></tr><tr><td>21.4</td><td>&quot;&gt;20&quot;</td></tr><tr><td>18.7</td><td>&quot;&lt;20&quot;</td></tr><tr><td>&hellip;</td><td>&hellip;</td></tr><tr><td>30.4</td><td>&quot;&gt;20&quot;</td></tr><tr><td>15.8</td><td>&quot;&lt;20&quot;</td></tr><tr><td>19.7</td><td>&quot;&lt;20&quot;</td></tr><tr><td>15.0</td><td>&quot;&lt;20&quot;</td></tr><tr><td>21.4</td><td>&quot;&gt;20&quot;</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (32, 2)\n",
       "┌──────┬─────────┐\n",
       "│ mpg  ┆ literal │\n",
       "│ ---  ┆ ---     │\n",
       "│ f64  ┆ str     │\n",
       "╞══════╪═════════╡\n",
       "│ 21.0 ┆ >20     │\n",
       "│ 21.0 ┆ >20     │\n",
       "│ 22.8 ┆ >20     │\n",
       "│ 21.4 ┆ >20     │\n",
       "│ 18.7 ┆ <20     │\n",
       "│ …    ┆ …       │\n",
       "│ 30.4 ┆ >20     │\n",
       "│ 15.8 ┆ <20     │\n",
       "│ 19.7 ┆ <20     │\n",
       "│ 15.0 ┆ <20     │\n",
       "│ 21.4 ┆ >20     │\n",
       "└──────┴─────────┘"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Bắt buộc phải sử dụng pl.lit\n",
    "mtcars_pl.select(\"mpg\").with_columns(\n",
    "    pl.when(pl.col(\"mpg\") >= 20).then(pl.lit(\">20\"))\n",
    "        .otherwise(pl.lit(\"<20\"))\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (5, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>mpg</th><th>new_mpg</th></tr><tr><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>21.0</td><td>31.0</td></tr><tr><td>21.0</td><td>31.0</td></tr><tr><td>22.8</td><td>32.8</td></tr><tr><td>21.4</td><td>31.4</td></tr><tr><td>18.7</td><td>28.7</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (5, 2)\n",
       "┌──────┬─────────┐\n",
       "│ mpg  ┆ new_mpg │\n",
       "│ ---  ┆ ---     │\n",
       "│ f64  ┆ f64     │\n",
       "╞══════╪═════════╡\n",
       "│ 21.0 ┆ 31.0    │\n",
       "│ 21.0 ┆ 31.0    │\n",
       "│ 22.8 ┆ 32.8    │\n",
       "│ 21.4 ┆ 31.4    │\n",
       "│ 18.7 ┆ 28.7    │\n",
       "└──────┴─────────┘"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Trường hợp 3: Cộng thêm giá trị\n",
    "(\n",
    "    mtcars_pl\n",
    "    .select(pl.col(\"mpg\"))\n",
    "    .head()\n",
    "    .with_columns(\n",
    "        (pl.col(\"mpg\") + pl.lit(10))\n",
    "        .alias(\"new_mpg\")\n",
    "    )\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Xử lý `None`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Với dữ liệu null, ta có thể fill thêm dữ liệu theo nhiều cách khác nhau"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (10, 1)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>value</th></tr><tr><td>i64</td></tr></thead><tbody><tr><td>null</td></tr><tr><td>2</td></tr><tr><td>3</td></tr><tr><td>4</td></tr><tr><td>null</td></tr><tr><td>null</td></tr><tr><td>7</td></tr><tr><td>8</td></tr><tr><td>9</td></tr><tr><td>null</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (10, 1)\n",
       "┌───────┐\n",
       "│ value │\n",
       "│ ---   │\n",
       "│ i64   │\n",
       "╞═══════╡\n",
       "│ null  │\n",
       "│ 2     │\n",
       "│ 3     │\n",
       "│ 4     │\n",
       "│ null  │\n",
       "│ null  │\n",
       "│ 7     │\n",
       "│ 8     │\n",
       "│ 9     │\n",
       "│ null  │\n",
       "└───────┘"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pl.DataFrame(\n",
    "    {\n",
    "        \"value\": [None, 2, 3, 4, None, None, 7, 8, 9, None],\n",
    "    },\n",
    ")\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ngoài ra, `polars` cho phép điền thêm dữ liệu với nhiều chiến lược khác nhau như:\n",
    "\n",
    "- `forward`: Thay thế bằng giá trị liền trước\n",
    "- `backward`: Thay thế bằng giá trị liền sau\n",
    "- `zero`: Thay thế bằng 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (10, 6)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>value</th><th>forward</th><th>backward</th><th>zero</th><th>mean</th><th>fill_999</th></tr><tr><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>null</td><td>null</td><td>2</td><td>0</td><td>5</td><td>999</td></tr><tr><td>2</td><td>2</td><td>2</td><td>2</td><td>2</td><td>2</td></tr><tr><td>3</td><td>3</td><td>3</td><td>3</td><td>3</td><td>3</td></tr><tr><td>4</td><td>4</td><td>4</td><td>4</td><td>4</td><td>4</td></tr><tr><td>null</td><td>4</td><td>7</td><td>0</td><td>5</td><td>999</td></tr><tr><td>null</td><td>4</td><td>7</td><td>0</td><td>5</td><td>999</td></tr><tr><td>7</td><td>7</td><td>7</td><td>7</td><td>7</td><td>7</td></tr><tr><td>8</td><td>8</td><td>8</td><td>8</td><td>8</td><td>8</td></tr><tr><td>9</td><td>9</td><td>9</td><td>9</td><td>9</td><td>9</td></tr><tr><td>null</td><td>9</td><td>null</td><td>0</td><td>5</td><td>999</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (10, 6)\n",
       "┌───────┬─────────┬──────────┬──────┬──────┬──────────┐\n",
       "│ value ┆ forward ┆ backward ┆ zero ┆ mean ┆ fill_999 │\n",
       "│ ---   ┆ ---     ┆ ---      ┆ ---  ┆ ---  ┆ ---      │\n",
       "│ i64   ┆ i64     ┆ i64      ┆ i64  ┆ i64  ┆ i64      │\n",
       "╞═══════╪═════════╪══════════╪══════╪══════╪══════════╡\n",
       "│ null  ┆ null    ┆ 2        ┆ 0    ┆ 5    ┆ 999      │\n",
       "│ 2     ┆ 2       ┆ 2        ┆ 2    ┆ 2    ┆ 2        │\n",
       "│ 3     ┆ 3       ┆ 3        ┆ 3    ┆ 3    ┆ 3        │\n",
       "│ 4     ┆ 4       ┆ 4        ┆ 4    ┆ 4    ┆ 4        │\n",
       "│ null  ┆ 4       ┆ 7        ┆ 0    ┆ 5    ┆ 999      │\n",
       "│ null  ┆ 4       ┆ 7        ┆ 0    ┆ 5    ┆ 999      │\n",
       "│ 7     ┆ 7       ┆ 7        ┆ 7    ┆ 7    ┆ 7        │\n",
       "│ 8     ┆ 8       ┆ 8        ┆ 8    ┆ 8    ┆ 8        │\n",
       "│ 9     ┆ 9       ┆ 9        ┆ 9    ┆ 9    ┆ 9        │\n",
       "│ null  ┆ 9       ┆ null     ┆ 0    ┆ 5    ┆ 999      │\n",
       "└───────┴─────────┴──────────┴──────┴──────┴──────────┘"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.with_columns(\n",
    "    pl.col(\"value\")\n",
    "        .fill_null(strategy = \"forward\")\n",
    "        .alias(\"forward\"),\n",
    "    pl.col(\"value\")\n",
    "        .fill_null(strategy = \"backward\")\n",
    "        .alias(\"backward\"),\n",
    "    pl.col(\"value\")\n",
    "        .fill_null(strategy = \"zero\")\n",
    "        .alias(\"zero\"),\n",
    "    pl.col(\"value\")\n",
    "        .fill_null(strategy = \"mean\")\n",
    "        .alias(\"mean\"),\n",
    "    pl.col(\"value\")\n",
    "        .fill_null(999)\n",
    "        .alias(\"fill_999\")    \n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Tài liệu tham khảo\n",
    "\n",
    "- [https://docs.pola.rs/]()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
