{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Polars"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Giới thiệu"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Polars là một thư viện mới của Python, viết trên Rust và có thể hỗ trợ và tính toán dữ liệu nhanh chóng, kể cả với trường hợp dữ liệu vượt quá dung lượng bộ nhớ. Bên cạnh đó, `polars` còn có các ưu điểm vượt trội sau:\n",
    "\n",
    "- Cú pháp tương đồng với `pandas`\n",
    "- Hỗ trợ tốt hơn với các cú pháp xử lý và biến đổi dữ liệu đơn giản, hỗ trợ `pipe` hiệu quả\n",
    "- Hỗ trợ `lazy evaluation` để tăng tốc độ tính toán và xử lý\n",
    "\n",
    "Bên cạnh đó, cấu trúc dữ liệu của `polars` hoàn toàn tương thích với `plotnine` để xây dựng biểu đồ theo phong cách của ngữ pháp biểu đồ\n",
    "\n",
    "---\n",
    "\n",
    "Tài liệu đầy đủ của `polars` có thể tham khảo chi tiết tại [https://docs.pola.rs/]()\n",
    "\n",
    "Ta có thể cài đặt polars như sau:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "# Cơ bản\n",
    "pip install polars\n",
    "# polars với đầy đủ tính năng\n",
    "pip install \"polars[all]\"\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Polars cơ bản"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Series"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Tương tự như `pd.Series`, cấu trúc `Series` của polars cũng có cấu trúc tương tự"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (4,)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th></th></tr><tr><td>f64</td></tr></thead><tbody><tr><td>1.0</td></tr><tr><td>2.4</td></tr><tr><td>5.0</td></tr><tr><td>6.0</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (4,)\n",
       "Series: '' [f64]\n",
       "[\n",
       "\t1.0\n",
       "\t2.4\n",
       "\t5.0\n",
       "\t6.0\n",
       "]"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import polars as pl\n",
    "# Series 1\n",
    "pl.Series([1, 2.4, 5, 6])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (3,)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th></th></tr><tr><td>cat</td></tr></thead><tbody><tr><td>&quot;a&quot;</td></tr><tr><td>&quot;b&quot;</td></tr><tr><td>&quot;c&quot;</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (3,)\n",
       "Series: '' [cat]\n",
       "[\n",
       "\t\"a\"\n",
       "\t\"b\"\n",
       "\t\"c\"\n",
       "]"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Series 2\n",
    "pl.Series(['a', 'b', 'c'], dtype = pl.Categorical)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Frame"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "DataFrame trong polars cũng có thể thực hiện với cấu trúc dictionary, list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (5, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>x</th><th>y</th></tr><tr><td>i32</td><td>str</td></tr></thead><tbody><tr><td>0</td><td>&quot;a&quot;</td></tr><tr><td>1</td><td>&quot;a&quot;</td></tr><tr><td>2</td><td>&quot;b&quot;</td></tr><tr><td>3</td><td>&quot;b&quot;</td></tr><tr><td>4</td><td>&quot;c&quot;</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (5, 2)\n",
       "┌─────┬─────┐\n",
       "│ x   ┆ y   │\n",
       "│ --- ┆ --- │\n",
       "│ i32 ┆ str │\n",
       "╞═════╪═════╡\n",
       "│ 0   ┆ a   │\n",
       "│ 1   ┆ a   │\n",
       "│ 2   ┆ b   │\n",
       "│ 3   ┆ b   │\n",
       "│ 4   ┆ c   │\n",
       "└─────┴─────┘"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "df = pl.DataFrame(\n",
    "    {\n",
    "        'x': np.arange(5),\n",
    "        'y': ['a', 'a', 'b', 'b', 'c']\n",
    "    }\n",
    ")\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "polars.dataframe.frame.DataFrame"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Cấu trúc dữ liệu\n",
    "type(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (9, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>statistic</th><th>x</th><th>y</th></tr><tr><td>str</td><td>f64</td><td>str</td></tr></thead><tbody><tr><td>&quot;count&quot;</td><td>5.0</td><td>&quot;5&quot;</td></tr><tr><td>&quot;null_count&quot;</td><td>0.0</td><td>&quot;0&quot;</td></tr><tr><td>&quot;mean&quot;</td><td>2.0</td><td>null</td></tr><tr><td>&quot;std&quot;</td><td>1.581139</td><td>null</td></tr><tr><td>&quot;min&quot;</td><td>0.0</td><td>&quot;a&quot;</td></tr><tr><td>&quot;25%&quot;</td><td>1.0</td><td>null</td></tr><tr><td>&quot;50%&quot;</td><td>2.0</td><td>null</td></tr><tr><td>&quot;75%&quot;</td><td>3.0</td><td>null</td></tr><tr><td>&quot;max&quot;</td><td>4.0</td><td>&quot;c&quot;</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (9, 3)\n",
       "┌────────────┬──────────┬──────┐\n",
       "│ statistic  ┆ x        ┆ y    │\n",
       "│ ---        ┆ ---      ┆ ---  │\n",
       "│ str        ┆ f64      ┆ str  │\n",
       "╞════════════╪══════════╪══════╡\n",
       "│ count      ┆ 5.0      ┆ 5    │\n",
       "│ null_count ┆ 0.0      ┆ 0    │\n",
       "│ mean       ┆ 2.0      ┆ null │\n",
       "│ std        ┆ 1.581139 ┆ null │\n",
       "│ min        ┆ 0.0      ┆ a    │\n",
       "│ 25%        ┆ 1.0      ┆ null │\n",
       "│ 50%        ┆ 2.0      ┆ null │\n",
       "│ 75%        ┆ 3.0      ┆ null │\n",
       "│ max        ┆ 4.0      ┆ c    │\n",
       "└────────────┴──────────┴──────┘"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Summary dữ liệu\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Int32, String]"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Cấu trúc dữ liệu\n",
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (2, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>statistic</th><th>value</th></tr><tr><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;count&quot;</td><td>&quot;5&quot;</td></tr><tr><td>&quot;null_count&quot;</td><td>&quot;0&quot;</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (2, 2)\n",
       "┌────────────┬───────┐\n",
       "│ statistic  ┆ value │\n",
       "│ ---        ┆ ---   │\n",
       "│ str        ┆ str   │\n",
       "╞════════════╪═══════╡\n",
       "│ count      ┆ 5     │\n",
       "│ null_count ┆ 0     │\n",
       "└────────────┴───────┘"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Convert sang Categorical\n",
    "df[\"y\"].cast(pl.Categorical).describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Bên cạnh đó, ta cũng có thể convert từ `pandas.DataFrame` sang `polars.DataFrame`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.frame.DataFrame"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from plotnine.data import mtcars\n",
    "type(mtcars)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "polars.dataframe.frame.DataFrame"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Convert sang polars\n",
    "mtcars_pl = pl.from_pandas(mtcars)\n",
    "type(mtcars_pl)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Lưu ý**: Để thuận tiện trong quá trình sử dụng `polars`, các phần hướng dẫn biến đổi dữ liệu tiếp theo sẽ sử dụng tập dữ liệu `mtcars`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (5, 12)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>mpg</th><th>cyl</th><th>disp</th><th>hp</th><th>drat</th><th>wt</th><th>qsec</th><th>vs</th><th>am</th><th>gear</th><th>carb</th></tr><tr><td>str</td><td>f64</td><td>i64</td><td>f64</td><td>i64</td><td>f64</td><td>f64</td><td>f64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Mazda RX4&quot;</td><td>21.0</td><td>6</td><td>160.0</td><td>110</td><td>3.9</td><td>2.62</td><td>16.46</td><td>0</td><td>1</td><td>4</td><td>4</td></tr><tr><td>&quot;Mazda RX4 Wag&quot;</td><td>21.0</td><td>6</td><td>160.0</td><td>110</td><td>3.9</td><td>2.875</td><td>17.02</td><td>0</td><td>1</td><td>4</td><td>4</td></tr><tr><td>&quot;Datsun 710&quot;</td><td>22.8</td><td>4</td><td>108.0</td><td>93</td><td>3.85</td><td>2.32</td><td>18.61</td><td>1</td><td>1</td><td>4</td><td>1</td></tr><tr><td>&quot;Hornet 4 Drive&quot;</td><td>21.4</td><td>6</td><td>258.0</td><td>110</td><td>3.08</td><td>3.215</td><td>19.44</td><td>1</td><td>0</td><td>3</td><td>1</td></tr><tr><td>&quot;Hornet Sportabout&quot;</td><td>18.7</td><td>8</td><td>360.0</td><td>175</td><td>3.15</td><td>3.44</td><td>17.02</td><td>0</td><td>0</td><td>3</td><td>2</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (5, 12)\n",
       "┌───────────────────┬──────┬─────┬───────┬───┬─────┬─────┬──────┬──────┐\n",
       "│ name              ┆ mpg  ┆ cyl ┆ disp  ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │\n",
       "│ ---               ┆ ---  ┆ --- ┆ ---   ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │\n",
       "│ str               ┆ f64  ┆ i64 ┆ f64   ┆   ┆ i64 ┆ i64 ┆ i64  ┆ i64  │\n",
       "╞═══════════════════╪══════╪═════╪═══════╪═══╪═════╪═════╪══════╪══════╡\n",
       "│ Mazda RX4         ┆ 21.0 ┆ 6   ┆ 160.0 ┆ … ┆ 0   ┆ 1   ┆ 4    ┆ 4    │\n",
       "│ Mazda RX4 Wag     ┆ 21.0 ┆ 6   ┆ 160.0 ┆ … ┆ 0   ┆ 1   ┆ 4    ┆ 4    │\n",
       "│ Datsun 710        ┆ 22.8 ┆ 4   ┆ 108.0 ┆ … ┆ 1   ┆ 1   ┆ 4    ┆ 1    │\n",
       "│ Hornet 4 Drive    ┆ 21.4 ┆ 6   ┆ 258.0 ┆ … ┆ 1   ┆ 0   ┆ 3    ┆ 1    │\n",
       "│ Hornet Sportabout ┆ 18.7 ┆ 8   ┆ 360.0 ┆ … ┆ 0   ┆ 0   ┆ 3    ┆ 2    │\n",
       "└───────────────────┴──────┴─────┴───────┴───┴─────┴─────┴──────┴──────┘"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mtcars_pl.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Nhóm câu lệnh truy vấn dữ liệu"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "### Chọn biến"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Với polars, ta có thể chọn biến theo 2 cách\n",
    "\n",
    "- **Cách 1**: Sử dụng các biến dưới dạng list\n",
    "- **Cách 2**: Sử dụng hàm select"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (4,)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>mpg</th></tr><tr><td>f64</td></tr></thead><tbody><tr><td>21.0</td></tr><tr><td>21.0</td></tr><tr><td>22.8</td></tr><tr><td>21.4</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (4,)\n",
       "Series: 'mpg' [f64]\n",
       "[\n",
       "\t21.0\n",
       "\t21.0\n",
       "\t22.8\n",
       "\t21.4\n",
       "]"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Chọn biến theo dạng list\n",
    "mtcars_pl['mpg'].head(4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (4, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>mpg</th><th>cyl</th></tr><tr><td>f64</td><td>i64</td></tr></thead><tbody><tr><td>21.0</td><td>6</td></tr><tr><td>21.0</td><td>6</td></tr><tr><td>22.8</td><td>4</td></tr><tr><td>21.4</td><td>6</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (4, 2)\n",
       "┌──────┬─────┐\n",
       "│ mpg  ┆ cyl │\n",
       "│ ---  ┆ --- │\n",
       "│ f64  ┆ i64 │\n",
       "╞══════╪═════╡\n",
       "│ 21.0 ┆ 6   │\n",
       "│ 21.0 ┆ 6   │\n",
       "│ 22.8 ┆ 4   │\n",
       "│ 21.4 ┆ 6   │\n",
       "└──────┴─────┘"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mtcars_pl[['mpg', 'cyl']].head(4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (32, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>mpg</th><th>cyl</th><th>vs</th></tr><tr><td>f64</td><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>21.0</td><td>6</td><td>0</td></tr><tr><td>21.0</td><td>6</td><td>0</td></tr><tr><td>22.8</td><td>4</td><td>1</td></tr><tr><td>21.4</td><td>6</td><td>1</td></tr><tr><td>18.7</td><td>8</td><td>0</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>30.4</td><td>4</td><td>1</td></tr><tr><td>15.8</td><td>8</td><td>0</td></tr><tr><td>19.7</td><td>6</td><td>0</td></tr><tr><td>15.0</td><td>8</td><td>0</td></tr><tr><td>21.4</td><td>4</td><td>1</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (32, 3)\n",
       "┌──────┬─────┬─────┐\n",
       "│ mpg  ┆ cyl ┆ vs  │\n",
       "│ ---  ┆ --- ┆ --- │\n",
       "│ f64  ┆ i64 ┆ i64 │\n",
       "╞══════╪═════╪═════╡\n",
       "│ 21.0 ┆ 6   ┆ 0   │\n",
       "│ 21.0 ┆ 6   ┆ 0   │\n",
       "│ 22.8 ┆ 4   ┆ 1   │\n",
       "│ 21.4 ┆ 6   ┆ 1   │\n",
       "│ 18.7 ┆ 8   ┆ 0   │\n",
       "│ …    ┆ …   ┆ …   │\n",
       "│ 30.4 ┆ 4   ┆ 1   │\n",
       "│ 15.8 ┆ 8   ┆ 0   │\n",
       "│ 19.7 ┆ 6   ┆ 0   │\n",
       "│ 15.0 ┆ 8   ┆ 0   │\n",
       "│ 21.4 ┆ 4   ┆ 1   │\n",
       "└──────┴─────┴─────┘"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "var = ['mpg', 'cyl', 'vs']\n",
    "mtcars_pl[var]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ngoài cách trên, ta có thể sử dụng method `filter` như sau"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (5, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>mpg</th><th>cyl</th><th>am</th></tr><tr><td>f64</td><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>21.0</td><td>6</td><td>1</td></tr><tr><td>21.0</td><td>6</td><td>1</td></tr><tr><td>22.8</td><td>4</td><td>1</td></tr><tr><td>21.4</td><td>6</td><td>0</td></tr><tr><td>18.7</td><td>8</td><td>0</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (5, 3)\n",
       "┌──────┬─────┬─────┐\n",
       "│ mpg  ┆ cyl ┆ am  │\n",
       "│ ---  ┆ --- ┆ --- │\n",
       "│ f64  ┆ i64 ┆ i64 │\n",
       "╞══════╪═════╪═════╡\n",
       "│ 21.0 ┆ 6   ┆ 1   │\n",
       "│ 21.0 ┆ 6   ┆ 1   │\n",
       "│ 22.8 ┆ 4   ┆ 1   │\n",
       "│ 21.4 ┆ 6   ┆ 0   │\n",
       "│ 18.7 ┆ 8   ┆ 0   │\n",
       "└──────┴─────┴─────┘"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mtcars_pl.select(['mpg', 'cyl', 'am']).head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Lọc dữ liệu theo dòng"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Với `polars`, ta có thể lọc các dòng đơn giản với list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (4, 12)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>mpg</th><th>cyl</th><th>disp</th><th>hp</th><th>drat</th><th>wt</th><th>qsec</th><th>vs</th><th>am</th><th>gear</th><th>carb</th></tr><tr><td>str</td><td>f64</td><td>i64</td><td>f64</td><td>i64</td><td>f64</td><td>f64</td><td>f64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Mazda RX4&quot;</td><td>21.0</td><td>6</td><td>160.0</td><td>110</td><td>3.9</td><td>2.62</td><td>16.46</td><td>0</td><td>1</td><td>4</td><td>4</td></tr><tr><td>&quot;Mazda RX4 Wag&quot;</td><td>21.0</td><td>6</td><td>160.0</td><td>110</td><td>3.9</td><td>2.875</td><td>17.02</td><td>0</td><td>1</td><td>4</td><td>4</td></tr><tr><td>&quot;Datsun 710&quot;</td><td>22.8</td><td>4</td><td>108.0</td><td>93</td><td>3.85</td><td>2.32</td><td>18.61</td><td>1</td><td>1</td><td>4</td><td>1</td></tr><tr><td>&quot;Hornet 4 Drive&quot;</td><td>21.4</td><td>6</td><td>258.0</td><td>110</td><td>3.08</td><td>3.215</td><td>19.44</td><td>1</td><td>0</td><td>3</td><td>1</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (4, 12)\n",
       "┌────────────────┬──────┬─────┬───────┬───┬─────┬─────┬──────┬──────┐\n",
       "│ name           ┆ mpg  ┆ cyl ┆ disp  ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │\n",
       "│ ---            ┆ ---  ┆ --- ┆ ---   ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │\n",
       "│ str            ┆ f64  ┆ i64 ┆ f64   ┆   ┆ i64 ┆ i64 ┆ i64  ┆ i64  │\n",
       "╞════════════════╪══════╪═════╪═══════╪═══╪═════╪═════╪══════╪══════╡\n",
       "│ Mazda RX4      ┆ 21.0 ┆ 6   ┆ 160.0 ┆ … ┆ 0   ┆ 1   ┆ 4    ┆ 4    │\n",
       "│ Mazda RX4 Wag  ┆ 21.0 ┆ 6   ┆ 160.0 ┆ … ┆ 0   ┆ 1   ┆ 4    ┆ 4    │\n",
       "│ Datsun 710     ┆ 22.8 ┆ 4   ┆ 108.0 ┆ … ┆ 1   ┆ 1   ┆ 4    ┆ 1    │\n",
       "│ Hornet 4 Drive ┆ 21.4 ┆ 6   ┆ 258.0 ┆ … ┆ 1   ┆ 0   ┆ 3    ┆ 1    │\n",
       "└────────────────┴──────┴─────┴───────┴───┴─────┴─────┴──────┴──────┘"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Lấy các dòng từ 1 đến 4\n",
    "mtcars_pl[0:4]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Lọc dữ liệu theo điều kiện"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`polars` sử dụng method `filter` để lọc điều kiện nhanh chóng"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (5, 12)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>mpg</th><th>cyl</th><th>disp</th><th>hp</th><th>drat</th><th>wt</th><th>qsec</th><th>vs</th><th>am</th><th>gear</th><th>carb</th></tr><tr><td>str</td><td>f64</td><td>i64</td><td>f64</td><td>i64</td><td>f64</td><td>f64</td><td>f64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Mazda RX4&quot;</td><td>21.0</td><td>6</td><td>160.0</td><td>110</td><td>3.9</td><td>2.62</td><td>16.46</td><td>0</td><td>1</td><td>4</td><td>4</td></tr><tr><td>&quot;Mazda RX4 Wag&quot;</td><td>21.0</td><td>6</td><td>160.0</td><td>110</td><td>3.9</td><td>2.875</td><td>17.02</td><td>0</td><td>1</td><td>4</td><td>4</td></tr><tr><td>&quot;Datsun 710&quot;</td><td>22.8</td><td>4</td><td>108.0</td><td>93</td><td>3.85</td><td>2.32</td><td>18.61</td><td>1</td><td>1</td><td>4</td><td>1</td></tr><tr><td>&quot;Hornet 4 Drive&quot;</td><td>21.4</td><td>6</td><td>258.0</td><td>110</td><td>3.08</td><td>3.215</td><td>19.44</td><td>1</td><td>0</td><td>3</td><td>1</td></tr><tr><td>&quot;Merc 240D&quot;</td><td>24.4</td><td>4</td><td>146.7</td><td>62</td><td>3.69</td><td>3.19</td><td>20.0</td><td>1</td><td>0</td><td>4</td><td>2</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (5, 12)\n",
       "┌────────────────┬──────┬─────┬───────┬───┬─────┬─────┬──────┬──────┐\n",
       "│ name           ┆ mpg  ┆ cyl ┆ disp  ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │\n",
       "│ ---            ┆ ---  ┆ --- ┆ ---   ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │\n",
       "│ str            ┆ f64  ┆ i64 ┆ f64   ┆   ┆ i64 ┆ i64 ┆ i64  ┆ i64  │\n",
       "╞════════════════╪══════╪═════╪═══════╪═══╪═════╪═════╪══════╪══════╡\n",
       "│ Mazda RX4      ┆ 21.0 ┆ 6   ┆ 160.0 ┆ … ┆ 0   ┆ 1   ┆ 4    ┆ 4    │\n",
       "│ Mazda RX4 Wag  ┆ 21.0 ┆ 6   ┆ 160.0 ┆ … ┆ 0   ┆ 1   ┆ 4    ┆ 4    │\n",
       "│ Datsun 710     ┆ 22.8 ┆ 4   ┆ 108.0 ┆ … ┆ 1   ┆ 1   ┆ 4    ┆ 1    │\n",
       "│ Hornet 4 Drive ┆ 21.4 ┆ 6   ┆ 258.0 ┆ … ┆ 1   ┆ 0   ┆ 3    ┆ 1    │\n",
       "│ Merc 240D      ┆ 24.4 ┆ 4   ┆ 146.7 ┆ … ┆ 1   ┆ 0   ┆ 4    ┆ 2    │\n",
       "└────────────────┴──────┴─────┴───────┴───┴─────┴─────┴──────┴──────┘"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Lọc mpg >= 20\n",
    "mtcars_pl.\\\n",
    "    filter(pl.col(\"mpg\") >= 20).\\\n",
    "    head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (5, 12)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>mpg</th><th>cyl</th><th>disp</th><th>hp</th><th>drat</th><th>wt</th><th>qsec</th><th>vs</th><th>am</th><th>gear</th><th>carb</th></tr><tr><td>str</td><td>f64</td><td>i64</td><td>f64</td><td>i64</td><td>f64</td><td>f64</td><td>f64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Datsun 710&quot;</td><td>22.8</td><td>4</td><td>108.0</td><td>93</td><td>3.85</td><td>2.32</td><td>18.61</td><td>1</td><td>1</td><td>4</td><td>1</td></tr><tr><td>&quot;Merc 240D&quot;</td><td>24.4</td><td>4</td><td>146.7</td><td>62</td><td>3.69</td><td>3.19</td><td>20.0</td><td>1</td><td>0</td><td>4</td><td>2</td></tr><tr><td>&quot;Merc 230&quot;</td><td>22.8</td><td>4</td><td>140.8</td><td>95</td><td>3.92</td><td>3.15</td><td>22.9</td><td>1</td><td>0</td><td>4</td><td>2</td></tr><tr><td>&quot;Fiat 128&quot;</td><td>32.4</td><td>4</td><td>78.7</td><td>66</td><td>4.08</td><td>2.2</td><td>19.47</td><td>1</td><td>1</td><td>4</td><td>1</td></tr><tr><td>&quot;Honda Civic&quot;</td><td>30.4</td><td>4</td><td>75.7</td><td>52</td><td>4.93</td><td>1.615</td><td>18.52</td><td>1</td><td>1</td><td>4</td><td>2</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (5, 12)\n",
       "┌─────────────┬──────┬─────┬───────┬───┬─────┬─────┬──────┬──────┐\n",
       "│ name        ┆ mpg  ┆ cyl ┆ disp  ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │\n",
       "│ ---         ┆ ---  ┆ --- ┆ ---   ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │\n",
       "│ str         ┆ f64  ┆ i64 ┆ f64   ┆   ┆ i64 ┆ i64 ┆ i64  ┆ i64  │\n",
       "╞═════════════╪══════╪═════╪═══════╪═══╪═════╪═════╪══════╪══════╡\n",
       "│ Datsun 710  ┆ 22.8 ┆ 4   ┆ 108.0 ┆ … ┆ 1   ┆ 1   ┆ 4    ┆ 1    │\n",
       "│ Merc 240D   ┆ 24.4 ┆ 4   ┆ 146.7 ┆ … ┆ 1   ┆ 0   ┆ 4    ┆ 2    │\n",
       "│ Merc 230    ┆ 22.8 ┆ 4   ┆ 140.8 ┆ … ┆ 1   ┆ 0   ┆ 4    ┆ 2    │\n",
       "│ Fiat 128    ┆ 32.4 ┆ 4   ┆ 78.7  ┆ … ┆ 1   ┆ 1   ┆ 4    ┆ 1    │\n",
       "│ Honda Civic ┆ 30.4 ┆ 4   ┆ 75.7  ┆ … ┆ 1   ┆ 1   ┆ 4    ┆ 2    │\n",
       "└─────────────┴──────┴─────┴───────┴───┴─────┴─────┴──────┴──────┘"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# mpg >= 20 & cyl = 4\n",
    "mtcars_pl.\\\n",
    "    filter((pl.col(\"mpg\") >= 20) & (pl.col(\"cyl\") == 4)).\\\n",
    "    head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ta cũng có thể viết theo pipe operator với nhiều điều kiện liên tiếp như sau"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (5, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>mpg</th><th>cyl</th></tr><tr><td>f64</td><td>i64</td></tr></thead><tbody><tr><td>22.8</td><td>4</td></tr><tr><td>24.4</td><td>4</td></tr><tr><td>22.8</td><td>4</td></tr><tr><td>32.4</td><td>4</td></tr><tr><td>30.4</td><td>4</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (5, 2)\n",
       "┌──────┬─────┐\n",
       "│ mpg  ┆ cyl │\n",
       "│ ---  ┆ --- │\n",
       "│ f64  ┆ i64 │\n",
       "╞══════╪═════╡\n",
       "│ 22.8 ┆ 4   │\n",
       "│ 24.4 ┆ 4   │\n",
       "│ 22.8 ┆ 4   │\n",
       "│ 32.4 ┆ 4   │\n",
       "│ 30.4 ┆ 4   │\n",
       "└──────┴─────┘"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Lấy thêm điều kiện cyl == 4\n",
    "mtcars_pl.\\\n",
    "    filter(pl.col(\"mpg\") >= 20).\\\n",
    "    filter(pl.col(\"cyl\") == 4).\\\n",
    "    select(pl.col([\"mpg\", \"cyl\"])).\\\n",
    "    head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Sắp xếp lại dữ liệu"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ta có thể sort lại dữ liệu với method `sort`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (5, 12)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>mpg</th><th>cyl</th><th>disp</th><th>hp</th><th>drat</th><th>wt</th><th>qsec</th><th>vs</th><th>am</th><th>gear</th><th>carb</th></tr><tr><td>str</td><td>f64</td><td>i64</td><td>f64</td><td>i64</td><td>f64</td><td>f64</td><td>f64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Cadillac Fleetwood&quot;</td><td>10.4</td><td>8</td><td>472.0</td><td>205</td><td>2.93</td><td>5.25</td><td>17.98</td><td>0</td><td>0</td><td>3</td><td>4</td></tr><tr><td>&quot;Lincoln Continental&quot;</td><td>10.4</td><td>8</td><td>460.0</td><td>215</td><td>3.0</td><td>5.424</td><td>17.82</td><td>0</td><td>0</td><td>3</td><td>4</td></tr><tr><td>&quot;Camaro Z28&quot;</td><td>13.3</td><td>8</td><td>350.0</td><td>245</td><td>3.73</td><td>3.84</td><td>15.41</td><td>0</td><td>0</td><td>3</td><td>4</td></tr><tr><td>&quot;Duster 360&quot;</td><td>14.3</td><td>8</td><td>360.0</td><td>245</td><td>3.21</td><td>3.57</td><td>15.84</td><td>0</td><td>0</td><td>3</td><td>4</td></tr><tr><td>&quot;Chrysler Imperial&quot;</td><td>14.7</td><td>8</td><td>440.0</td><td>230</td><td>3.23</td><td>5.345</td><td>17.42</td><td>0</td><td>0</td><td>3</td><td>4</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (5, 12)\n",
       "┌─────────────────────┬──────┬─────┬───────┬───┬─────┬─────┬──────┬──────┐\n",
       "│ name                ┆ mpg  ┆ cyl ┆ disp  ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │\n",
       "│ ---                 ┆ ---  ┆ --- ┆ ---   ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │\n",
       "│ str                 ┆ f64  ┆ i64 ┆ f64   ┆   ┆ i64 ┆ i64 ┆ i64  ┆ i64  │\n",
       "╞═════════════════════╪══════╪═════╪═══════╪═══╪═════╪═════╪══════╪══════╡\n",
       "│ Cadillac Fleetwood  ┆ 10.4 ┆ 8   ┆ 472.0 ┆ … ┆ 0   ┆ 0   ┆ 3    ┆ 4    │\n",
       "│ Lincoln Continental ┆ 10.4 ┆ 8   ┆ 460.0 ┆ … ┆ 0   ┆ 0   ┆ 3    ┆ 4    │\n",
       "│ Camaro Z28          ┆ 13.3 ┆ 8   ┆ 350.0 ┆ … ┆ 0   ┆ 0   ┆ 3    ┆ 4    │\n",
       "│ Duster 360          ┆ 14.3 ┆ 8   ┆ 360.0 ┆ … ┆ 0   ┆ 0   ┆ 3    ┆ 4    │\n",
       "│ Chrysler Imperial   ┆ 14.7 ┆ 8   ┆ 440.0 ┆ … ┆ 0   ┆ 0   ┆ 3    ┆ 4    │\n",
       "└─────────────────────┴──────┴─────┴───────┴───┴─────┴─────┴──────┴──────┘"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Lọc từ thấp đến cao\n",
    "mtcars_pl.sort('mpg').head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (5, 12)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>mpg</th><th>cyl</th><th>disp</th><th>hp</th><th>drat</th><th>wt</th><th>qsec</th><th>vs</th><th>am</th><th>gear</th><th>carb</th></tr><tr><td>str</td><td>f64</td><td>i64</td><td>f64</td><td>i64</td><td>f64</td><td>f64</td><td>f64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Toyota Corolla&quot;</td><td>33.9</td><td>4</td><td>71.1</td><td>65</td><td>4.22</td><td>1.835</td><td>19.9</td><td>1</td><td>1</td><td>4</td><td>1</td></tr><tr><td>&quot;Fiat 128&quot;</td><td>32.4</td><td>4</td><td>78.7</td><td>66</td><td>4.08</td><td>2.2</td><td>19.47</td><td>1</td><td>1</td><td>4</td><td>1</td></tr><tr><td>&quot;Honda Civic&quot;</td><td>30.4</td><td>4</td><td>75.7</td><td>52</td><td>4.93</td><td>1.615</td><td>18.52</td><td>1</td><td>1</td><td>4</td><td>2</td></tr><tr><td>&quot;Lotus Europa&quot;</td><td>30.4</td><td>4</td><td>95.1</td><td>113</td><td>3.77</td><td>1.513</td><td>16.9</td><td>1</td><td>1</td><td>5</td><td>2</td></tr><tr><td>&quot;Fiat X1-9&quot;</td><td>27.3</td><td>4</td><td>79.0</td><td>66</td><td>4.08</td><td>1.935</td><td>18.9</td><td>1</td><td>1</td><td>4</td><td>1</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (5, 12)\n",
       "┌────────────────┬──────┬─────┬──────┬───┬─────┬─────┬──────┬──────┐\n",
       "│ name           ┆ mpg  ┆ cyl ┆ disp ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │\n",
       "│ ---            ┆ ---  ┆ --- ┆ ---  ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │\n",
       "│ str            ┆ f64  ┆ i64 ┆ f64  ┆   ┆ i64 ┆ i64 ┆ i64  ┆ i64  │\n",
       "╞════════════════╪══════╪═════╪══════╪═══╪═════╪═════╪══════╪══════╡\n",
       "│ Toyota Corolla ┆ 33.9 ┆ 4   ┆ 71.1 ┆ … ┆ 1   ┆ 1   ┆ 4    ┆ 1    │\n",
       "│ Fiat 128       ┆ 32.4 ┆ 4   ┆ 78.7 ┆ … ┆ 1   ┆ 1   ┆ 4    ┆ 1    │\n",
       "│ Honda Civic    ┆ 30.4 ┆ 4   ┆ 75.7 ┆ … ┆ 1   ┆ 1   ┆ 4    ┆ 2    │\n",
       "│ Lotus Europa   ┆ 30.4 ┆ 4   ┆ 95.1 ┆ … ┆ 1   ┆ 1   ┆ 5    ┆ 2    │\n",
       "│ Fiat X1-9      ┆ 27.3 ┆ 4   ┆ 79.0 ┆ … ┆ 1   ┆ 1   ┆ 4    ┆ 1    │\n",
       "└────────────────┴──────┴─────┴──────┴───┴─────┴─────┴──────┴──────┘"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Lọc từ cao đến thấp\n",
    "mtcars_pl.sort('mpg', descending = True).head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Nhóm câu lệnh biến đổi dữ liệu"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Đổi tên biến\n",
    "\n",
    "**Cấu trúc**:\n",
    "`df.rename(columns = {old_var : new_var})`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (5, 12)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>mpg_new</th><th>cyl_new</th><th>disp</th><th>hp</th><th>drat</th><th>wt</th><th>qsec</th><th>vs</th><th>am</th><th>gear</th><th>carb</th></tr><tr><td>str</td><td>f64</td><td>i64</td><td>f64</td><td>i64</td><td>f64</td><td>f64</td><td>f64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Mazda RX4&quot;</td><td>21.0</td><td>6</td><td>160.0</td><td>110</td><td>3.9</td><td>2.62</td><td>16.46</td><td>0</td><td>1</td><td>4</td><td>4</td></tr><tr><td>&quot;Mazda RX4 Wag&quot;</td><td>21.0</td><td>6</td><td>160.0</td><td>110</td><td>3.9</td><td>2.875</td><td>17.02</td><td>0</td><td>1</td><td>4</td><td>4</td></tr><tr><td>&quot;Datsun 710&quot;</td><td>22.8</td><td>4</td><td>108.0</td><td>93</td><td>3.85</td><td>2.32</td><td>18.61</td><td>1</td><td>1</td><td>4</td><td>1</td></tr><tr><td>&quot;Hornet 4 Drive&quot;</td><td>21.4</td><td>6</td><td>258.0</td><td>110</td><td>3.08</td><td>3.215</td><td>19.44</td><td>1</td><td>0</td><td>3</td><td>1</td></tr><tr><td>&quot;Hornet Sportabout&quot;</td><td>18.7</td><td>8</td><td>360.0</td><td>175</td><td>3.15</td><td>3.44</td><td>17.02</td><td>0</td><td>0</td><td>3</td><td>2</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (5, 12)\n",
       "┌───────────────────┬─────────┬─────────┬───────┬───┬─────┬─────┬──────┬──────┐\n",
       "│ name              ┆ mpg_new ┆ cyl_new ┆ disp  ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │\n",
       "│ ---               ┆ ---     ┆ ---     ┆ ---   ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │\n",
       "│ str               ┆ f64     ┆ i64     ┆ f64   ┆   ┆ i64 ┆ i64 ┆ i64  ┆ i64  │\n",
       "╞═══════════════════╪═════════╪═════════╪═══════╪═══╪═════╪═════╪══════╪══════╡\n",
       "│ Mazda RX4         ┆ 21.0    ┆ 6       ┆ 160.0 ┆ … ┆ 0   ┆ 1   ┆ 4    ┆ 4    │\n",
       "│ Mazda RX4 Wag     ┆ 21.0    ┆ 6       ┆ 160.0 ┆ … ┆ 0   ┆ 1   ┆ 4    ┆ 4    │\n",
       "│ Datsun 710        ┆ 22.8    ┆ 4       ┆ 108.0 ┆ … ┆ 1   ┆ 1   ┆ 4    ┆ 1    │\n",
       "│ Hornet 4 Drive    ┆ 21.4    ┆ 6       ┆ 258.0 ┆ … ┆ 1   ┆ 0   ┆ 3    ┆ 1    │\n",
       "│ Hornet Sportabout ┆ 18.7    ┆ 8       ┆ 360.0 ┆ … ┆ 0   ┆ 0   ┆ 3    ┆ 2    │\n",
       "└───────────────────┴─────────┴─────────┴───────┴───┴─────┴─────┴──────┴──────┘"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mtcars_pl.rename(\n",
    "    {\n",
    "        'mpg' : 'mpg_new',\n",
    "        'cyl' : 'cyl_new'\n",
    "    }).\\\n",
    "    head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tạo & xóa biến mới "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Với `polars`, cách thuận tiện nhất để biến đổi dữ liệu các biến trong dataframe là dùng `with_columns` \n",
    "method.\n",
    "\n",
    "Với `with_columns`, ta có thể tạo và biến đổi dữ liệu. Tên của biến mới được khai báo thông qua `alias` method hoặc có thể tạo trực tiếp biến"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (5, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>mpg</th><th>cyl</th><th>new_var</th></tr><tr><td>f64</td><td>i64</td><td>f64</td></tr></thead><tbody><tr><td>21.0</td><td>6</td><td>42.0</td></tr><tr><td>21.0</td><td>6</td><td>42.0</td></tr><tr><td>22.8</td><td>4</td><td>45.6</td></tr><tr><td>21.4</td><td>6</td><td>42.8</td></tr><tr><td>18.7</td><td>8</td><td>37.4</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (5, 3)\n",
       "┌──────┬─────┬─────────┐\n",
       "│ mpg  ┆ cyl ┆ new_var │\n",
       "│ ---  ┆ --- ┆ ---     │\n",
       "│ f64  ┆ i64 ┆ f64     │\n",
       "╞══════╪═════╪═════════╡\n",
       "│ 21.0 ┆ 6   ┆ 42.0    │\n",
       "│ 21.0 ┆ 6   ┆ 42.0    │\n",
       "│ 22.8 ┆ 4   ┆ 45.6    │\n",
       "│ 21.4 ┆ 6   ┆ 42.8    │\n",
       "│ 18.7 ┆ 8   ┆ 37.4    │\n",
       "└──────┴─────┴─────────┘"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Cách 1: Tạo biến mới với alias\n",
    "df = mtcars_pl.\\\n",
    "    select(['mpg', 'cyl']).\\\n",
    "    with_columns(\n",
    "        (pl.col(\"mpg\")*2).alias('new_var')\n",
    "    )\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (5, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>mpg</th><th>cyl</th><th>new_var</th></tr><tr><td>f64</td><td>i64</td><td>f64</td></tr></thead><tbody><tr><td>21.0</td><td>6</td><td>42.0</td></tr><tr><td>21.0</td><td>6</td><td>42.0</td></tr><tr><td>22.8</td><td>4</td><td>45.6</td></tr><tr><td>21.4</td><td>6</td><td>42.8</td></tr><tr><td>18.7</td><td>8</td><td>37.4</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (5, 3)\n",
       "┌──────┬─────┬─────────┐\n",
       "│ mpg  ┆ cyl ┆ new_var │\n",
       "│ ---  ┆ --- ┆ ---     │\n",
       "│ f64  ┆ i64 ┆ f64     │\n",
       "╞══════╪═════╪═════════╡\n",
       "│ 21.0 ┆ 6   ┆ 42.0    │\n",
       "│ 21.0 ┆ 6   ┆ 42.0    │\n",
       "│ 22.8 ┆ 4   ┆ 45.6    │\n",
       "│ 21.4 ┆ 6   ┆ 42.8    │\n",
       "│ 18.7 ┆ 8   ┆ 37.4    │\n",
       "└──────┴─────┴─────────┘"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Cách 2: Không dùng alias\n",
    "mtcars_pl.\\\n",
    "    select(['mpg', 'cyl']).\\\n",
    "    with_columns(\n",
    "        new_var = (pl.col(\"mpg\")*2)\n",
    "    ).\\\n",
    "    head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (5, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>mpg</th><th>cyl</th></tr><tr><td>f64</td><td>i64</td></tr></thead><tbody><tr><td>21.0</td><td>6</td></tr><tr><td>21.0</td><td>6</td></tr><tr><td>22.8</td><td>4</td></tr><tr><td>21.4</td><td>6</td></tr><tr><td>18.7</td><td>8</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (5, 2)\n",
       "┌──────┬─────┐\n",
       "│ mpg  ┆ cyl │\n",
       "│ ---  ┆ --- │\n",
       "│ f64  ┆ i64 │\n",
       "╞══════╪═════╡\n",
       "│ 21.0 ┆ 6   │\n",
       "│ 21.0 ┆ 6   │\n",
       "│ 22.8 ┆ 4   │\n",
       "│ 21.4 ┆ 6   │\n",
       "│ 18.7 ┆ 8   │\n",
       "└──────┴─────┘"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Drop biến new_var\n",
    "df.drop('new_var').head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tạo biến mới theo nhóm\n",
    "\n",
    "**Lưu ý**: `polars` có sẵn rất nhiều methods cho phép tính toán & tổng hợp dữ liệu có sẵn mà không cần phải chuyển qua các thư viện khác như numpy hay pandas.\n",
    "\n",
    "Ta có thể tạo biến mới theo nhóm bằng cách kết hợp giữa `with_columns` và `over` như sau\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (32, 14)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>mpg</th><th>cyl</th><th>disp</th><th>hp</th><th>drat</th><th>wt</th><th>qsec</th><th>vs</th><th>am</th><th>gear</th><th>carb</th><th>sum_mpg</th><th>q75</th></tr><tr><td>str</td><td>f64</td><td>i64</td><td>f64</td><td>i64</td><td>f64</td><td>f64</td><td>f64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>&quot;Mazda RX4&quot;</td><td>21.0</td><td>6</td><td>160.0</td><td>110</td><td>3.9</td><td>2.62</td><td>16.46</td><td>0</td><td>1</td><td>4</td><td>4</td><td>138.2</td><td>21.0</td></tr><tr><td>&quot;Mazda RX4 Wag&quot;</td><td>21.0</td><td>6</td><td>160.0</td><td>110</td><td>3.9</td><td>2.875</td><td>17.02</td><td>0</td><td>1</td><td>4</td><td>4</td><td>138.2</td><td>21.0</td></tr><tr><td>&quot;Datsun 710&quot;</td><td>22.8</td><td>4</td><td>108.0</td><td>93</td><td>3.85</td><td>2.32</td><td>18.61</td><td>1</td><td>1</td><td>4</td><td>1</td><td>293.3</td><td>30.4</td></tr><tr><td>&quot;Hornet 4 Drive&quot;</td><td>21.4</td><td>6</td><td>258.0</td><td>110</td><td>3.08</td><td>3.215</td><td>19.44</td><td>1</td><td>0</td><td>3</td><td>1</td><td>138.2</td><td>21.0</td></tr><tr><td>&quot;Hornet Sportabout&quot;</td><td>18.7</td><td>8</td><td>360.0</td><td>175</td><td>3.15</td><td>3.44</td><td>17.02</td><td>0</td><td>0</td><td>3</td><td>2</td><td>211.4</td><td>16.4</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>&quot;Lotus Europa&quot;</td><td>30.4</td><td>4</td><td>95.1</td><td>113</td><td>3.77</td><td>1.513</td><td>16.9</td><td>1</td><td>1</td><td>5</td><td>2</td><td>293.3</td><td>30.4</td></tr><tr><td>&quot;Ford Pantera L&quot;</td><td>15.8</td><td>8</td><td>351.0</td><td>264</td><td>4.22</td><td>3.17</td><td>14.5</td><td>0</td><td>1</td><td>5</td><td>4</td><td>211.4</td><td>16.4</td></tr><tr><td>&quot;Ferrari Dino&quot;</td><td>19.7</td><td>6</td><td>145.0</td><td>175</td><td>3.62</td><td>2.77</td><td>15.5</td><td>0</td><td>1</td><td>5</td><td>6</td><td>138.2</td><td>21.0</td></tr><tr><td>&quot;Maserati Bora&quot;</td><td>15.0</td><td>8</td><td>301.0</td><td>335</td><td>3.54</td><td>3.57</td><td>14.6</td><td>0</td><td>1</td><td>5</td><td>8</td><td>211.4</td><td>16.4</td></tr><tr><td>&quot;Volvo 142E&quot;</td><td>21.4</td><td>4</td><td>121.0</td><td>109</td><td>4.11</td><td>2.78</td><td>18.6</td><td>1</td><td>1</td><td>4</td><td>2</td><td>293.3</td><td>30.4</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (32, 14)\n",
       "┌───────────────────┬──────┬─────┬───────┬───┬──────┬──────┬─────────┬──────┐\n",
       "│ name              ┆ mpg  ┆ cyl ┆ disp  ┆ … ┆ gear ┆ carb ┆ sum_mpg ┆ q75  │\n",
       "│ ---               ┆ ---  ┆ --- ┆ ---   ┆   ┆ ---  ┆ ---  ┆ ---     ┆ ---  │\n",
       "│ str               ┆ f64  ┆ i64 ┆ f64   ┆   ┆ i64  ┆ i64  ┆ f64     ┆ f64  │\n",
       "╞═══════════════════╪══════╪═════╪═══════╪═══╪══════╪══════╪═════════╪══════╡\n",
       "│ Mazda RX4         ┆ 21.0 ┆ 6   ┆ 160.0 ┆ … ┆ 4    ┆ 4    ┆ 138.2   ┆ 21.0 │\n",
       "│ Mazda RX4 Wag     ┆ 21.0 ┆ 6   ┆ 160.0 ┆ … ┆ 4    ┆ 4    ┆ 138.2   ┆ 21.0 │\n",
       "│ Datsun 710        ┆ 22.8 ┆ 4   ┆ 108.0 ┆ … ┆ 4    ┆ 1    ┆ 293.3   ┆ 30.4 │\n",
       "│ Hornet 4 Drive    ┆ 21.4 ┆ 6   ┆ 258.0 ┆ … ┆ 3    ┆ 1    ┆ 138.2   ┆ 21.0 │\n",
       "│ Hornet Sportabout ┆ 18.7 ┆ 8   ┆ 360.0 ┆ … ┆ 3    ┆ 2    ┆ 211.4   ┆ 16.4 │\n",
       "│ …                 ┆ …    ┆ …   ┆ …     ┆ … ┆ …    ┆ …    ┆ …       ┆ …    │\n",
       "│ Lotus Europa      ┆ 30.4 ┆ 4   ┆ 95.1  ┆ … ┆ 5    ┆ 2    ┆ 293.3   ┆ 30.4 │\n",
       "│ Ford Pantera L    ┆ 15.8 ┆ 8   ┆ 351.0 ┆ … ┆ 5    ┆ 4    ┆ 211.4   ┆ 16.4 │\n",
       "│ Ferrari Dino      ┆ 19.7 ┆ 6   ┆ 145.0 ┆ … ┆ 5    ┆ 6    ┆ 138.2   ┆ 21.0 │\n",
       "│ Maserati Bora     ┆ 15.0 ┆ 8   ┆ 301.0 ┆ … ┆ 5    ┆ 8    ┆ 211.4   ┆ 16.4 │\n",
       "│ Volvo 142E        ┆ 21.4 ┆ 4   ┆ 121.0 ┆ … ┆ 4    ┆ 2    ┆ 293.3   ┆ 30.4 │\n",
       "└───────────────────┴──────┴─────┴───────┴───┴──────┴──────┴─────────┴──────┘"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mtcars_pl.\\\n",
    "    with_columns(\n",
    "         # Tổng mpg\n",
    "         pl.col(\"mpg\").sum().over(\"cyl\").alias(\"sum_mpg\"),\n",
    "         # Quantile 0.75 của mpg\n",
    "         pl.col(\"mpg\").quantile(0.75).over(\"cyl\").alias(\"q75\")\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Join\n",
    "\n",
    "Tương tự như pandas, join trong polars có thể dùng hàm `join`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape: (4, 2)\n",
      "┌──────────┬─────────────┐\n",
      "│ employee ┆ group       │\n",
      "│ ---      ┆ ---         │\n",
      "│ str      ┆ str         │\n",
      "╞══════════╪═════════════╡\n",
      "│ Bob      ┆ Accounting  │\n",
      "│ Jake     ┆ Engineering │\n",
      "│ Lisa     ┆ Engineering │\n",
      "│ Sue      ┆ HR          │\n",
      "└──────────┴─────────────┘\n",
      "shape: (3, 2)\n",
      "┌──────────┬───────────┐\n",
      "│ employee ┆ hire_date │\n",
      "│ ---      ┆ ---       │\n",
      "│ str      ┆ i64       │\n",
      "╞══════════╪═══════════╡\n",
      "│ Lisa     ┆ 2004      │\n",
      "│ Bob      ┆ 2008      │\n",
      "│ Jake     ┆ 2012      │\n",
      "└──────────┴───────────┘\n"
     ]
    }
   ],
   "source": [
    "df1 = pl.DataFrame({'employee': ['Bob', 'Jake', 'Lisa', 'Sue'],\n",
    "                    'group': ['Accounting', 'Engineering', 'Engineering', 'HR']})\n",
    "df2 = pl.DataFrame({'employee': ['Lisa', 'Bob', 'Jake'],\n",
    "                    'hire_date': [2004, 2008, 2012]})\n",
    "print(df1); print(df2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (3, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>employee</th><th>group</th><th>hire_date</th></tr><tr><td>str</td><td>str</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Bob&quot;</td><td>&quot;Accounting&quot;</td><td>2008</td></tr><tr><td>&quot;Jake&quot;</td><td>&quot;Engineering&quot;</td><td>2012</td></tr><tr><td>&quot;Lisa&quot;</td><td>&quot;Engineering&quot;</td><td>2004</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (3, 3)\n",
       "┌──────────┬─────────────┬───────────┐\n",
       "│ employee ┆ group       ┆ hire_date │\n",
       "│ ---      ┆ ---         ┆ ---       │\n",
       "│ str      ┆ str         ┆ i64       │\n",
       "╞══════════╪═════════════╪═══════════╡\n",
       "│ Bob      ┆ Accounting  ┆ 2008      │\n",
       "│ Jake     ┆ Engineering ┆ 2012      │\n",
       "│ Lisa     ┆ Engineering ┆ 2004      │\n",
       "└──────────┴─────────────┴───────────┘"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.join(df2, on = \"employee\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Lưu ý**: Khi dùng `join`, ` polars`sẽ tự động bỏ các trường không chứa trong cả 2 bảng. Nếu muốn chuyển thành `left_join`, cần thêm option `how`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (4, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>employee</th><th>group</th><th>hire_date</th></tr><tr><td>str</td><td>str</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Bob&quot;</td><td>&quot;Accounting&quot;</td><td>2008</td></tr><tr><td>&quot;Jake&quot;</td><td>&quot;Engineering&quot;</td><td>2012</td></tr><tr><td>&quot;Lisa&quot;</td><td>&quot;Engineering&quot;</td><td>2004</td></tr><tr><td>&quot;Sue&quot;</td><td>&quot;HR&quot;</td><td>null</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (4, 3)\n",
       "┌──────────┬─────────────┬───────────┐\n",
       "│ employee ┆ group       ┆ hire_date │\n",
       "│ ---      ┆ ---         ┆ ---       │\n",
       "│ str      ┆ str         ┆ i64       │\n",
       "╞══════════╪═════════════╪═══════════╡\n",
       "│ Bob      ┆ Accounting  ┆ 2008      │\n",
       "│ Jake     ┆ Engineering ┆ 2012      │\n",
       "│ Lisa     ┆ Engineering ┆ 2004      │\n",
       "│ Sue      ┆ HR          ┆ null      │\n",
       "└──────────┴─────────────┴───────────┘"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.join(df2, on = \"employee\", how = \"left\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (1, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>employee</th><th>group</th></tr><tr><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;Sue&quot;</td><td>&quot;HR&quot;</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (1, 2)\n",
       "┌──────────┬───────┐\n",
       "│ employee ┆ group │\n",
       "│ ---      ┆ ---   │\n",
       "│ str      ┆ str   │\n",
       "╞══════════╪═══════╡\n",
       "│ Sue      ┆ HR    │\n",
       "└──────────┴───────┘"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Lấy các trưởng không ở cả 2 bảng\n",
    "df1.join(df2, on = \"employee\", how = 'anti')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "Với trường hợp bảng dữ liệu khác key, ta cần lựa chọn các biến ở bảng"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape: (4, 2)\n",
      "┌──────────┬─────────────┐\n",
      "│ employee ┆ group       │\n",
      "│ ---      ┆ ---         │\n",
      "│ str      ┆ str         │\n",
      "╞══════════╪═════════════╡\n",
      "│ Bob      ┆ Accounting  │\n",
      "│ Jake     ┆ Engineering │\n",
      "│ Lisa     ┆ Engineering │\n",
      "│ Sue      ┆ HR          │\n",
      "└──────────┴─────────────┘\n",
      "shape: (4, 2)\n",
      "┌──────┬────────┐\n",
      "│ name ┆ salary │\n",
      "│ ---  ┆ ---    │\n",
      "│ str  ┆ i64    │\n",
      "╞══════╪════════╡\n",
      "│ Bob  ┆ 70000  │\n",
      "│ Jake ┆ 80000  │\n",
      "│ Lisa ┆ 120000 │\n",
      "│ Sue  ┆ 90000  │\n",
      "└──────┴────────┘\n"
     ]
    }
   ],
   "source": [
    "df3 = pl.DataFrame({'name': ['Bob', 'Jake', 'Lisa', 'Sue'],\n",
    "                    'salary': [70000, 80000, 120000, 90000]})\n",
    "print(df1); print(df3);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (4, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>employee</th><th>group</th><th>salary</th></tr><tr><td>str</td><td>str</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Bob&quot;</td><td>&quot;Accounting&quot;</td><td>70000</td></tr><tr><td>&quot;Jake&quot;</td><td>&quot;Engineering&quot;</td><td>80000</td></tr><tr><td>&quot;Lisa&quot;</td><td>&quot;Engineering&quot;</td><td>120000</td></tr><tr><td>&quot;Sue&quot;</td><td>&quot;HR&quot;</td><td>90000</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (4, 3)\n",
       "┌──────────┬─────────────┬────────┐\n",
       "│ employee ┆ group       ┆ salary │\n",
       "│ ---      ┆ ---         ┆ ---    │\n",
       "│ str      ┆ str         ┆ i64    │\n",
       "╞══════════╪═════════════╪════════╡\n",
       "│ Bob      ┆ Accounting  ┆ 70000  │\n",
       "│ Jake     ┆ Engineering ┆ 80000  │\n",
       "│ Lisa     ┆ Engineering ┆ 120000 │\n",
       "│ Sue      ┆ HR          ┆ 90000  │\n",
       "└──────────┴─────────────┴────────┘"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.join(df3, left_on = 'employee', right_on = 'name')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Ghép dữ liệu"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Với pandas, cấu trúc của DataFrame được chia thành hàng và cột. Do đó, cả 2 trường hợp ghép dòng và ghép cột, ta có thể dùng hàm `concat` tương tự như `pandas`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Ghép dòng"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape: (3, 2)\n",
      "┌─────┬─────┐\n",
      "│ a   ┆ b   │\n",
      "│ --- ┆ --- │\n",
      "│ i64 ┆ i64 │\n",
      "╞═════╪═════╡\n",
      "│ 4   ┆ 7   │\n",
      "│ 5   ┆ 8   │\n",
      "│ 6   ┆ 9   │\n",
      "└─────┴─────┘\n",
      "shape: (2, 2)\n",
      "┌─────┬─────┐\n",
      "│ a   ┆ b   │\n",
      "│ --- ┆ --- │\n",
      "│ i64 ┆ i64 │\n",
      "╞═════╪═════╡\n",
      "│ 1   ┆ 8   │\n",
      "│ 2   ┆ 9   │\n",
      "└─────┴─────┘\n"
     ]
    }
   ],
   "source": [
    "df1 = pl.DataFrame(\n",
    "    {\n",
    "        \"a\" : [4 ,5, 6], \n",
    "        \"b\" : [7, 8, 9]\n",
    "    }\n",
    ")\n",
    "\n",
    "df2 = pl.DataFrame({\n",
    "    \"a\" : [1,2],\n",
    "    \"b\" : [8, 9]\n",
    "})\n",
    "print(df1); print(df2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (5, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>a</th><th>b</th></tr><tr><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>4</td><td>7</td></tr><tr><td>5</td><td>8</td></tr><tr><td>6</td><td>9</td></tr><tr><td>1</td><td>8</td></tr><tr><td>2</td><td>9</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (5, 2)\n",
       "┌─────┬─────┐\n",
       "│ a   ┆ b   │\n",
       "│ --- ┆ --- │\n",
       "│ i64 ┆ i64 │\n",
       "╞═════╪═════╡\n",
       "│ 4   ┆ 7   │\n",
       "│ 5   ┆ 8   │\n",
       "│ 6   ┆ 9   │\n",
       "│ 1   ┆ 8   │\n",
       "│ 2   ┆ 9   │\n",
       "└─────┴─────┘"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Ghép theo dòng\n",
    "pl.concat([df1, df2], how = \"vertical\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Ghép theo cột"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dữ liệu mới\n",
    "df3 = pl.DataFrame({\n",
    "    \"c\" : ['x', 'y', 'z']})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (3, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>a</th><th>b</th><th>c</th></tr><tr><td>i64</td><td>i64</td><td>str</td></tr></thead><tbody><tr><td>4</td><td>7</td><td>&quot;x&quot;</td></tr><tr><td>5</td><td>8</td><td>&quot;y&quot;</td></tr><tr><td>6</td><td>9</td><td>&quot;z&quot;</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (3, 3)\n",
       "┌─────┬─────┬─────┐\n",
       "│ a   ┆ b   ┆ c   │\n",
       "│ --- ┆ --- ┆ --- │\n",
       "│ i64 ┆ i64 ┆ str │\n",
       "╞═════╪═════╪═════╡\n",
       "│ 4   ┆ 7   ┆ x   │\n",
       "│ 5   ┆ 8   ┆ y   │\n",
       "│ 6   ┆ 9   ┆ z   │\n",
       "└─────┴─────┴─────┘"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pl.concat([df1, df3], how = \"horizontal\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Tổng hợp dữ liệu"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### groupby & aggregate"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`polars` cho phép sử dụng nhiều cách linh hoạt để tổng hợp dữ liệu nhanh chóng với `agg` method kết hợp với `groupby` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (9, 13)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>statistic</th><th>name</th><th>mpg</th><th>cyl</th><th>disp</th><th>hp</th><th>drat</th><th>wt</th><th>qsec</th><th>vs</th><th>am</th><th>gear</th><th>carb</th></tr><tr><td>str</td><td>str</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>&quot;count&quot;</td><td>&quot;32&quot;</td><td>32.0</td><td>32.0</td><td>32.0</td><td>32.0</td><td>32.0</td><td>32.0</td><td>32.0</td><td>32.0</td><td>32.0</td><td>32.0</td><td>32.0</td></tr><tr><td>&quot;null_count&quot;</td><td>&quot;0&quot;</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td></tr><tr><td>&quot;mean&quot;</td><td>null</td><td>20.090625</td><td>6.1875</td><td>230.721875</td><td>146.6875</td><td>3.5965625</td><td>3.21725</td><td>17.84875</td><td>0.4375</td><td>0.40625</td><td>3.6875</td><td>2.8125</td></tr><tr><td>&quot;std&quot;</td><td>null</td><td>6.026948</td><td>1.785922</td><td>123.938694</td><td>68.562868</td><td>0.534679</td><td>0.978457</td><td>1.786943</td><td>0.504016</td><td>0.498991</td><td>0.737804</td><td>1.6152</td></tr><tr><td>&quot;min&quot;</td><td>&quot;AMC Javelin&quot;</td><td>10.4</td><td>4.0</td><td>71.1</td><td>52.0</td><td>2.76</td><td>1.513</td><td>14.5</td><td>0.0</td><td>0.0</td><td>3.0</td><td>1.0</td></tr><tr><td>&quot;25%&quot;</td><td>null</td><td>15.5</td><td>4.0</td><td>121.0</td><td>97.0</td><td>3.08</td><td>2.62</td><td>16.9</td><td>0.0</td><td>0.0</td><td>3.0</td><td>2.0</td></tr><tr><td>&quot;50%&quot;</td><td>null</td><td>19.2</td><td>6.0</td><td>225.0</td><td>123.0</td><td>3.7</td><td>3.435</td><td>17.82</td><td>0.0</td><td>0.0</td><td>4.0</td><td>2.0</td></tr><tr><td>&quot;75%&quot;</td><td>null</td><td>22.8</td><td>8.0</td><td>318.0</td><td>180.0</td><td>3.92</td><td>3.57</td><td>18.9</td><td>1.0</td><td>1.0</td><td>4.0</td><td>4.0</td></tr><tr><td>&quot;max&quot;</td><td>&quot;Volvo 142E&quot;</td><td>33.9</td><td>8.0</td><td>472.0</td><td>335.0</td><td>4.93</td><td>5.424</td><td>22.9</td><td>1.0</td><td>1.0</td><td>5.0</td><td>8.0</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (9, 13)\n",
       "┌────────────┬─────────────┬───────────┬──────────┬───┬──────────┬──────────┬──────────┬────────┐\n",
       "│ statistic  ┆ name        ┆ mpg       ┆ cyl      ┆ … ┆ vs       ┆ am       ┆ gear     ┆ carb   │\n",
       "│ ---        ┆ ---         ┆ ---       ┆ ---      ┆   ┆ ---      ┆ ---      ┆ ---      ┆ ---    │\n",
       "│ str        ┆ str         ┆ f64       ┆ f64      ┆   ┆ f64      ┆ f64      ┆ f64      ┆ f64    │\n",
       "╞════════════╪═════════════╪═══════════╪══════════╪═══╪══════════╪══════════╪══════════╪════════╡\n",
       "│ count      ┆ 32          ┆ 32.0      ┆ 32.0     ┆ … ┆ 32.0     ┆ 32.0     ┆ 32.0     ┆ 32.0   │\n",
       "│ null_count ┆ 0           ┆ 0.0       ┆ 0.0      ┆ … ┆ 0.0      ┆ 0.0      ┆ 0.0      ┆ 0.0    │\n",
       "│ mean       ┆ null        ┆ 20.090625 ┆ 6.1875   ┆ … ┆ 0.4375   ┆ 0.40625  ┆ 3.6875   ┆ 2.8125 │\n",
       "│ std        ┆ null        ┆ 6.026948  ┆ 1.785922 ┆ … ┆ 0.504016 ┆ 0.498991 ┆ 0.737804 ┆ 1.6152 │\n",
       "│ min        ┆ AMC Javelin ┆ 10.4      ┆ 4.0      ┆ … ┆ 0.0      ┆ 0.0      ┆ 3.0      ┆ 1.0    │\n",
       "│ 25%        ┆ null        ┆ 15.5      ┆ 4.0      ┆ … ┆ 0.0      ┆ 0.0      ┆ 3.0      ┆ 2.0    │\n",
       "│ 50%        ┆ null        ┆ 19.2      ┆ 6.0      ┆ … ┆ 0.0      ┆ 0.0      ┆ 4.0      ┆ 2.0    │\n",
       "│ 75%        ┆ null        ┆ 22.8      ┆ 8.0      ┆ … ┆ 1.0      ┆ 1.0      ┆ 4.0      ┆ 4.0    │\n",
       "│ max        ┆ Volvo 142E  ┆ 33.9      ┆ 8.0      ┆ … ┆ 1.0      ┆ 1.0      ┆ 5.0      ┆ 8.0    │\n",
       "└────────────┴─────────────┴───────────┴──────────┴───┴──────────┴──────────┴──────────┴────────┘"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Summary toàn bộ data.frame\n",
    "mtcars_pl.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "Khác với pandas cho phép rất linh hoạt, cách thức `polars`, tổng hợp dữ liệu rất nhất quán và đơn giản. Có 2 điểm khác biệt chính như sau:\n",
    "\n",
    "- `polars` sử dụng `alias` để tạo biến mới\n",
    "- Các hàm tính toán tổng hợp thông thường như `min`, `max`, `count`, `sum`, `mean`, `quantile`,... đều có thể sử dụng trực tiếp methods trong `polars`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Hoang Duc Anh\\AppData\\Local\\Temp\\ipykernel_15632\\312397274.py:3: DeprecationWarning: `groupby` is deprecated. It has been renamed to `group_by`.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (4, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>am</th><th>vs</th><th>mean_mpg</th><th>sum_wt</th></tr><tr><td>i64</td><td>i64</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>1</td><td>1</td><td>28.371429</td><td>14.198</td></tr><tr><td>1</td><td>0</td><td>19.75</td><td>17.145</td></tr><tr><td>0</td><td>1</td><td>20.742857</td><td>22.36</td></tr><tr><td>0</td><td>0</td><td>15.05</td><td>49.249</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (4, 4)\n",
       "┌─────┬─────┬───────────┬────────┐\n",
       "│ am  ┆ vs  ┆ mean_mpg  ┆ sum_wt │\n",
       "│ --- ┆ --- ┆ ---       ┆ ---    │\n",
       "│ i64 ┆ i64 ┆ f64       ┆ f64    │\n",
       "╞═════╪═════╪═══════════╪════════╡\n",
       "│ 1   ┆ 1   ┆ 28.371429 ┆ 14.198 │\n",
       "│ 1   ┆ 0   ┆ 19.75     ┆ 17.145 │\n",
       "│ 0   ┆ 1   ┆ 20.742857 ┆ 22.36  │\n",
       "│ 0   ┆ 0   ┆ 15.05     ┆ 49.249 │\n",
       "└─────┴─────┴───────────┴────────┘"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Summary theo nhóm với biến mpg\n",
    "mtcars_pl.\\\n",
    "    groupby(['am', 'vs']).\\\n",
    "    agg(\n",
    "        pl.col(\"mpg\").mean().alias(\"mean_mpg\"),\n",
    "        pl.col(\"wt\").sum().alias(\"sum_wt\")\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Bên cạnh đó, `polars` còn cho phép tổng hợp rất linh hoạt theo điều kiện. Quay trở lại ví dụ trên, ta có thể đặt ra yêu cầu như sau:\n",
    "\n",
    "- Nhóm biến theo `am` và `vs`\n",
    "- Tính tổng `mpg` với `cyl = 4`\n",
    "- Tính giá trị trung bình `mpg` với `cyl = 6`\n",
    "\n",
    "Ta có thể thực hiện như sau"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (4, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>am</th><th>vs</th><th>sum_mpg</th><th>mean_wt</th></tr><tr><td>i64</td><td>i64</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>0</td><td>0</td><td>0.0</td><td>null</td></tr><tr><td>1</td><td>0</td><td>26.0</td><td>2.755</td></tr><tr><td>1</td><td>1</td><td>198.6</td><td>null</td></tr><tr><td>0</td><td>1</td><td>68.7</td><td>3.38875</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (4, 4)\n",
       "┌─────┬─────┬─────────┬─────────┐\n",
       "│ am  ┆ vs  ┆ sum_mpg ┆ mean_wt │\n",
       "│ --- ┆ --- ┆ ---     ┆ ---     │\n",
       "│ i64 ┆ i64 ┆ f64     ┆ f64     │\n",
       "╞═════╪═════╪═════════╪═════════╡\n",
       "│ 0   ┆ 0   ┆ 0.0     ┆ null    │\n",
       "│ 1   ┆ 0   ┆ 26.0    ┆ 2.755   │\n",
       "│ 1   ┆ 1   ┆ 198.6   ┆ null    │\n",
       "│ 0   ┆ 1   ┆ 68.7    ┆ 3.38875 │\n",
       "└─────┴─────┴─────────┴─────────┘"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mtcars_pl.\\\n",
    "    group_by(['am', 'vs']).\\\n",
    "    agg(\n",
    "        pl.col(\"mpg\").filter(pl.col(\"cyl\") == 4).sum().alias(\"sum_mpg\"),\n",
    "        pl.col(\"wt\").filter(pl.col(\"cyl\") == 6).mean().alias(\"mean_wt\")\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Các hàm nâng cao"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### select_dtype"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`polars` cho phép select cùng lúc các biến cùng thuộc một kiểu dữ liệu. Xem ví dụ dưới đây:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Int64, String, Int64, Float64]"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pl.DataFrame({\n",
    "    'x': [1, 2, 3],\n",
    "    'y' : ['a', 'b', 'c'],\n",
    "    'z' : [4, 5, 6],\n",
    "    't' : [0.5, 6.2, 7.8]\n",
    "})\n",
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (3, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>x</th><th>z</th><th>t</th></tr><tr><td>i64</td><td>i64</td><td>f64</td></tr></thead><tbody><tr><td>1</td><td>4</td><td>0.5</td></tr><tr><td>2</td><td>5</td><td>6.2</td></tr><tr><td>3</td><td>6</td><td>7.8</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (3, 3)\n",
       "┌─────┬─────┬─────┐\n",
       "│ x   ┆ z   ┆ t   │\n",
       "│ --- ┆ --- ┆ --- │\n",
       "│ i64 ┆ i64 ┆ f64 │\n",
       "╞═════╪═════╪═════╡\n",
       "│ 1   ┆ 4   ┆ 0.5 │\n",
       "│ 2   ┆ 5   ┆ 6.2 │\n",
       "│ 3   ┆ 6   ┆ 7.8 │\n",
       "└─────┴─────┴─────┘"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Chọn các biến là biến số dạng integer\n",
    "df.select(pl.col(pl.Int64, pl.Float64))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ta có thể sử dụng `selectors` để có thể sử dụng linh hoạt hơn như sau"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (3, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>x</th><th>z</th><th>t</th></tr><tr><td>i64</td><td>i64</td><td>f64</td></tr></thead><tbody><tr><td>1</td><td>4</td><td>0.5</td></tr><tr><td>2</td><td>5</td><td>6.2</td></tr><tr><td>3</td><td>6</td><td>7.8</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (3, 3)\n",
       "┌─────┬─────┬─────┐\n",
       "│ x   ┆ z   ┆ t   │\n",
       "│ --- ┆ --- ┆ --- │\n",
       "│ i64 ┆ i64 ┆ f64 │\n",
       "╞═════╪═════╪═════╡\n",
       "│ 1   ┆ 4   ┆ 0.5 │\n",
       "│ 2   ┆ 5   ┆ 6.2 │\n",
       "│ 3   ┆ 6   ┆ 7.8 │\n",
       "└─────┴─────┴─────┘"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import polars.selectors as cs\n",
    "# Chọn tất cả biến số\n",
    "df.select(cs.numeric())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Xoay chiều dữ liệu"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Tương tự pandas, `polars` cho phép xoay chiều dữ liệu từ ngang sang dọc và dọc sang ngang với 2 hàm:\n",
    "\n",
    "-  `melt`\n",
    "- `long_to_wide`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_df = pl.DataFrame({\n",
    "    'id' : [1,2,3],\n",
    "    'var1' : [3,4,5],\n",
    "    'var2' : ['a', 'a', 'b'],\n",
    "    'var3' : ['x', 'y', 'z']\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (3, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>id</th><th>var1</th><th>var2</th><th>var3</th></tr><tr><td>i64</td><td>i64</td><td>str</td><td>str</td></tr></thead><tbody><tr><td>1</td><td>3</td><td>&quot;a&quot;</td><td>&quot;x&quot;</td></tr><tr><td>2</td><td>4</td><td>&quot;a&quot;</td><td>&quot;y&quot;</td></tr><tr><td>3</td><td>5</td><td>&quot;b&quot;</td><td>&quot;z&quot;</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (3, 4)\n",
       "┌─────┬──────┬──────┬──────┐\n",
       "│ id  ┆ var1 ┆ var2 ┆ var3 │\n",
       "│ --- ┆ ---  ┆ ---  ┆ ---  │\n",
       "│ i64 ┆ i64  ┆ str  ┆ str  │\n",
       "╞═════╪══════╪══════╪══════╡\n",
       "│ 1   ┆ 3    ┆ a    ┆ x    │\n",
       "│ 2   ┆ 4    ┆ a    ┆ y    │\n",
       "│ 3   ┆ 5    ┆ b    ┆ z    │\n",
       "└─────┴──────┴──────┴──────┘"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (9, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>id</th><th>variable</th><th>value</th></tr><tr><td>i64</td><td>str</td><td>str</td></tr></thead><tbody><tr><td>1</td><td>&quot;var1&quot;</td><td>&quot;3&quot;</td></tr><tr><td>2</td><td>&quot;var1&quot;</td><td>&quot;4&quot;</td></tr><tr><td>3</td><td>&quot;var1&quot;</td><td>&quot;5&quot;</td></tr><tr><td>1</td><td>&quot;var2&quot;</td><td>&quot;a&quot;</td></tr><tr><td>2</td><td>&quot;var2&quot;</td><td>&quot;a&quot;</td></tr><tr><td>3</td><td>&quot;var2&quot;</td><td>&quot;b&quot;</td></tr><tr><td>1</td><td>&quot;var3&quot;</td><td>&quot;x&quot;</td></tr><tr><td>2</td><td>&quot;var3&quot;</td><td>&quot;y&quot;</td></tr><tr><td>3</td><td>&quot;var3&quot;</td><td>&quot;z&quot;</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (9, 3)\n",
       "┌─────┬──────────┬───────┐\n",
       "│ id  ┆ variable ┆ value │\n",
       "│ --- ┆ ---      ┆ ---   │\n",
       "│ i64 ┆ str      ┆ str   │\n",
       "╞═════╪══════════╪═══════╡\n",
       "│ 1   ┆ var1     ┆ 3     │\n",
       "│ 2   ┆ var1     ┆ 4     │\n",
       "│ 3   ┆ var1     ┆ 5     │\n",
       "│ 1   ┆ var2     ┆ a     │\n",
       "│ 2   ┆ var2     ┆ a     │\n",
       "│ 3   ┆ var2     ┆ b     │\n",
       "│ 1   ┆ var3     ┆ x     │\n",
       "│ 2   ┆ var3     ┆ y     │\n",
       "│ 3   ┆ var3     ┆ z     │\n",
       "└─────┴──────────┴───────┘"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_df.melt(id_vars = \"id\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (6, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>id</th><th>var1</th><th>variable</th><th>value</th></tr><tr><td>i64</td><td>i64</td><td>str</td><td>str</td></tr></thead><tbody><tr><td>1</td><td>3</td><td>&quot;var2&quot;</td><td>&quot;a&quot;</td></tr><tr><td>2</td><td>4</td><td>&quot;var2&quot;</td><td>&quot;a&quot;</td></tr><tr><td>3</td><td>5</td><td>&quot;var2&quot;</td><td>&quot;b&quot;</td></tr><tr><td>1</td><td>3</td><td>&quot;var3&quot;</td><td>&quot;x&quot;</td></tr><tr><td>2</td><td>4</td><td>&quot;var3&quot;</td><td>&quot;y&quot;</td></tr><tr><td>3</td><td>5</td><td>&quot;var3&quot;</td><td>&quot;z&quot;</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (6, 4)\n",
       "┌─────┬──────┬──────────┬───────┐\n",
       "│ id  ┆ var1 ┆ variable ┆ value │\n",
       "│ --- ┆ ---  ┆ ---      ┆ ---   │\n",
       "│ i64 ┆ i64  ┆ str      ┆ str   │\n",
       "╞═════╪══════╪══════════╪═══════╡\n",
       "│ 1   ┆ 3    ┆ var2     ┆ a     │\n",
       "│ 2   ┆ 4    ┆ var2     ┆ a     │\n",
       "│ 3   ┆ 5    ┆ var2     ┆ b     │\n",
       "│ 1   ┆ 3    ┆ var3     ┆ x     │\n",
       "│ 2   ┆ 4    ┆ var3     ┆ y     │\n",
       "│ 3   ┆ 5    ┆ var3     ┆ z     │\n",
       "└─────┴──────┴──────────┴───────┘"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# melt nhiều biến\n",
    "my_df.melt(['id', 'var1'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "Xoay chiều từ dọc sang ngang"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (9, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>id</th><th>variable</th><th>value</th></tr><tr><td>i64</td><td>str</td><td>str</td></tr></thead><tbody><tr><td>1</td><td>&quot;var1&quot;</td><td>&quot;3&quot;</td></tr><tr><td>2</td><td>&quot;var1&quot;</td><td>&quot;4&quot;</td></tr><tr><td>3</td><td>&quot;var1&quot;</td><td>&quot;5&quot;</td></tr><tr><td>1</td><td>&quot;var2&quot;</td><td>&quot;a&quot;</td></tr><tr><td>2</td><td>&quot;var2&quot;</td><td>&quot;a&quot;</td></tr><tr><td>3</td><td>&quot;var2&quot;</td><td>&quot;b&quot;</td></tr><tr><td>1</td><td>&quot;var3&quot;</td><td>&quot;x&quot;</td></tr><tr><td>2</td><td>&quot;var3&quot;</td><td>&quot;y&quot;</td></tr><tr><td>3</td><td>&quot;var3&quot;</td><td>&quot;z&quot;</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (9, 3)\n",
       "┌─────┬──────────┬───────┐\n",
       "│ id  ┆ variable ┆ value │\n",
       "│ --- ┆ ---      ┆ ---   │\n",
       "│ i64 ┆ str      ┆ str   │\n",
       "╞═════╪══════════╪═══════╡\n",
       "│ 1   ┆ var1     ┆ 3     │\n",
       "│ 2   ┆ var1     ┆ 4     │\n",
       "│ 3   ┆ var1     ┆ 5     │\n",
       "│ 1   ┆ var2     ┆ a     │\n",
       "│ 2   ┆ var2     ┆ a     │\n",
       "│ 3   ┆ var2     ┆ b     │\n",
       "│ 1   ┆ var3     ┆ x     │\n",
       "│ 2   ┆ var3     ┆ y     │\n",
       "│ 3   ┆ var3     ┆ z     │\n",
       "└─────┴──────────┴───────┘"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2 = my_df.melt('id')\n",
    "df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (3, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>id</th><th>var1</th><th>var2</th><th>var3</th></tr><tr><td>i64</td><td>str</td><td>str</td><td>str</td></tr></thead><tbody><tr><td>1</td><td>&quot;3&quot;</td><td>&quot;a&quot;</td><td>&quot;x&quot;</td></tr><tr><td>2</td><td>&quot;4&quot;</td><td>&quot;a&quot;</td><td>&quot;y&quot;</td></tr><tr><td>3</td><td>&quot;5&quot;</td><td>&quot;b&quot;</td><td>&quot;z&quot;</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (3, 4)\n",
       "┌─────┬──────┬──────┬──────┐\n",
       "│ id  ┆ var1 ┆ var2 ┆ var3 │\n",
       "│ --- ┆ ---  ┆ ---  ┆ ---  │\n",
       "│ i64 ┆ str  ┆ str  ┆ str  │\n",
       "╞═════╪══════╪══════╪══════╡\n",
       "│ 1   ┆ 3    ┆ a    ┆ x    │\n",
       "│ 2   ┆ 4    ┆ a    ┆ y    │\n",
       "│ 3   ┆ 5    ┆ b    ┆ z    │\n",
       "└─────┴──────┴──────┴──────┘"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.pivot(index = 'id', columns = 'variable', \n",
    "                values = 'value', aggregate_function = 'first')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Các hàm khác\n",
    "\n",
    "#### Lag"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (3, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>date</th><th>value</th></tr><tr><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>1</td><td>6</td></tr><tr><td>2</td><td>7</td></tr><tr><td>3</td><td>8</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (3, 2)\n",
       "┌──────┬───────┐\n",
       "│ date ┆ value │\n",
       "│ ---  ┆ ---   │\n",
       "│ i64  ┆ i64   │\n",
       "╞══════╪═══════╡\n",
       "│ 1    ┆ 6     │\n",
       "│ 2    ┆ 7     │\n",
       "│ 3    ┆ 8     │\n",
       "└──────┴───────┘"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pl.DataFrame({\n",
    "    'date' : [1,2,3],\n",
    "    'value' : [6,7,8]\n",
    "})\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (3, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>date</th><th>value</th><th>lag_1</th><th>lead_1</th></tr><tr><td>i64</td><td>i64</td><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>1</td><td>6</td><td>null</td><td>7</td></tr><tr><td>2</td><td>7</td><td>6</td><td>8</td></tr><tr><td>3</td><td>8</td><td>7</td><td>null</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (3, 4)\n",
       "┌──────┬───────┬───────┬────────┐\n",
       "│ date ┆ value ┆ lag_1 ┆ lead_1 │\n",
       "│ ---  ┆ ---   ┆ ---   ┆ ---    │\n",
       "│ i64  ┆ i64   ┆ i64   ┆ i64    │\n",
       "╞══════╪═══════╪═══════╪════════╡\n",
       "│ 1    ┆ 6     ┆ null  ┆ 7      │\n",
       "│ 2    ┆ 7     ┆ 6     ┆ 8      │\n",
       "│ 3    ┆ 8     ┆ 7     ┆ null   │\n",
       "└──────┴───────┴───────┴────────┘"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Tạo biến lead & lag\n",
    "df.with_columns(\n",
    "    lag_1 = pl.col(\"value\").shift(1),\n",
    "    lead_1 = pl.col(\"value\").shift(-1)\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Rank"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Các biến cũng có thể được `rank` đơn giản với method rank như sau"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_df = pl.DataFrame({\n",
    "    'id' : [1,2,3, 3],\n",
    "    'var1' : [5,4,2, 6],\n",
    "    'var2' : ['a', 'a', 'b', 'c'],\n",
    "    'var3' : ['x', 'y', 'z', 'y']\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (4, 6)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>id</th><th>var1</th><th>var2</th><th>var3</th><th>ordinal_rank</th><th>min_rank</th></tr><tr><td>i64</td><td>i64</td><td>str</td><td>str</td><td>u32</td><td>u32</td></tr></thead><tbody><tr><td>1</td><td>5</td><td>&quot;a&quot;</td><td>&quot;x&quot;</td><td>3</td><td>3</td></tr><tr><td>2</td><td>4</td><td>&quot;a&quot;</td><td>&quot;y&quot;</td><td>2</td><td>2</td></tr><tr><td>3</td><td>2</td><td>&quot;b&quot;</td><td>&quot;z&quot;</td><td>1</td><td>1</td></tr><tr><td>3</td><td>6</td><td>&quot;c&quot;</td><td>&quot;y&quot;</td><td>4</td><td>4</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (4, 6)\n",
       "┌─────┬──────┬──────┬──────┬──────────────┬──────────┐\n",
       "│ id  ┆ var1 ┆ var2 ┆ var3 ┆ ordinal_rank ┆ min_rank │\n",
       "│ --- ┆ ---  ┆ ---  ┆ ---  ┆ ---          ┆ ---      │\n",
       "│ i64 ┆ i64  ┆ str  ┆ str  ┆ u32          ┆ u32      │\n",
       "╞═════╪══════╪══════╪══════╪══════════════╪══════════╡\n",
       "│ 1   ┆ 5    ┆ a    ┆ x    ┆ 3            ┆ 3        │\n",
       "│ 2   ┆ 4    ┆ a    ┆ y    ┆ 2            ┆ 2        │\n",
       "│ 3   ┆ 2    ┆ b    ┆ z    ┆ 1            ┆ 1        │\n",
       "│ 3   ┆ 6    ┆ c    ┆ y    ┆ 4            ┆ 4        │\n",
       "└─────┴──────┴──────┴──────┴──────────────┴──────────┘"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_df.\\\n",
    "    with_columns(\n",
    "        pl.col(\"var1\").rank(\"ordinal\").alias(\"ordinal_rank\"),\n",
    "        pl.col(\"var1\").rank(\"min\").alias(\"min_rank\")\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Lazy evaluation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`Polars` cho phép sử dụng lazy evaluation để tính toán và tổng hợp dữ liệu. Khác với các câu lệnh thông thường chỉ tính toán theo từng câu lệnh. `Lazy evaluation` cho phép optimize toàn bộ câu lệnh trước khi thực sự thực hiện. \n",
    "\n",
    "Có 2 cách để sử dụng `lazy evaluation`:\n",
    "\n",
    "- Biến đổi polars dataframe sang lazy\n",
    "- Scan file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Cách 1: Tạo lazy object\n",
    "mtcars_pl2 = mtcars_pl.lazy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<i>naive plan: (run <b>LazyFrame.explain(optimized=True)</b> to see the optimized plan)</i>\n",
       "    <p></p>\n",
       "    <div>AGGREGATE<p></p>\t[col(\"mpg\").mean().alias(\"mean_mpg\")] BY [col(\"am\")] FROM<p></p>  FILTER [(col(\"vs\")) == (1)] FROM<p></p>    DF [\"name\", \"mpg\", \"cyl\", \"disp\"]; PROJECT */12 COLUMNS; SELECTION: None</div>"
      ],
      "text/plain": [
       "<LazyFrame at 0x293F06F0710>"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Hiển thị plan\n",
    "q1 = mtcars_pl2.\\\n",
    "    filter(pl.col(\"vs\") == 1).\\\n",
    "    group_by(pl.col(\"am\")).\\\n",
    "    agg(\n",
    "        pl.col(\"mpg\").mean().alias(\"mean_mpg\")\n",
    "    )\n",
    "q1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (2, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>am</th><th>mean_mpg</th></tr><tr><td>i64</td><td>f64</td></tr></thead><tbody><tr><td>1</td><td>28.371429</td></tr><tr><td>0</td><td>20.742857</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (2, 2)\n",
       "┌─────┬───────────┐\n",
       "│ am  ┆ mean_mpg  │\n",
       "│ --- ┆ ---       │\n",
       "│ i64 ┆ f64       │\n",
       "╞═════╪═══════════╡\n",
       "│ 1   ┆ 28.371429 │\n",
       "│ 0   ┆ 20.742857 │\n",
       "└─────┴───────────┘"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Thực hiện với collect\n",
    "q1.collect()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "**Cách 2**: Scan file\n",
    "\n",
    "Bên cạnh việc tối ưu hóa, polars và lazy evaluation cho phép sử dụng option `streaming` để tính toán từng phần với dữ liệu lớn"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "pl.scan_parquet(\"file_parquet\")\n",
    "    .filter(pl.col(\"x\") > 30).\n",
    "    .collect(streaming = True)\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Đọc & ghi dữ liệu"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "### Import dữ liệu"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "#### Kết nối với database\n",
    "\n",
    "Ta có thể đọc dữ liệu từ SQL Server thông qua odbc"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "```python\n",
    "import pyodbc\n",
    "conn = pyodbc.connect(\n",
    "    r'DRIVER={ODBC Driver 13 for SQL Server};'\n",
    "    r'SERVER=ADMINMI-JTBJEPG;' # Name of server\n",
    "    r'DATABASE=learningsql;'   # Data base\n",
    "    r'UID=user_name;'                 # User\n",
    "    r'PWD=pwd'              # Password\n",
    "    )\n",
    "df = pl.read_database('SELECT * FROM ACCOUNT', conn)\n",
    "df.head\n",
    "```\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "**Ghi dữ liệu vào database**: Khi có một dataframe tên df, ta có thể sử dụng method `write_database` để ghi vào server như sau"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "pyodbc_uri = (\n",
    "    \"mssql+pyodbc://user:pass@server:1433/test?\"\n",
    "    \"driver=ODBC+Driver+17+for+SQL+Server\"\n",
    ")\n",
    "engine = create_engine(pyodbc_uri, fast_executemany=True)  \n",
    "df.write_database(\n",
    "    table_name=\"target_table\",\n",
    "    connection=engine,\n",
    ")  \n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Import từ file"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "df = pl.read_csv(\"file.csv\")\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Kiểm tra các kiểu dữ liệu có thể đọc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pl.read_avro\n",
      "pl.read_clipboard\n",
      "pl.read_csv\n",
      "pl.read_csv_batched\n",
      "pl.read_database\n",
      "pl.read_database_uri\n",
      "pl.read_delta\n",
      "pl.read_excel\n",
      "pl.read_ipc\n",
      "pl.read_ipc_schema\n",
      "pl.read_ipc_stream\n",
      "pl.read_json\n",
      "pl.read_ndjson\n",
      "pl.read_ods\n",
      "pl.read_parquet\n",
      "pl.read_parquet_schema"
     ]
    }
   ],
   "source": [
    "?pl.read_*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Lưu dữ liệu"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_df = pl.DataFrame({\n",
    "    'x' : [1,2,3],\n",
    "    'y' : [3,4,5],\n",
    "    'group' : ['a', 'a', 'b']\n",
    "})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Dữ liệu polars có thể lưu trữ dưới nhiều định dạng khác nhau với nhóm methods `write_*`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "my_df.write_excel('test_excel_pdf.xlsx')\n",
    "my_df.write_parquet('test_pq.parquet')\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "my_df.write_avro\n",
      "my_df.write_clipboard\n",
      "my_df.write_csv\n",
      "my_df.write_database\n",
      "my_df.write_delta\n",
      "my_df.write_excel\n",
      "my_df.write_ipc\n",
      "my_df.write_ipc_stream\n",
      "my_df.write_json\n",
      "my_df.write_ndjson\n",
      "my_df.write_parquet"
     ]
    }
   ],
   "source": [
    "# Kiêm tra các cách lưu trữ từ polars\n",
    "?my_df.write_*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Tài liệu tham khảo\n",
    "\n",
    "- [https://docs.pola.rs/]()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
