{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# sklearn nâng cao"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Feature engineering"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`Feature engineering` là quá trình biến đối dữ liệu thô thành các dữ liệu phái sinh (`features`) có thể thể hiện tốt hơn vấn đề cần giải quyết trong mô hình dự báo, từ đó gia tăng độ chính xác của mô hình trên tập dữ liệu mới."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`Feature engineering` có 4 nhóm lớn:\n",
    "- Dữ liệu dạng số\n",
    "- Dữ liệu dạng category\n",
    "- Dữ liệu text\n",
    "- Dữ liệu dạng ảnh"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Dữ liệu dạng số"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Chuyển sang dạng nhị phân (0,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.preprocessing import Binarizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal_length</th>\n",
       "      <th>sepal_width</th>\n",
       "      <th>petal_length</th>\n",
       "      <th>petal_width</th>\n",
       "      <th>species</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>setosa</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   sepal_length  sepal_width  petal_length  petal_width species\n",
       "0           5.1          3.5           1.4          0.2  setosa\n",
       "1           4.9          3.0           1.4          0.2  setosa\n",
       "2           4.7          3.2           1.3          0.2  setosa\n",
       "3           4.6          3.1           1.5          0.2  setosa\n",
       "4           5.0          3.6           1.4          0.2  setosa"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris = pd.read_csv(\"./99_dataset/iris.csv\")\n",
    "iris.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Tạo object binarizer\n",
    "thre = np.mean(iris['sepal_length'])\n",
    "bn = Binarizer(threshold = thre)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "numpy.ndarray"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_sepal = bn.fit_transform([iris['sepal_length']])\n",
    "type(new_sepal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [],
   "source": [
    "iris['new_sepal'] = new_sepal[0] # Chuyển sang dạng array 1 chiều"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal_length</th>\n",
       "      <th>sepal_width</th>\n",
       "      <th>petal_length</th>\n",
       "      <th>petal_width</th>\n",
       "      <th>species</th>\n",
       "      <th>new_sepal</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>145</th>\n",
       "      <td>6.7</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>2.3</td>\n",
       "      <td>virginica</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>6.3</td>\n",
       "      <td>2.5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.9</td>\n",
       "      <td>virginica</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>147</th>\n",
       "      <td>6.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>virginica</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148</th>\n",
       "      <td>6.2</td>\n",
       "      <td>3.4</td>\n",
       "      <td>5.4</td>\n",
       "      <td>2.3</td>\n",
       "      <td>virginica</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "      <td>5.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.1</td>\n",
       "      <td>1.8</td>\n",
       "      <td>virginica</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     sepal_length  sepal_width  petal_length  petal_width    species  \\\n",
       "145           6.7          3.0           5.2          2.3  virginica   \n",
       "146           6.3          2.5           5.0          1.9  virginica   \n",
       "147           6.5          3.0           5.2          2.0  virginica   \n",
       "148           6.2          3.4           5.4          2.3  virginica   \n",
       "149           5.9          3.0           5.1          1.8  virginica   \n",
       "\n",
       "     new_sepal  \n",
       "145        1.0  \n",
       "146        1.0  \n",
       "147        1.0  \n",
       "148        1.0  \n",
       "149        1.0  "
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Binning"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Binning trong KBinsDiscretizer có 3 cách chính:\n",
    "\n",
    "- uniforms: Chía thành n phần có độ rộng bằng nhau $\\frac{x_{max} - x_{min}}{n_{bins}}$\n",
    "- quantile: Chia them n quantile\n",
    "- kmeans: Chia theo tâm gần nhất sử dụng k-means"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import KBinsDiscretizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'0.20.1'"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import sklearn \n",
    "sklearn.__version__"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Lưu ý**: \n",
    "- Cần check version của sklearn khi không sử dụng KBinsDiscretizer được\n",
    "- Khi làm việc với array "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([5.1, 4.9, 4.7, 4.6, 5. , 5.4, 4.6, 5. , 4.4, 4.9, 5.4, 4.8, 4.8,\n",
       "       4.3, 5.8, 5.7, 5.4, 5.1, 5.7, 5.1, 5.4, 5.1, 4.6, 5.1, 4.8, 5. ,\n",
       "       5. , 5.2, 5.2, 4.7, 4.8, 5.4, 5.2, 5.5, 4.9, 5. , 5.5, 4.9, 4.4,\n",
       "       5.1, 5. , 4.5, 4.4, 5. , 5.1, 4.8, 5.1, 4.6, 5.3, 5. , 7. , 6.4,\n",
       "       6.9, 5.5, 6.5, 5.7, 6.3, 4.9, 6.6, 5.2, 5. , 5.9, 6. , 6.1, 5.6,\n",
       "       6.7, 5.6, 5.8, 6.2, 5.6, 5.9, 6.1, 6.3, 6.1, 6.4, 6.6, 6.8, 6.7,\n",
       "       6. , 5.7, 5.5, 5.5, 5.8, 6. , 5.4, 6. , 6.7, 6.3, 5.6, 5.5, 5.5,\n",
       "       6.1, 5.8, 5. , 5.6, 5.7, 5.7, 6.2, 5.1, 5.7, 6.3, 5.8, 7.1, 6.3,\n",
       "       6.5, 7.6, 4.9, 7.3, 6.7, 7.2, 6.5, 6.4, 6.8, 5.7, 5.8, 6.4, 6.5,\n",
       "       7.7, 7.7, 6. , 6.9, 5.6, 7.7, 6.3, 6.7, 7.2, 6.2, 6.1, 6.4, 7.2,\n",
       "       7.4, 7.9, 6.4, 6.3, 6.1, 7.7, 6.3, 6.4, 6. , 6.9, 6.7, 6.9, 5.8,\n",
       "       6.8, 6.7, 6.7, 6.3, 6.5, 6.2, 5.9])"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris['sepal_length'].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = iris.iloc[:, np.arange(4)].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[3.5],\n",
       "       [3. ],\n",
       "       [3.2],\n",
       "       [3.1],\n",
       "       [3.6]])"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X[:, 1].reshape(150,1)[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [],
   "source": [
    "est = KBinsDiscretizer(n_bins = 5,  # Số lượng bins\n",
    "                       encode = \"ordinal\",  # Chia theo ordinal\n",
    "                       strategy = \"uniform\") # Chuyển thành dạng integer\n",
    "# est.fit(X)\n",
    "sepal_length_new = est.fit_transform(X[:, 1].reshape(150, 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4.0"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.max(sepal_length_new)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Standardization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Biến đổi dữ liệu về dạng normal distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = np.random.randint(1, 10, 1000).reshape(1000,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [],
   "source": [
    "scaler = StandardScaler()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x27d3476ef60>"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\anhhd3\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\utils\\validation.py:595: DataConversionWarning: Data with input dtype int32 was converted to float64 by StandardScaler.\n",
      "  warnings.warn(msg, DataConversionWarning)\n",
      "C:\\Users\\anhhd3\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\utils\\validation.py:595: DataConversionWarning: Data with input dtype int32 was converted to float64 by StandardScaler.\n",
      "  warnings.warn(msg, DataConversionWarning)\n"
     ]
    }
   ],
   "source": [
    "new_x = scaler.fit_transform(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x27d3482ac18>"
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(new_x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Lưu ý**: Với các nhóm hàm biến đổi dữ liệu trước khi vào mô hình, frame work bao giờ cũng như sau:\n",
    "\n",
    "- Tạo object để transform `transfrom_object`\n",
    "- Áp dụng hàm fit với object X\n",
    "- Apply `transform_object` vào object mới Y\n",
    "\n",
    "Trong trường hợp áp dụng thẳng fit và transform object X, ta có thể dùng hàm `fit_transform`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.datasets import load_iris\n",
    "iris_ml = load_iris()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "x_train, x_test, y_train, y_test = train_test_split(iris_ml.data, iris_ml.target, random_state = 0)\n",
    "train_row = x_train.shape[0]\n",
    "test_row = x_test.shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "scl = StandardScaler().fit(x_train[:,1].reshape(train_row, 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_var = scl.transform(x_test[:, 1].reshape(test_row, 1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**So sánh distribution của hai nhóm**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x27d34c865c0>"
      ]
     },
     "execution_count": 185,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Oldvar\n",
    "sns.distplot(x_test[:, 1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(38, 1)"
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# New var\n",
    "type(new_var)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x27d34a2fda0>"
      ]
     },
     "execution_count": 186,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(new_var)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Normalization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`Normalization` biến đổi dữ liệu trong khoảng `[0, 1]`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import Normalizer\n",
    "norm = Normalizer().fit(x_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_var = norm.transform(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x27d35f54860>"
      ]
     },
     "execution_count": 213,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Old var\n",
    "sns.distplot(x_test[:, 1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x27d35faa160>"
      ]
     },
     "execution_count": 215,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# New var\n",
    "sns.distplot(new_var[:, 1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.67767924, 0.32715549, 0.59589036, 0.28041899],\n",
       "       [0.78892752, 0.28927343, 0.52595168, 0.13148792],\n",
       "       [0.77867447, 0.59462414, 0.19820805, 0.02831544],\n",
       "       [0.71366557, 0.28351098, 0.61590317, 0.17597233],\n",
       "       [0.80218492, 0.54548574, 0.24065548, 0.0320874 ]])"
      ]
     },
     "execution_count": 217,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_var[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tạo hàm bậc cao"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "result = PolynomialFeatures(5).fit_transform(x_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x27d361d1668>"
      ]
     },
     "execution_count": 223,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# New var\n",
    "sns.distplot(result[:, 1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x27d3625ce10>"
      ]
     },
     "execution_count": 224,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Old var\n",
    "sns.distplot(x_train[:, 1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### MinMax scaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import MinMaxScaler\n",
    "result = MinMaxScaler().fit_transform(x_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x27d36857ef0>"
      ]
     },
     "execution_count": 239,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(result[:, 1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x27d368832e8>"
      ]
     },
     "execution_count": 241,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(x_train[:, 1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Robust scaling"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Tương tự như StandardScaler, nhưng Robust Scaling sẽ thay `mean` bằng median"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import RobustScaler\n",
    "result = RobustScaler().fit_transform(x_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\anhhd3\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\scipy\\stats\\stats.py:1713: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.\n",
      "  return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x27d36926f98>"
      ]
     },
     "execution_count": 243,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(result[:, 1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Biến category"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Onehot encoding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([['a'],\n",
       "       ['a'],\n",
       "       ['b'],\n",
       "       ['c'],\n",
       "       ['b']], dtype='<U1')"
      ]
     },
     "execution_count": 231,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cat_var = np.array(['a', 'a', 'b', 'c', 'b'])\n",
    "cat_var.reshape(5, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 1, 2, 1], dtype=int64)"
      ]
     },
     "execution_count": 244,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "onehot = LabelEncoder()\n",
    "onehot.fit_transform(cat_var)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Chọn mô hình & phân tích kết quả"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.datasets import load_breast_cancer\n",
    "breast = load_breast_cancer()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train, x_test, y_train, y_test = train_test_split(breast.data, breast.target, test_size = 0.3, random_state = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "from xgboost import XGBClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "xgb_model = XGBClassifier(probabbility = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
       "       colsample_bytree=1, gamma=0, learning_rate=0.1, max_delta_step=0,\n",
       "       max_depth=3, min_child_weight=1, missing=None, n_estimators=100,\n",
       "       n_jobs=1, nthread=None, objective='binary:logistic',\n",
       "       probabbility=True, random_state=0, reg_alpha=0, reg_lambda=1,\n",
       "       scale_pos_weight=1, seed=None, silent=True, subsample=1)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xgb_model.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0,\n",
       "       1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1,\n",
       "       1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1,\n",
       "       0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1,\n",
       "       0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0,\n",
       "       1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1,\n",
       "       1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1,\n",
       "       1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1])"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xgb_model.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.99736035 0.00263964]\n",
      " [0.03328305 0.96671695]\n",
      " [0.00188756 0.99811244]\n",
      " [0.00477386 0.99522614]\n",
      " [0.00229436 0.99770564]]\n",
      "[0 1 1 1 1]\n"
     ]
    }
   ],
   "source": [
    "# Dự báo xác suất\n",
    "pred_prob = xgb_model.predict_proba(x_test)\n",
    "pred_class = xgb_model.predict(x_test)\n",
    "print(pred_prob[:5]); print(pred_class[:5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9649122807017544"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy_score(y_test, pred_class)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 59,   4],\n",
       "       [  2, 106]], dtype=int64)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confusion_matrix(y_test, pred_class)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.94      0.95        63\n",
      "           1       0.96      0.98      0.97       108\n",
      "\n",
      "   micro avg       0.96      0.96      0.96       171\n",
      "   macro avg       0.97      0.96      0.96       171\n",
      "weighted avg       0.96      0.96      0.96       171\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test, pred_class))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9976484420928866"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roc_auc_score(y_test, pred_prob[:, 1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`roc_curve` cho phép trả ra kết quả FPR & TPR và threshold"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "fpr, tpr, threshold = roc_curve(y_test, pred_prob[:, 1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\anhhd3\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\scipy\\stats\\stats.py:1713: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.\n",
      "  return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x22de8d26cf8>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.lineplot(fpr, tpr, marker = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Grid search"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "xgb_model = XGBClassifier()\n",
    "from sklearn.model_selection import GridSearchCV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "params = {\"max_depth\" : [3,4,5],\n",
    "         \"sample_rate\" : [0.6, 0.7],\n",
    "         \"colsample_bytree\" : [0.6, 0.8]}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "grid = GridSearchCV(estimator = xgb_model,\n",
    "                   param_grid = params,\n",
    "                   scoring = \"roc_auc\",\n",
    "                   cv = 5) # Số lượng cross-validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5, error_score='raise-deprecating',\n",
       "       estimator=XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
       "       colsample_bytree=1, gamma=0, learning_rate=0.1, max_delta_step=0,\n",
       "       max_depth=3, min_child_weight=1, missing=None, n_estimators=100,\n",
       "       n_jobs=1, nthread=None, objective='binary:logistic', random_state=0,\n",
       "       reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n",
       "       silent=True, subsample=1),\n",
       "       fit_params=None, iid='warn', n_jobs=None,\n",
       "       param_grid={'max_depth': [3, 4, 5], 'sample_rate': [0.6, 0.7], 'colsample_bytree': [0.6, 0.8]},\n",
       "       pre_dispatch='2*n_jobs', refit=True, return_train_score='warn',\n",
       "       scoring='roc_auc', verbose=0)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9926102480500083"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid.best_score_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'colsample_bytree': 0.6, 'max_depth': 3, 'sample_rate': 0.6}"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid.best_params_"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  },
  "toc-autonumbering": true
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
