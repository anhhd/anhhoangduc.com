{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Viết hàm trong Python"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Giới thiệu về hàm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Tương tự như R, Python cho phép sử dụng hàm linh hoạt với các tham số và trả ra kết quả định sẵn. Có 1 số lưu ý như sau:\n",
    "\n",
    "- Hàm bắt đầu với `def`\n",
    "- Các tham số mặc định được sử dụng tương tự như R. VD `def plus(a, b = 2)`\n",
    "- Trong hàm cho phép ghi chú document của hàm trong ba dấu ngoặc kép, được gọi là `docs string`\n",
    "- Các tham số chưa biết (tương ứng với `...` trong R) được sử dụng với argument `*args`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plus_1(a, b = 2):\n",
    "    \"\"\"Trả ra kết quả hàm tổng\"\"\"\n",
    "    return a + b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plus_1(4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\u001b[1;31mSignature:\u001b[0m \u001b[0mplus_1\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0ma\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mb\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
       "\u001b[1;31mDocstring:\u001b[0m Trả ra kết quả hàm tổng\n",
       "\u001b[1;31mFile:\u001b[0m      f:\\onedrive - vpbank\\02. python\\01-python-book\\_source\\<ipython-input-2-122b00638185>\n",
       "\u001b[1;31mType:\u001b[0m      function\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "?plus_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plus_2(*args):\n",
    "    return np.sum(args)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plus_2(3,4,5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Ví dụ hàm trả ra n số Fibonacci đầu tiên**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "def fib_n(n):\n",
    "    if n == 1:\n",
    "        my_list = list([0])\n",
    "    elif n == 2:\n",
    "        my_list = list([0, 1])\n",
    "    else: \n",
    "        my_list = list([0, 1])\n",
    "        f0 = 0\n",
    "        f1 = 1\n",
    "        my_range = range(n-2)\n",
    "        for i in my_range:\n",
    "            f2 = f1 + f0\n",
    "            f0 = f1\n",
    "            f1 = f2\n",
    "            my_list.append(f2)\n",
    "    return(my_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0, 1, 1, 2, 3, 5, 8, 13, 21]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fib_n(9)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Hàm summary theo group"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [],
   "source": [
    "def load_iris_df():\n",
    "    \"\"\"\n",
    "    Load iris data in the form of dataframe with grouping variable.\n",
    "    The data set is used to ilustrate different functions of VPBank package\n",
    "    \"\"\"\n",
    "    \n",
    "    import numpy as np\n",
    "    import pandas as pd\n",
    "    from sklearn.datasets import load_iris\n",
    "    iris = load_iris()\n",
    "    ref_species = pd.DataFrame({\n",
    "        'species_code' : [0, 1, 2],\n",
    "        'species' : iris.target_names\n",
    "    })\n",
    "    # Sửa lại name\n",
    "    name = pd.Series(iris.feature_names)\n",
    "    name = name.str.replace('\\\\(cm\\\\)', '')\n",
    "    name = name.str.strip().str.replace(' ', '_')\n",
    "    iris_df = pd.DataFrame(iris.data,\n",
    "                           columns = name)\n",
    "    iris_df['species_code'] = iris.target\n",
    "    iris_df = pd.merge(iris_df, ref_species, how = 'left').drop('species_code', 1)\n",
    "    iris_df['group'] = np.random.randint(1,3, 150)\n",
    "    iris_df.group = iris_df.group.astype(object)\n",
    "    return iris_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [],
   "source": [
    "iris_df = load_iris_df()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\anhhd3\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\ipykernel_launcher.py:3: FutureWarning: using a dict on a Series for aggregation\n",
      "is deprecated and will be removed in a future version\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>median</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>species</th>\n",
       "      <th>group</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">setosa</th>\n",
       "      <th>1</th>\n",
       "      <td>4.936000</td>\n",
       "      <td>5.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5.076000</td>\n",
       "      <td>5.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">versicolor</th>\n",
       "      <th>1</th>\n",
       "      <td>5.975000</td>\n",
       "      <td>5.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5.900000</td>\n",
       "      <td>5.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">virginica</th>\n",
       "      <th>1</th>\n",
       "      <td>6.551852</td>\n",
       "      <td>6.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6.630435</td>\n",
       "      <td>6.50</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      mean  median\n",
       "species    group                  \n",
       "setosa     1      4.936000    5.00\n",
       "           2      5.076000    5.10\n",
       "versicolor 1      5.975000    5.95\n",
       "           2      5.900000    5.85\n",
       "virginica  1      6.551852    6.50\n",
       "           2      6.630435    6.50"
      ]
     },
     "execution_count": 197,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris_df.groupby(['species', 'group'])['sepal_length'].agg({\n",
    "    'mean' : np.mean,\n",
    "    'median': np.median})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([6.4, 6.9])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.quantile(iris_df['sepal_length'], [0.75, 0.9])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Tạo hàm tính percentile\n",
    "def percentile(n):\n",
    "    def percentile_(x):\n",
    "        return np.percentile(x,n)\n",
    "    percentile_.__name__ = 'percentile_%s' % n\n",
    "    return percentile_\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>count</th>\n",
       "      <th>percentile_25</th>\n",
       "      <th>median</th>\n",
       "      <th>percentile_90</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>species</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.006</td>\n",
       "      <td>50</td>\n",
       "      <td>4.800</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.936</td>\n",
       "      <td>50</td>\n",
       "      <td>5.600</td>\n",
       "      <td>5.9</td>\n",
       "      <td>6.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6.588</td>\n",
       "      <td>50</td>\n",
       "      <td>6.225</td>\n",
       "      <td>6.5</td>\n",
       "      <td>7.61</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          mean  count  percentile_25  median  percentile_90\n",
       "species                                                    \n",
       "0        5.006     50          4.800     5.0           5.41\n",
       "1        5.936     50          5.600     5.9           6.70\n",
       "2        6.588     50          6.225     6.5           7.61"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris_df.groupby('species')['sepal_length'].agg({\n",
    "    'mean',\n",
    "    np.median,\n",
    "    percentile(90),\n",
    "    percentile(25),\n",
    "    'count'\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "def analytics_summarise(data, value_var, group_var):\n",
    "    \"\"\"Quickly summarise statistics of one measures by different groups\n",
    "    \n",
    "    Args: \n",
    "    \n",
    "    - data: dataframe to analyze\n",
    "    - value_var: variable to analyze\n",
    "    - group_var: list of grouping variables\n",
    "    \n",
    "    Returns:\n",
    "    \n",
    "    - A dataframe of summarise statistics\n",
    "    \n",
    "    \"\"\"\n",
    "    \n",
    "    def _percentile(n):\n",
    "        def percentile_(x):\n",
    "            return np.percentile(x,n)\n",
    "        percentile_.__name__ = 'percentile_%s' % n\n",
    "        return percentile_\n",
    "\n",
    "    result = data.groupby(group_var)[value_var].agg({\n",
    "        'n' : 'count',\n",
    "        'mean' : np.mean,\n",
    "        'min' : np.min,\n",
    "        'q25' : _percentile(25),\n",
    "        'median' : np.median,\n",
    "        'q75' : _percentile(75),\n",
    "        'q90' : _percentile(90),\n",
    "        'max' : np.max})\n",
    "    return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\anhhd3\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\ipykernel_launcher.py:32: FutureWarning: using a dict on a Series for aggregation\n",
      "is deprecated and will be removed in a future version\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>n</th>\n",
       "      <th>mean</th>\n",
       "      <th>min</th>\n",
       "      <th>q25</th>\n",
       "      <th>median</th>\n",
       "      <th>q75</th>\n",
       "      <th>q90</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>species</th>\n",
       "      <th>group</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">0</th>\n",
       "      <th>1</th>\n",
       "      <td>25</td>\n",
       "      <td>4.976000</td>\n",
       "      <td>4.4</td>\n",
       "      <td>4.800</td>\n",
       "      <td>5.00</td>\n",
       "      <td>5.200</td>\n",
       "      <td>5.40</td>\n",
       "      <td>5.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>25</td>\n",
       "      <td>5.036000</td>\n",
       "      <td>4.3</td>\n",
       "      <td>4.800</td>\n",
       "      <td>5.00</td>\n",
       "      <td>5.200</td>\n",
       "      <td>5.50</td>\n",
       "      <td>5.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">1</th>\n",
       "      <th>1</th>\n",
       "      <td>20</td>\n",
       "      <td>5.950000</td>\n",
       "      <td>5.1</td>\n",
       "      <td>5.600</td>\n",
       "      <td>6.00</td>\n",
       "      <td>6.300</td>\n",
       "      <td>6.43</td>\n",
       "      <td>6.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>30</td>\n",
       "      <td>5.926667</td>\n",
       "      <td>4.9</td>\n",
       "      <td>5.525</td>\n",
       "      <td>5.85</td>\n",
       "      <td>6.275</td>\n",
       "      <td>6.71</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">2</th>\n",
       "      <th>1</th>\n",
       "      <td>21</td>\n",
       "      <td>6.642857</td>\n",
       "      <td>4.9</td>\n",
       "      <td>6.100</td>\n",
       "      <td>6.70</td>\n",
       "      <td>7.200</td>\n",
       "      <td>7.60</td>\n",
       "      <td>7.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>29</td>\n",
       "      <td>6.548276</td>\n",
       "      <td>5.7</td>\n",
       "      <td>6.300</td>\n",
       "      <td>6.40</td>\n",
       "      <td>6.800</td>\n",
       "      <td>7.46</td>\n",
       "      <td>7.7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                n      mean  min    q25  median    q75   q90  max\n",
       "species group                                                    \n",
       "0       1      25  4.976000  4.4  4.800    5.00  5.200  5.40  5.7\n",
       "        2      25  5.036000  4.3  4.800    5.00  5.200  5.50  5.8\n",
       "1       1      20  5.950000  5.1  5.600    6.00  6.300  6.43  6.7\n",
       "        2      30  5.926667  4.9  5.525    5.85  6.275  6.71  7.0\n",
       "2       1      21  6.642857  4.9  6.100    6.70  7.200  7.60  7.9\n",
       "        2      29  6.548276  5.7  6.300    6.40  6.800  7.46  7.7"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "analytics_summarise(iris_df, 'sepal_length', ['species', 'group'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [],
   "source": [
    "# boxplot\n",
    "def _draw_boxplot(data, value_var, group_var):\n",
    "    import seaborn as sns\n",
    "    from matplotlib import pyplot\n",
    "    # Set retina resolution for chart\n",
    "    %config InlineBackend.figure_format = 'retina'\n",
    "    sns.set_style(\"ticks\")\n",
    "    my_plot = sns.boxplot(x = \"species\", y = \"sepal_length\", data = iris_df)\n",
    "    sns.despine()     \n",
    "    return my_plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 263,
       "width": 385
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot = _draw_boxplot(iris_df, 'sepal_length', 'species')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plot.set_yscale('log')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "execution_count": 118,
     "metadata": {
      "image/png": {
       "height": 263,
       "width": 400
      }
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plot.get_figure()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "execution_count": 114,
     "metadata": {
      "image/png": {
       "height": 276,
       "width": 400
      }
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plot.set(title = 'My plot')\n",
    "plot.get_figure()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ANOVA Tukey HSD"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [],
   "source": [
    "def _anova_turkey(data, value_var, group_var):   \n",
    "    from statsmodels.stats.multicomp import (pairwise_tukeyhsd,\n",
    "                                             MultiComparison)\n",
    "\n",
    "    MultiComp = MultiComparison(data[value_var],\n",
    "                                data[group_var])\n",
    "\n",
    "    # Show all pair-wise comparisons:\n",
    "\n",
    "    # Print the comparisons\n",
    "    result = MultiComp.tukeyhsd().summary()\n",
    "    print('Comparison of ' + value_var + ' by ' + group_var)\n",
    "    print('===========================================')\n",
    "  #  print(result)\n",
    "    return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Comparison of sepal_length by species\n",
      "===========================================\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>Multiple Comparison of Means - Tukey HSD,FWER=0.05</caption>\n",
       "<tr>\n",
       "  <th>group1</th> <th>group2</th> <th>meandiff</th>  <th>lower</th>  <th>upper</th> <th>reject</th>\n",
       "</tr>\n",
       "<tr>\n",
       "     <td>0</td>      <td>1</td>     <td>0.93</td>   <td>0.6862</td> <td>1.1738</td>  <td>True</td> \n",
       "</tr>\n",
       "<tr>\n",
       "     <td>0</td>      <td>2</td>     <td>1.582</td>  <td>1.3382</td> <td>1.8258</td>  <td>True</td> \n",
       "</tr>\n",
       "<tr>\n",
       "     <td>1</td>      <td>2</td>     <td>0.652</td>  <td>0.4082</td> <td>0.8958</td>  <td>True</td> \n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.table.SimpleTable'>"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "_anova_turkey(iris_df, 'sepal_length', 'species')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Compare group"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [],
   "source": [
    "del [analytics_summarise, anova_turkey, compare_group, draw_boxplot]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [],
   "source": [
    "def compare_group(data, value_var, group_var):\n",
    "    \n",
    "    # Declare class for result\n",
    "    \n",
    "    class compare_result(object):\n",
    "        def __init__(self, summary_table, aov_model, box_plot):\n",
    "            self.summary_table = summary_table\n",
    "            self.aov_model = aov_model\n",
    "            self.box_plot = box_plot\n",
    "\n",
    "    # Function to analyse data\n",
    "    \n",
    "    def analytics_summarise(data, value_var, group_var):\n",
    "        \"\"\"Summarise statistics\"\"\"\n",
    "   \n",
    "        def _percentile(n):\n",
    "            def percentile_(x):\n",
    "                return np.percentile(x,n)\n",
    "            percentile_.__name__ = 'percentile_%s' % n\n",
    "            return percentile_\n",
    "\n",
    "        result = data.groupby(group_var)[value_var].agg({\n",
    "            'n' : 'count',\n",
    "            'mean' : np.mean,\n",
    "            'min' : np.min,\n",
    "            'q25' : _percentile(25),\n",
    "            'median' : np.median,\n",
    "            'q75' : _percentile(75),\n",
    "            'q90' : _percentile(90),\n",
    "            'max' : np.max})\n",
    "        return result\n",
    "    \n",
    "    # Draw box plot\n",
    "    def draw_boxplot(data, value_var, group_var):\n",
    "        import seaborn as sns\n",
    "        from matplotlib import pyplot\n",
    "        # Set retina resolution for chart\n",
    "        %config InlineBackend.figure_format = 'retina'\n",
    "        sns.set_style(\"ticks\")\n",
    "        my_plot = sns.boxplot(x = data[group_var], y = data[value_var], data = data)\n",
    "        sns.despine()     \n",
    "        return my_plot\n",
    "    \n",
    "    # AOV model\n",
    "    def aov_turkey(data, value_var, group_var):\n",
    "        from statsmodels.stats.multicomp import (pairwise_tukeyhsd, MultiComparison)\n",
    "        MultiComp = MultiComparison(data[value_var],\n",
    "                                        data[group_var])\n",
    "        result = MultiComp.tukeyhsd().summary()\n",
    "        return result     \n",
    "    \n",
    "    return compare_result(\n",
    "        summary_table = analytics_summarise(data, value_var, group_var),\n",
    "        aov_model = aov_turkey(data, value_var, group_var),\n",
    "        box_plot = draw_boxplot(data, value_var, group_var))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\anhhd3\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\ipykernel_launcher.py:30: FutureWarning: using a dict on a Series for aggregation\n",
      "is deprecated and will be removed in a future version\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 263,
       "width": 385
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "stat_result = compare_group(data = iris_df, group_var = 'species', value_var = 'sepal_length')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>Multiple Comparison of Means - Tukey HSD,FWER=0.05</caption>\n",
       "<tr>\n",
       "  <th>group1</th> <th>group2</th> <th>meandiff</th>  <th>lower</th>  <th>upper</th> <th>reject</th>\n",
       "</tr>\n",
       "<tr>\n",
       "     <td>0</td>      <td>1</td>     <td>0.93</td>   <td>0.6862</td> <td>1.1738</td>  <td>True</td> \n",
       "</tr>\n",
       "<tr>\n",
       "     <td>0</td>      <td>2</td>     <td>1.582</td>  <td>1.3382</td> <td>1.8258</td>  <td>True</td> \n",
       "</tr>\n",
       "<tr>\n",
       "     <td>1</td>      <td>2</td>     <td>0.652</td>  <td>0.4082</td> <td>0.8958</td>  <td>True</td> \n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.table.SimpleTable'>"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stat_result.aov_model"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  },
  "toc-autonumbering": true,
  "toc-showcode": false,
  "toc-showmarkdowntxt": true
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
