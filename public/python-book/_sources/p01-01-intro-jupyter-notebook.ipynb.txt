{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Giới thiệu về Python và Jupyter Notebook"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Python là ngôn ngữ phổ biến nhất cho Machine Learning nói chung và Data Science nói riêng bởi tính đơn giản gọn nhẹ của nó"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Anaconda"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Có nhiều cách để cài đặt và sử dụng Python, trong đó đơn giản nhất chúng ta có thể đi tới trực tiếp trang https://www.python.org/downloads/ để download cho Windows (hoặc Mac), tuy nhiên cách tiếp cận tốt hơn là sử dụng Platform **Anaconda**, đây là 1 Platform khá nổi tiếng trong Data Science, khi cài **Anaconda** ta sẽ có:\n",
    "- Python core\n",
    "- Các libraries phổ biến nhất (VD: pandas, numpy, matplotlib...) mà không cần phải cài mới mỗi khi cần sử dụng\n",
    "- Các IDE phổ biến nhất để sử dụng Python (Jupyter Notebook, Spyder) và R (Rstudio)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Để cài đặt Anacoda, đi đến trang https://www.anaconda.com/distribution/, chọn phiên bản Windows, download và install"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"Image/anaconda.png\" alt=\"Alt text that describes the graphic\" title=\"\" />"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Library trong Python"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Tương tự như `R`, các library trong Python rất đa dạng và hỗ trợ giải quyết nhiều vấn đề khác nhau."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Các thư viện thường dùng trong Python khi phân tích dữ liệu:\n",
    "\n",
    "- Numpy: Tính toán đại số\n",
    "- Scipy: Tính toán các chỉ số khoa học\n",
    "- Matplotlib, seaborn: Vẽ biểu đồ\n",
    "- Pandas: Tương ứng với data.table, dplyr, reshape2\n",
    "- Scikit Learn: Machine learning"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Cài đặt library trong Python"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Phần lớn các library đều đã được cài đặt cùng với Anaconda, các library khác khi cần chúng ta có thể cài bằng `pip`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "VD, sử dụng Jupyter Notebook console"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`!pip install seaborn`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Hoặc sử dụng terminal\n",
    "\n",
    "`pip install seaborn`  #cài bằng pip\n",
    "\n",
    "`conda install seaborn` # cài bằng anaconda"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Phân biệt Modules/packages/Libraries:** Khi làm việc với Python, ta sẽ thấy có 3 nhóm thuật ngữ sau\n",
    "- Function: Một hàm được người dùng tạo ra\n",
    "- Module: đơn giản là 1 file .py chứa 1 hoặc nhiều function/class nhằm mục đích tái sử dụng sau này, một module có thể chứa nhiều hàm\n",
    "- Package: đường dẫn đến thư mục chứa:\n",
    "    - Nhiều Python module. \n",
    "    - 1 file đặc biệt là `__init.py__`\n",
    "\n",
    "VD: Python package trong windows thường được chứa tại `C:\\Users\\anhnt67\\AppData\\Local\\Continuum\\anaconda3\\Lib\\site-packages`\n",
    "- Library: ở Python, library và package được dùng thay thế lẫn nhau"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Import Modules/packages**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.0"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Import cả package, khi cần sử dụng function, gọi tên package trước\n",
    "import numpy as np\n",
    "np.sqrt(9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.0"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Chỉ import function trong packages\n",
    "from numpy import sqrt\n",
    "sqrt(9)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Cài đặt packages khi bị chặn proxy "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Cài đặt với conda**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Download package từ trang web: https://anaconda.org\n",
    "- Cài đặt với câu lệnh sau\n",
    "\n",
    "`conda install --offline jupyter_contrib_core-0.3.3-py36_1.tar.bz2`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Cài đặt với pip**\n",
    "\n",
    "- Clone folder từ github\n",
    "- Mở terminal/cmd trong thư mục chưa project\n",
    "- Thực hiện câu lệnh sau:\n",
    "\n",
    "`pip install -e nbextensions`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Kiểm tra thư viện Python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['C:\\\\Users\\\\anhhd3\\\\AppData\\\\Local\\\\Continuum\\\\anaconda3',\n",
       " 'C:\\\\Users\\\\anhhd3\\\\AppData\\\\Local\\\\Continuum\\\\anaconda3\\\\lib\\\\site-packages']"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import site\n",
    "site.getsitepackages()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Ta có thể copy thư viện Python như làm việc với R"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Một số câu lệnh cơ bản"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "E:\\Anhnt67\\05. Learning\\OneDrive - VPBank\\3. Machine Learning\\Python\\Self_learning\\Introduction to Python\n"
     ]
    }
   ],
   "source": [
    "# Thư mục hiện hành\n",
    "cwd = %pwd\n",
    "print(cwd)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "E:\\Anhnt67\\05. Learning\\OneDrive - VPBank\\3. Machine Learning\\Python\\Self_learning\\Introduction to Python\n"
     ]
    }
   ],
   "source": [
    "# hoặc\n",
    "import os\n",
    "cwd = os.getcwd()\n",
    "print(cwd)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Volume in drive E has no label.\n",
      " Volume Serial Number is 722D-9649\n",
      "\n",
      " Directory of E:\\Anhnt67\\05. Learning\\OneDrive - VPBank\\3. Machine Learning\\Python\\Self_learning\\Introduction to Python\n",
      "\n",
      "06/27/2019  10:56 AM    <DIR>          .\n",
      "06/27/2019  10:56 AM    <DIR>          ..\n",
      "06/27/2019  10:56 AM    <DIR>          .ipynb_checkpoints\n",
      "06/26/2019  09:30 AM    <DIR>          Image\n",
      "06/26/2019  04:13 PM           470,588 Introduction_to_Python.html\n",
      "06/27/2019  10:12 AM           100,703 Introduction_to_Python.ipynb\n",
      "06/26/2019  04:11 PM             1,396 test.ipynb\n",
      "03/04/2019  11:21 AM            57,910 titanic.csv\n",
      "               4 File(s)        630,597 bytes\n",
      "               4 Dir(s)  154,702,786,560 bytes free\n"
     ]
    }
   ],
   "source": [
    "# List các file trong thư mục hiện hành\n",
    "%ls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tôi muốn học Python\n",
      "Tôi muốn học ML\n",
      "Tôi chả muốn học gì\n"
     ]
    }
   ],
   "source": [
    "# chạy file (trong thư mục hiện hành)\n",
    "%run test.ipynb"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Jupyter Notebook"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Jupyter Notebook** là IDE phổ biến nhất cho Python, Jupyter Notebook sử dụng *browser-based interface*, cho phép chúng ta hiển thị code, hình ảnh, bảng biểu... và viết note bằng Markdown - tương tự như RMarkdown"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Khi Anaconda được cài, chúng ta có thể truy cập trực tiếp vào Jupyter Notebook từ Anaconda, hoặc có thể vào cmd, gõ jupyter notebook và Enter"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Quay về edit mode: `Esc`\n",
    "- Hiển thị các phím tắt: `Ctrl + Shift + P`\n",
    "- Insert cell phía trên/ dưới: `Esc + A`, `Esc + B`\n",
    "- Chạy code: `Ctrl + Enter`\n",
    "- Chạy code & chuyển xuống cell dưới: `Shift + Enter`\n",
    "- Chuyển sang markdown, heading, raw: `Esc + 1`, `Esc + 2`, `Esc + M`, `Esc + R`\n",
    "- Chuyển về code: `Esc + Y`\n",
    "- Cut code: `Esc + X`\n",
    "- Comment/Uncomment: `Ctrl + /`\n",
    "- Chạy code & Insert below: `Alt + Enter`\n",
    "- `Shift + Enter`: run cell, move xuống dưới 1 dòng\n",
    "- `Alt + Enter`: run cell, insert 1 dòng phía dưới\n",
    "- `Up/ Down`: di chuyển lên xuống\n",
    "- `Enter`: edit 1 cell\n",
    "- `Esc D+D`: xóa 1 cell (nhớ tắt tiếng Việt)\n",
    "- `Esc + Z`: undo\n",
    "- `Esc + S`: save\n",
    "- `Ctrl + Shift + -`: Tách 1 cell thành 2 cell từ vị trí đặt con trỏ"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Cách hiển thị biểu đồ trong jupyer\n",
    "\n",
    "Sử dụng option `%matplotlib inline`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "plt.plot([1,2,3,4])\n",
    "plt.ylabel('some numbers')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Magic commands"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Trong `Python` có nhóm các câu lệnh được define sẵn được gọi là `magic command`. Các câu lệnh này cho phép thực hiện nhanh các nhóm lệnh khác."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/json": {
       "cell": {
        "!": "OSMagics",
        "HTML": "Other",
        "SVG": "Other",
        "bash": "Other",
        "capture": "ExecutionMagics",
        "cmd": "Other",
        "debug": "ExecutionMagics",
        "file": "Other",
        "html": "DisplayMagics",
        "javascript": "DisplayMagics",
        "js": "DisplayMagics",
        "latex": "DisplayMagics",
        "markdown": "DisplayMagics",
        "perl": "Other",
        "prun": "ExecutionMagics",
        "pypy": "Other",
        "python": "Other",
        "python2": "Other",
        "python3": "Other",
        "ruby": "Other",
        "script": "ScriptMagics",
        "sh": "Other",
        "svg": "DisplayMagics",
        "sx": "OSMagics",
        "system": "OSMagics",
        "time": "ExecutionMagics",
        "timeit": "ExecutionMagics",
        "writefile": "OSMagics"
       },
       "line": {
        "alias": "OSMagics",
        "alias_magic": "BasicMagics",
        "autoawait": "AsyncMagics",
        "autocall": "AutoMagics",
        "automagic": "AutoMagics",
        "autosave": "KernelMagics",
        "bookmark": "OSMagics",
        "cd": "OSMagics",
        "clear": "KernelMagics",
        "cls": "KernelMagics",
        "colors": "BasicMagics",
        "config": "ConfigMagics",
        "connect_info": "KernelMagics",
        "copy": "Other",
        "ddir": "Other",
        "debug": "ExecutionMagics",
        "dhist": "OSMagics",
        "dirs": "OSMagics",
        "doctest_mode": "BasicMagics",
        "echo": "Other",
        "ed": "Other",
        "edit": "KernelMagics",
        "env": "OSMagics",
        "gui": "BasicMagics",
        "hist": "Other",
        "history": "HistoryMagics",
        "killbgscripts": "ScriptMagics",
        "ldir": "Other",
        "less": "KernelMagics",
        "load": "CodeMagics",
        "load_ext": "ExtensionMagics",
        "loadpy": "CodeMagics",
        "logoff": "LoggingMagics",
        "logon": "LoggingMagics",
        "logstart": "LoggingMagics",
        "logstate": "LoggingMagics",
        "logstop": "LoggingMagics",
        "ls": "Other",
        "lsmagic": "BasicMagics",
        "macro": "ExecutionMagics",
        "magic": "BasicMagics",
        "matplotlib": "PylabMagics",
        "mkdir": "Other",
        "more": "KernelMagics",
        "notebook": "BasicMagics",
        "page": "BasicMagics",
        "pastebin": "CodeMagics",
        "pdb": "ExecutionMagics",
        "pdef": "NamespaceMagics",
        "pdoc": "NamespaceMagics",
        "pfile": "NamespaceMagics",
        "pinfo": "NamespaceMagics",
        "pinfo2": "NamespaceMagics",
        "pip": "BasicMagics",
        "popd": "OSMagics",
        "pprint": "BasicMagics",
        "precision": "BasicMagics",
        "prun": "ExecutionMagics",
        "psearch": "NamespaceMagics",
        "psource": "NamespaceMagics",
        "pushd": "OSMagics",
        "pwd": "OSMagics",
        "pycat": "OSMagics",
        "pylab": "PylabMagics",
        "qtconsole": "KernelMagics",
        "quickref": "BasicMagics",
        "recall": "HistoryMagics",
        "rehashx": "OSMagics",
        "reload_ext": "ExtensionMagics",
        "ren": "Other",
        "rep": "Other",
        "rerun": "HistoryMagics",
        "reset": "NamespaceMagics",
        "reset_selective": "NamespaceMagics",
        "rmdir": "Other",
        "run": "ExecutionMagics",
        "save": "CodeMagics",
        "sc": "OSMagics",
        "set_env": "OSMagics",
        "store": "StoreMagics",
        "sx": "OSMagics",
        "system": "OSMagics",
        "tb": "ExecutionMagics",
        "time": "ExecutionMagics",
        "timeit": "ExecutionMagics",
        "unalias": "OSMagics",
        "unload_ext": "ExtensionMagics",
        "who": "NamespaceMagics",
        "who_ls": "NamespaceMagics",
        "whos": "NamespaceMagics",
        "xdel": "NamespaceMagics",
        "xmode": "BasicMagics"
       }
      },
      "text/plain": [
       "Available line magics:\n",
       "%alias  %alias_magic  %autoawait  %autocall  %automagic  %autosave  %bookmark  %cd  %clear  %cls  %colors  %config  %connect_info  %copy  %ddir  %debug  %dhist  %dirs  %doctest_mode  %echo  %ed  %edit  %env  %gui  %hist  %history  %killbgscripts  %ldir  %less  %load  %load_ext  %loadpy  %logoff  %logon  %logstart  %logstate  %logstop  %ls  %lsmagic  %macro  %magic  %matplotlib  %mkdir  %more  %notebook  %page  %pastebin  %pdb  %pdef  %pdoc  %pfile  %pinfo  %pinfo2  %popd  %pprint  %precision  %prun  %psearch  %psource  %pushd  %pwd  %pycat  %pylab  %qtconsole  %quickref  %recall  %rehashx  %reload_ext  %ren  %rep  %rerun  %reset  %reset_selective  %rmdir  %run  %save  %sc  %set_env  %store  %sx  %system  %tb  %time  %timeit  %unalias  %unload_ext  %who  %who_ls  %whos  %xdel  %xmode\n",
       "\n",
       "Available cell magics:\n",
       "%%!  %%HTML  %%SVG  %%bash  %%capture  %%cmd  %%debug  %%file  %%html  %%javascript  %%js  %%latex  %%markdown  %%perl  %%prun  %%pypy  %%python  %%python2  %%python3  %%ruby  %%script  %%sh  %%svg  %%sx  %%system  %%time  %%timeit  %%writefile\n",
       "\n",
       "Automagic is ON, % prefix IS NOT needed for line magics."
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%lsmagic"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Các magic command thường dùng\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'F:\\\\OneDrive - VPBank\\\\02. Python'"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Project working directory\n",
    "%pwd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C:\\Users\\anhhd3\n"
     ]
    }
   ],
   "source": [
    "# Current directory in in Python\n",
    "%cd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Volume in drive C has no label.\n",
      " Volume Serial Number is 72EA-F7D1\n",
      "\n",
      " Directory of C:\\Users\\anhhd3\n",
      "\n",
      "02/18/2019  02:19 PM    <DIR>          .\n",
      "02/18/2019  02:19 PM    <DIR>          ..\n",
      "03/02/2018  05:17 PM    <DIR>          .anaconda\n",
      "08/21/2017  08:39 AM    <DIR>          .astropy\n",
      "11/23/2018  08:59 AM    <DIR>          .atom\n",
      "02/18/2019  03:01 PM            15,386 .bash_history\n",
      "09/06/2017  04:50 PM    <DIR>          .boot2docker\n",
      "07/06/2018  01:24 PM    <DIR>          .conda\n",
      "03/02/2018  05:19 PM                43 .condarc\n",
      "02/16/2019  08:12 AM    <DIR>          .config\n",
      "08/20/2018  08:40 AM    <DIR>          .docker\n",
      "08/15/2017  04:43 PM    <DIR>          .gem\n",
      "02/18/2019  11:14 AM               340 .gitconfig\n",
      "12/11/2017  09:00 AM    <DIR>          .gradle\n",
      "04/23/2018  08:19 AM    <DIR>          .ipynb_checkpoints\n",
      "08/14/2017  08:56 AM    <DIR>          .ipython\n",
      "02/16/2019  08:13 AM    <DIR>          .jupyter\n",
      "02/18/2019  06:04 PM    <DIR>          .matplotlib\n",
      "02/18/2019  02:19 PM                 0 .node_repl_history\n",
      "02/19/2019  08:03 AM               183 .npmrc\n",
      "08/10/2018  08:57 AM    <DIR>          .oracle_jre_usage\n",
      "01/31/2019  05:22 PM    <DIR>          .spyder\n",
      "01/31/2019  02:32 PM    <DIR>          .spyder-py3\n",
      "09/06/2017  04:51 PM    <DIR>          .ssh\n",
      "05/03/2017  01:09 PM    <DIR>          .vagrant.d\n",
      "11/16/2018  05:11 PM             1,560 .viminfo\n",
      "12/08/2017  01:51 PM    <DIR>          .VirtualBox\n",
      "02/18/2019  11:04 AM               121 .yarnrc\n",
      "11/20/2017  06:07 PM             4,805 01. Hu?ng d?n co b?n Python.ipynb\n",
      "04/23/2018  08:26 AM            97,209 Chapter 01 Pandas Foundations.ipynb\n",
      "01/15/2018  08:09 AM    <DIR>          Contacts\n",
      "01/23/2018  01:41 PM         5,685,248 customers (1).xls_20180123\n",
      "02/19/2019  08:57 AM    <DIR>          Desktop\n",
      "02/15/2019  06:24 PM    <DIR>          Documents\n",
      "02/19/2019  08:56 AM    <DIR>          Downloads\n",
      "01/15/2018  08:09 AM    <DIR>          Favorites\n",
      "04/11/2017  02:50 PM    <DIR>          h2oflows\n",
      "03/29/2018  08:46 AM    <DIR>          Links\n",
      "07/20/2018  01:39 PM                74 mercurial.ini\n",
      "01/15/2018  08:09 AM    <DIR>          Music\n",
      "02/18/2019  01:51 PM    <DIR>          node_modules\n",
      "02/16/2019  08:40 AM    <DIR>          OneDrive\n",
      "02/18/2019  01:50 PM           170,180 package-lock.json\n",
      "04/23/2018  08:06 AM            16,471 Pandas.ipynb\n",
      "07/16/2009  12:18 AM            51,150 pdf2oo\n",
      "09/24/2018  04:23 PM    <DIR>          Pictures\n",
      "08/21/2017  08:36 AM    <DIR>          PycharmProjects\n",
      "04/23/2018  05:46 PM           900,804 rodeo.log\n",
      "02/05/2018  10:52 AM                 0 rstudio-keras.tar\n",
      "01/15/2018  08:09 AM    <DIR>          Saved Games\n",
      "01/15/2018  08:09 AM    <DIR>          Searches\n",
      "04/23/2018  07:59 AM               959 Untitled.ipynb\n",
      "01/15/2018  08:09 AM    <DIR>          Videos\n",
      "12/05/2017  11:58 AM    <DIR>          VirtualBox VMs\n",
      "              17 File(s)      6,944,533 bytes\n",
      "              37 Dir(s)  259,664,584,704 bytes free\n"
     ]
    }
   ],
   "source": [
    "ls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Volume in drive C has no label.\n",
      " Volume Serial Number is 72EA-F7D1\n",
      "\n",
      " Directory of C:\\Users\\anhhd3\n",
      "\n",
      "02/18/2019  02:19 PM    <DIR>          .\n",
      "02/18/2019  02:19 PM    <DIR>          ..\n",
      "03/02/2018  05:17 PM    <DIR>          .anaconda\n",
      "08/21/2017  08:39 AM    <DIR>          .astropy\n",
      "11/23/2018  08:59 AM    <DIR>          .atom\n",
      "02/18/2019  03:01 PM            15,386 .bash_history\n",
      "09/06/2017  04:50 PM    <DIR>          .boot2docker\n",
      "07/06/2018  01:24 PM    <DIR>          .conda\n",
      "03/02/2018  05:19 PM                43 .condarc\n",
      "02/16/2019  08:12 AM    <DIR>          .config\n",
      "08/20/2018  08:40 AM    <DIR>          .docker\n",
      "08/15/2017  04:43 PM    <DIR>          .gem\n",
      "02/18/2019  11:14 AM               340 .gitconfig\n",
      "12/11/2017  09:00 AM    <DIR>          .gradle\n",
      "04/23/2018  08:19 AM    <DIR>          .ipynb_checkpoints\n",
      "08/14/2017  08:56 AM    <DIR>          .ipython\n",
      "02/16/2019  08:13 AM    <DIR>          .jupyter\n",
      "02/18/2019  06:04 PM    <DIR>          .matplotlib\n",
      "02/18/2019  02:19 PM                 0 .node_repl_history\n",
      "02/19/2019  08:03 AM               183 .npmrc\n",
      "08/10/2018  08:57 AM    <DIR>          .oracle_jre_usage\n",
      "01/31/2019  05:22 PM    <DIR>          .spyder\n",
      "01/31/2019  02:32 PM    <DIR>          .spyder-py3\n",
      "09/06/2017  04:51 PM    <DIR>          .ssh\n",
      "05/03/2017  01:09 PM    <DIR>          .vagrant.d\n",
      "11/16/2018  05:11 PM             1,560 .viminfo\n",
      "12/08/2017  01:51 PM    <DIR>          .VirtualBox\n",
      "02/18/2019  11:04 AM               121 .yarnrc\n",
      "11/20/2017  06:07 PM             4,805 01. Hu?ng d?n co b?n Python.ipynb\n",
      "04/23/2018  08:26 AM            97,209 Chapter 01 Pandas Foundations.ipynb\n",
      "01/15/2018  08:09 AM    <DIR>          Contacts\n",
      "01/23/2018  01:41 PM         5,685,248 customers (1).xls_20180123\n",
      "02/19/2019  08:57 AM    <DIR>          Desktop\n",
      "02/15/2019  06:24 PM    <DIR>          Documents\n",
      "02/19/2019  08:56 AM    <DIR>          Downloads\n",
      "01/15/2018  08:09 AM    <DIR>          Favorites\n",
      "04/11/2017  02:50 PM    <DIR>          h2oflows\n",
      "03/29/2018  08:46 AM    <DIR>          Links\n",
      "07/20/2018  01:39 PM                74 mercurial.ini\n",
      "01/15/2018  08:09 AM    <DIR>          Music\n",
      "02/18/2019  01:51 PM    <DIR>          node_modules\n",
      "02/16/2019  08:40 AM    <DIR>          OneDrive\n",
      "02/18/2019  01:50 PM           170,180 package-lock.json\n",
      "04/23/2018  08:06 AM            16,471 Pandas.ipynb\n",
      "07/16/2009  12:18 AM            51,150 pdf2oo\n",
      "09/24/2018  04:23 PM    <DIR>          Pictures\n",
      "08/21/2017  08:36 AM    <DIR>          PycharmProjects\n",
      "04/23/2018  05:46 PM           900,804 rodeo.log\n",
      "02/05/2018  10:52 AM                 0 rstudio-keras.tar\n",
      "01/15/2018  08:09 AM    <DIR>          Saved Games\n",
      "01/15/2018  08:09 AM    <DIR>          Searches\n",
      "04/23/2018  07:59 AM               959 Untitled.ipynb\n",
      "01/15/2018  08:09 AM    <DIR>          Videos\n",
      "12/05/2017  11:58 AM    <DIR>          VirtualBox VMs\n",
      "              17 File(s)      6,944,533 bytes\n",
      "              37 Dir(s)  259,664,519,168 bytes free\n"
     ]
    }
   ],
   "source": [
    "%ls"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Viết công thức toán "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ta có thể viết công thức toán như rmarkdown thông thường."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$\\theta = \\sum_{i=1}^{n}X_{i}$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Cài đặt extension cho phép quản lý jupyter tốt hơn"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`conda install -c conda-forge jupyter_contrib_nbextensions jupyter_nbextensions_configurator`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Vào Nbextension\n",
    "- Chọn options table of contents\n",
    "- Chọn các parameters"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Cài đặt khi bị chặn proxy:\n",
    "\n",
    "- Làm theo hướng dẫn tại [https://github.com/ipython-contrib/jupyter_contrib_nbextensions](https://github.com/ipython-contrib/jupyter_contrib_nbextensions)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Thay đổi working directory "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'E:\\\\OneDrive - VPBank\\\\2. Python'"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%pwd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "E:\\OneDrive - VPBank\\2. Python\n"
     ]
    }
   ],
   "source": [
    "%cd \"E:\\OneDrive - VPBank\\2. Python\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Khi cài đặt Anaconda, lưu ý chọn option cho phép cài đặt PATH vào environment như hướng dẫn tại [link](https://medium.com/@GalarnykMichael/install-python-on-windows-anaconda-c63c7c3d1444)\n",
    "- Nếu quên không cài, cần thực hiện câu lệnh sau trên CMD\n",
    "\n",
    "`SETX PATH \"%PATH%;C:\\Users\\Admin\\Anaconda3\\Scripts; C:\\Users\\Admin\\Anaconda3\"` \n",
    "\n",
    "- Sau đó, đặt file .bat tại thư mục chứa các notebook đang lưu, thực hiện như sau:\n",
    "\n",
    "`\n",
    "rem \n",
    "dir\n",
    "jupyter notebook \n",
    "`\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Các lưu ý khác "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Xuống dòng trong code: Sử dụng dấu `\\` và không có dấu cách sau đấy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "7 + \\\n",
    "    8"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Comment với dấu #"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "72"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "8 * 9 #comment here"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Docs string: Cho phép hiển thị các thông tin trong docs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello, World!\n"
     ]
    }
   ],
   "source": [
    "\"\"\"This is a\n",
    "multiline docstring.\"\"\"\n",
    "print(\"Hello, World!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Help trong python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "np.square??"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Sử dụng tab để tự động điền các hàm hoặc khi import thư viện"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ví dụ: `np.TAB`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`from sklearn import da<TAB>`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Chạy external code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'F:\\\\OneDrive - VPBank\\\\02. Python'"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%pwd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 square is:  1\n",
      "2 square is:  4\n",
      "3 square is:  9\n"
     ]
    }
   ],
   "source": [
    "%run 09.test_script\\\\01_square.py"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Hiển thị code đã chạy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Jupyter notebook cho phép hiển thị các đoạn cell đã chạy trong cùng notebook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "get_ipython().run_line_magic('pwd', '')\n"
     ]
    }
   ],
   "source": [
    "print(In[8])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Làm việc với shell"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Python cho phép làm việc với shell trong Python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Volume in drive F is Setup\n",
      " Volume Serial Number is 5437-230D\n",
      "\n",
      " Directory of F:\\OneDrive - VPBank\\02. Python\n",
      "\n",
      "01/25/2019  03:29 PM    <DIR>          .\n",
      "01/25/2019  03:29 PM    <DIR>          ..\n",
      "08/27/2017  10:16 PM    <DIR>          .idea\n",
      "01/25/2019  03:09 PM    <DIR>          .ipynb_checkpoints\n",
      "01/09/2019  10:19 AM           279,587 01_Hu?ng d?n s? d?ng Jupyter Notebook.html\n",
      "01/25/2019  03:29 PM            29,927 01_Hu?ng d?n s? d?ng Jupyter Notebook.ipynb\n",
      "01/09/2019  10:20 AM            33,962 02_C c c?u tr£c co b?n trong python.ipynb\n",
      "01/25/2019  02:55 PM           186,212 03_S? d?ng Pandas.ipynb\n",
      "01/25/2019  03:11 PM    <DIR>          09.test_script\n",
      "01/25/2019  08:08 AM    <DIR>          1. Must read\n",
      "08/23/2018  05:15 PM            62,674 4_sklearn.ipynb\n",
      "11/29/2017  03:37 PM               208 Basic Python\n",
      "10/26/2018  08:10 AM    <DIR>          Hands-On-Automated-Machine-Learning\n",
      "07/09/2018  08:07 AM    <DIR>          Library\n",
      "07/09/2018  10:29 AM    <DIR>          Packages\n",
      "07/04/2018  12:54 AM                77 path.txt\n",
      "01/25/2019  02:52 PM    <DIR>          Python\n",
      "07/04/2018  12:55 AM                28 run_notebook_2.bat\n",
      "08/27/2018  08:13 AM    <DIR>          sklearn_tutorial\n",
      "01/25/2019  03:10 PM             1,816 Untitled.ipynb\n",
      "               9 File(s)        594,491 bytes\n",
      "              11 Dir(s)  58,917,511,168 bytes free\n"
     ]
    }
   ],
   "source": [
    "ls"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Để gán kết quả từ shell, sử dụng toán tử `!`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_content = !ls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "16"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(my_content)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Kiểm tra thời gian chạy code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 0 ns\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "4950"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%time sum(range(100))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Jupyter lab "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Jupyter lab là phiên bản tiếp theo của jupyter notebook. Jupyter lab cho phép làm việc thuận tiện hơn với các extension và IDE thân thiện với người dùng."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Cài đặt jupyter lab**:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Cài đặt nodejs: `conda install -c conda-forge jodejs`. Hoặc có thể download nodejs trực tiếp và cài đặt như bình thường"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Cài đặt jupyterlab `conda install -c conda-forge jupyterlab`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Cài đặt jupyterlab extension "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "        - jupytelab toc: `jupyter labextension install @jupyterlab/toc`\n",
    "        - Variable inspector: `jupyter labextension install @lckr/jupyterlab_variableinspector`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "    Ngoài ra, có thể cài thêm các extension khác như: `code-formatter`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Lưu ý**: Trong trường hợp cài đặt extension bị chặn proxy cần phải mở proxy như sau:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "npm config set https-proxy http://anhhd3:VPBank2016*@10.128.10.88:8080\n",
    "npm config set registry http://registry.npmjs.org/\n",
    "npm set strict-ssl=false"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Sphinx"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Mặc dù `jupyter notebook` là công cụ hữu hiệu để phân tích dữ liệu với Python, `jupyter` lại chưa phải là công cụ hữu hiệu để viết lại các document thành hệ thống. Để viết hiệu quả, ta cần dùng `sphinx`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Cài đặt sphinx\n",
    "pip install Sphinx"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Cài đặt template\n",
    "pip install sphinx_rtd_theme"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Cài đặt notebook for sphinx\n",
    "conda install -c conda-forge nbsphinx"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Sau khi cài đặt xong, ta có thể tạo project sphinx như sau"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sphinx-quickstart"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Các file notebook cần được liệt kê trong file `index.rst`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Sau khi set-up xong, toàn ta có thể run toàn bộ project như sau"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sphinx-build source_foder output_folder\n",
    "sphinx-build _source _build/html"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Tài liệu tham khảo\n",
    "\n",
    "- https://www.dataquest.io/blog/jupyter-notebook-tips-tricks-shortcuts/\n",
    "- https://jupyterlab.readthedocs.io/en/stable/getting_started/installation.html\n",
    "- https://nbsphinx.readthedocs.io/en/0.4.2/installation.html\n",
    "- https://sphinx-rtd-theme.readthedocs.io/en/stable/installing.html"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "273px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  },
  "toc-autonumbering": true,
  "toc-showcode": false,
  "toc-showmarkdowntxt": false,
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
