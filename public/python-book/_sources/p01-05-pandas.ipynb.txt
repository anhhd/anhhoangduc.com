{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "toc-hr-collapsed": false
   },
   "source": [
    "# Sử dụng pandas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Cơ bản về pandas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`Pandas` là viết tắt của `panel data`, pandas dataframe có thể coi như `dataframe` trong R"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Option hiển thị tối đa 8 dòng\n",
    "pd.options.display.max_rows = 8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'0.23.4'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Kiểm tra version pandas\n",
    "pd.__version__"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`dataframe` có thể được tạo ra từ các `Series`. `Series` có thể coi tương tự như `vector` trong R"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Germany           81.3\n",
       "Belgium           11.3\n",
       "France            64.3\n",
       "United Kingdom    64.9\n",
       "Netherlands       16.9\n",
       "dtype: float64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Tạo các data cần thiết\n",
    "# series\n",
    "population = pd.Series({'Germany': 81.3, 'Belgium': 11.3, 'France': 64.3, \n",
    "                        'United Kingdom': 64.9, 'Netherlands': 16.9})\n",
    "population"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country</th>\n",
       "      <th>population</th>\n",
       "      <th>area</th>\n",
       "      <th>capital</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Belgium</td>\n",
       "      <td>11.3</td>\n",
       "      <td>30510</td>\n",
       "      <td>Brussels</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>France</td>\n",
       "      <td>64.3</td>\n",
       "      <td>671308</td>\n",
       "      <td>Paris</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Germany</td>\n",
       "      <td>81.3</td>\n",
       "      <td>357050</td>\n",
       "      <td>Berlin</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Netherlands</td>\n",
       "      <td>16.9</td>\n",
       "      <td>41526</td>\n",
       "      <td>Amsterdam</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>64.9</td>\n",
       "      <td>244820</td>\n",
       "      <td>London</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          country  population    area    capital\n",
       "0         Belgium        11.3   30510   Brussels\n",
       "1          France        64.3  671308      Paris\n",
       "2         Germany        81.3  357050     Berlin\n",
       "3     Netherlands        16.9   41526  Amsterdam\n",
       "4  United Kingdom        64.9  244820     London"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# dataframe\n",
    "data = {'country': ['Belgium', 'France', 'Germany', 'Netherlands', 'United Kingdom'],\n",
    "        'population': [11.3, 64.3, 81.3, 16.9, 64.9],\n",
    "        'area': [30510, 671308, 357050, 41526, 244820],\n",
    "        'capital': ['Brussels', 'Paris', 'Berlin', 'Amsterdam', 'London']}\n",
    "countries = pd.DataFrame(data)\n",
    "countries"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Các cấu trúc dữ liệu cơ bản "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- List"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['One', 'Two']"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = ['One', \"Two\"]\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "list"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Dictionary: Có thêm index và không nhất thiết phải độ dài bằng nhau"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'state': ['Ohio', 'Ohio', 'Nevada'], 'year': [2000, 2001, 2002, 2003]}"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = {'state': ['Ohio', 'Ohio', 'Nevada'],\n",
    "     'year': [2000, 2001, 2002, 2003]}\n",
    "df\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Series"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Series là mảng một chiều, `Series` có thể chứa `index` và `values`. Series có thể coi như là mảng một chiều mở rộng của numpy array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    4\n",
       "1    5\n",
       "2   -7\n",
       "3    6\n",
       "dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "obj = pd.Series([4,5,-7, 6])\n",
    "obj"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 4,  5, -7,  6], dtype=int64)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "obj.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RangeIndex(start=0, stop=4, step=1)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "obj.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    5\n",
       "2   -7\n",
       "dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Lấy thành phần từ 1 đến 2\n",
    "obj[1:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['a', 'b', 'c', 'd'], dtype='object')"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Đổi lại index\n",
    "obj.index = ['a','b','c','d']\n",
    "obj.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "obj['a']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "a    4\n",
       "b    5\n",
       "d    6\n",
       "dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "obj[obj > 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "a     8\n",
       "b    10\n",
       "c   -14\n",
       "d    12\n",
       "dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "obj*2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "a    False\n",
       "b    False\n",
       "c    False\n",
       "d    False\n",
       "dtype: bool"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.isnull(obj)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "obj['a']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "a    True\n",
       "b    True\n",
       "c    True\n",
       "d    True\n",
       "dtype: bool"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.notnull(obj)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Biến category**: Trong pandas cho phép sử dụng biến category tương tự như factor của R"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count     4\n",
       "unique    3\n",
       "top       a\n",
       "freq      2\n",
       "dtype: object"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s = pd.Series([\"a\",\"b\",\"c\",\"a\"], dtype=\"category\")\n",
    "s.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### DataFrame "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "DataFrame có cấu trúc tương tự như R dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Tạo dictionary trong Python\n",
    "data = {'state': ['Ohio', 'Ohio', 'Ohio', 'Nevada', 'Nevada'],\n",
    "'year': [2000, 2001, 2002, 2001, 2002],\n",
    "'pop': [1.5, 1.7, 3.6, 2.4, 2.9]}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'pop': [1.5, 1.7, 3.6, 2.4, 2.9],\n",
       " 'state': ['Ohio', 'Ohio', 'Ohio', 'Nevada', 'Nevada'],\n",
       " 'year': [2000, 2001, 2002, 2001, 2002]}"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert sang data.frame\n",
    "frame = pd.DataFrame(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>year</th>\n",
       "      <th>pop</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Ohio</td>\n",
       "      <td>2000</td>\n",
       "      <td>1.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Ohio</td>\n",
       "      <td>2001</td>\n",
       "      <td>1.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Ohio</td>\n",
       "      <td>2002</td>\n",
       "      <td>3.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Nevada</td>\n",
       "      <td>2001</td>\n",
       "      <td>2.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Nevada</td>\n",
       "      <td>2002</td>\n",
       "      <td>2.9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    state  year  pop\n",
       "0    Ohio  2000  1.5\n",
       "1    Ohio  2001  1.7\n",
       "2    Ohio  2002  3.6\n",
       "3  Nevada  2001  2.4\n",
       "4  Nevada  2002  2.9"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "frame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "frame2 = pd.DataFrame(data, columns=['year', 'state', 'pop', 'debt'],\n",
    "                  index=['one', 'two', 'three', 'four', 'five'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>year</th>\n",
       "      <th>state</th>\n",
       "      <th>pop</th>\n",
       "      <th>debt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>one</th>\n",
       "      <td>2000</td>\n",
       "      <td>Ohio</td>\n",
       "      <td>1.5</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>two</th>\n",
       "      <td>2001</td>\n",
       "      <td>Ohio</td>\n",
       "      <td>1.7</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>three</th>\n",
       "      <td>2002</td>\n",
       "      <td>Ohio</td>\n",
       "      <td>3.6</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>four</th>\n",
       "      <td>2001</td>\n",
       "      <td>Nevada</td>\n",
       "      <td>2.4</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>five</th>\n",
       "      <td>2002</td>\n",
       "      <td>Nevada</td>\n",
       "      <td>2.9</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       year   state  pop debt\n",
       "one    2000    Ohio  1.5  NaN\n",
       "two    2001    Ohio  1.7  NaN\n",
       "three  2002    Ohio  3.6  NaN\n",
       "four   2001  Nevada  2.4  NaN\n",
       "five   2002  Nevada  2.9  NaN"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "frame2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Làm việc với DataFrame\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Chọn một biến"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "one      2000\n",
       "two      2001\n",
       "three    2002\n",
       "four     2001\n",
       "five     2002\n",
       "Name: year, dtype: int64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "frame2.year"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "one      2000\n",
       "two      2001\n",
       "three    2002\n",
       "four     2001\n",
       "five     2002\n",
       "Name: year, dtype: int64"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "frame2['year']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>year</th>\n",
       "      <th>state</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>one</th>\n",
       "      <td>2000</td>\n",
       "      <td>Ohio</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>two</th>\n",
       "      <td>2001</td>\n",
       "      <td>Ohio</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>three</th>\n",
       "      <td>2002</td>\n",
       "      <td>Ohio</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>four</th>\n",
       "      <td>2001</td>\n",
       "      <td>Nevada</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>five</th>\n",
       "      <td>2002</td>\n",
       "      <td>Nevada</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       year   state\n",
       "one    2000    Ohio\n",
       "two    2001    Ohio\n",
       "three  2002    Ohio\n",
       "four   2001  Nevada\n",
       "five   2002  Nevada"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "frame2[['year', 'state']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Tạo biến mới"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>year</th>\n",
       "      <th>state</th>\n",
       "      <th>pop</th>\n",
       "      <th>debt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>one</th>\n",
       "      <td>2000</td>\n",
       "      <td>Ohio</td>\n",
       "      <td>1.5</td>\n",
       "      <td>16.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>two</th>\n",
       "      <td>2001</td>\n",
       "      <td>Ohio</td>\n",
       "      <td>1.7</td>\n",
       "      <td>16.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>three</th>\n",
       "      <td>2002</td>\n",
       "      <td>Ohio</td>\n",
       "      <td>3.6</td>\n",
       "      <td>16.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>four</th>\n",
       "      <td>2001</td>\n",
       "      <td>Nevada</td>\n",
       "      <td>2.4</td>\n",
       "      <td>16.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>five</th>\n",
       "      <td>2002</td>\n",
       "      <td>Nevada</td>\n",
       "      <td>2.9</td>\n",
       "      <td>16.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       year   state  pop  debt\n",
       "one    2000    Ohio  1.5  16.5\n",
       "two    2001    Ohio  1.7  16.5\n",
       "three  2002    Ohio  3.6  16.5\n",
       "four   2001  Nevada  2.4  16.5\n",
       "five   2002  Nevada  2.9  16.5"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "frame2['debt'] = 16.5\n",
    "frame2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>year</th>\n",
       "      <th>state</th>\n",
       "      <th>pop</th>\n",
       "      <th>debt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>one</th>\n",
       "      <td>2000</td>\n",
       "      <td>Ohio</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>two</th>\n",
       "      <td>2001</td>\n",
       "      <td>Ohio</td>\n",
       "      <td>1.7</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>three</th>\n",
       "      <td>2002</td>\n",
       "      <td>Ohio</td>\n",
       "      <td>3.6</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>four</th>\n",
       "      <td>2001</td>\n",
       "      <td>Nevada</td>\n",
       "      <td>2.4</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>five</th>\n",
       "      <td>2002</td>\n",
       "      <td>Nevada</td>\n",
       "      <td>2.9</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       year   state  pop  debt\n",
       "one    2000    Ohio  1.5   0.0\n",
       "two    2001    Ohio  1.7   1.0\n",
       "three  2002    Ohio  3.6   2.0\n",
       "four   2001  Nevada  2.4   3.0\n",
       "five   2002  Nevada  2.9   4.0"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "frame2['debt'] = np.arange(5.)\n",
    "frame2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Index với loc và iloc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.Series(['a', 'b', 'c'], index = [1,3,5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    a\n",
       "3    b\n",
       "5    c\n",
       "dtype: object"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'a'"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Sử dụng index\n",
    "data[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'a'"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.loc[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'b'"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Sử dụng index theo vị trí, không phụ thuộc vào index\n",
    "data.iloc[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'c'"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.iloc[2]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Import dữ liệu trong pandas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Kết nối với database"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Đọc dữ liệu từ Database**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "# Do not run\n",
    "import pyodbc\n",
    "conn = pyodbc.connect(\n",
    "    r'DRIVER={ODBC Driver 13 for SQL Server};'\n",
    "    r'SERVER=ADMINMI-JTBJEPG;' # Name of server\n",
    "    r'DATABASE=learningsql;'   # Data base\n",
    "    r'UID=sa;'                 # User\n",
    "    r'PWD=123456'              # Password\n",
    "    )\n",
    "# cursor = conn.cursor()\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.read_sql_query('SELECT * FROM ACCOUNT', conn)\n",
    "df.head\n",
    "df.describe()\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Ghi dữ liệu vào database**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "tip = pd.read_csv(\"99_dataset/tips.csv\")\n",
    "from sqlalchemy import create_engine\n",
    "\n",
    "con = create_engine('mssql+pyodbc://sa:123@ADMIN/analytics?driver=ODBC Driver 13 for SQL Server')\n",
    "tip.to_sql('tip', con, if_exists='replace')\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import từ csv"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "df = pd.read_csv(\"file.csv\")\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Kiểm tra các kiểu dữ liệu có thể đọc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pd.read_clipboard\n",
       "pd.read_csv\n",
       "pd.read_excel\n",
       "pd.read_feather\n",
       "pd.read_fwf\n",
       "pd.read_gbq\n",
       "pd.read_hdf\n",
       "pd.read_html\n",
       "pd.read_json\n",
       "pd.read_msgpack\n",
       "pd.read_parquet\n",
       "pd.read_pickle\n",
       "pd.read_sas\n",
       "pd.read_sql\n",
       "pd.read_sql_query\n",
       "pd.read_sql_table\n",
       "pd.read_stata\n",
       "pd.read_table"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "?pd.read_*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\u001b[1;31mSignature:\u001b[0m\n",
       "\u001b[0mpd\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m\n",
       "\u001b[0m    \u001b[1;33m[\u001b[0m\u001b[1;34m'filepath_or_buffer'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m\"sep=','\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'delimiter=None'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m\"header='infer'\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'names=None'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'index_col=None'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'usecols=None'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'squeeze=False'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'prefix=None'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'mangle_dupe_cols=True'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'dtype=None'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'engine=None'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'converters=None'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'true_values=None'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'false_values=None'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'skipinitialspace=False'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'skiprows=None'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'nrows=None'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'na_values=None'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'keep_default_na=True'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'na_filter=True'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'verbose=False'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'skip_blank_lines=True'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'parse_dates=False'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'infer_datetime_format=False'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'keep_date_col=False'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'date_parser=None'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'dayfirst=False'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'iterator=False'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'chunksize=None'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m\"compression='infer'\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'thousands=None'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m\"decimal=b'.'\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'lineterminator=None'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'quotechar=\\'\"\\''\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'quoting=0'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'escapechar=None'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'comment=None'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'encoding=None'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'dialect=None'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'tupleize_cols=None'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'error_bad_lines=True'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'warn_bad_lines=True'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'skipfooter=0'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'doublequote=True'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'delim_whitespace=False'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'low_memory=True'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'memory_map=False'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'float_precision=None'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\n",
       "\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
       "\u001b[1;31mDocstring:\u001b[0m\n",
       "Read CSV (comma-separated) file into DataFrame\n",
       "\n",
       "Also supports optionally iterating or breaking of the file\n",
       "into chunks.\n",
       "\n",
       "Additional help can be found in the `online docs for IO Tools\n",
       "<http://pandas.pydata.org/pandas-docs/stable/io.html>`_.\n",
       "\n",
       "Parameters\n",
       "----------\n",
       "filepath_or_buffer : str, pathlib.Path, py._path.local.LocalPath or any \\\n",
       "object with a read() method (such as a file handle or StringIO)\n",
       "    The string could be a URL. Valid URL schemes include http, ftp, s3, and\n",
       "    file. For file URLs, a host is expected. For instance, a local file could\n",
       "    be file://localhost/path/to/table.csv\n",
       "sep : str, default ','\n",
       "    Delimiter to use. If sep is None, the C engine cannot automatically detect\n",
       "    the separator, but the Python parsing engine can, meaning the latter will\n",
       "    be used and automatically detect the separator by Python's builtin sniffer\n",
       "    tool, ``csv.Sniffer``. In addition, separators longer than 1 character and\n",
       "    different from ``'\\s+'`` will be interpreted as regular expressions and\n",
       "    will also force the use of the Python parsing engine. Note that regex\n",
       "    delimiters are prone to ignoring quoted data. Regex example: ``'\\r\\t'``\n",
       "delimiter : str, default ``None``\n",
       "    Alternative argument name for sep.\n",
       "delim_whitespace : boolean, default False\n",
       "    Specifies whether or not whitespace (e.g. ``' '`` or ``'\\t'``) will be\n",
       "    used as the sep. Equivalent to setting ``sep='\\s+'``. If this option\n",
       "    is set to True, nothing should be passed in for the ``delimiter``\n",
       "    parameter.\n",
       "\n",
       "    .. versionadded:: 0.18.1 support for the Python parser.\n",
       "\n",
       "header : int or list of ints, default 'infer'\n",
       "    Row number(s) to use as the column names, and the start of the\n",
       "    data.  Default behavior is to infer the column names: if no names\n",
       "    are passed the behavior is identical to ``header=0`` and column\n",
       "    names are inferred from the first line of the file, if column\n",
       "    names are passed explicitly then the behavior is identical to\n",
       "    ``header=None``. Explicitly pass ``header=0`` to be able to\n",
       "    replace existing names. The header can be a list of integers that\n",
       "    specify row locations for a multi-index on the columns\n",
       "    e.g. [0,1,3]. Intervening rows that are not specified will be\n",
       "    skipped (e.g. 2 in this example is skipped). Note that this\n",
       "    parameter ignores commented lines and empty lines if\n",
       "    ``skip_blank_lines=True``, so header=0 denotes the first line of\n",
       "    data rather than the first line of the file.\n",
       "names : array-like, default None\n",
       "    List of column names to use. If file contains no header row, then you\n",
       "    should explicitly pass header=None. Duplicates in this list will cause\n",
       "    a ``UserWarning`` to be issued.\n",
       "index_col : int or sequence or False, default None\n",
       "    Column to use as the row labels of the DataFrame. If a sequence is given, a\n",
       "    MultiIndex is used. If you have a malformed file with delimiters at the end\n",
       "    of each line, you might consider index_col=False to force pandas to _not_\n",
       "    use the first column as the index (row names)\n",
       "usecols : list-like or callable, default None\n",
       "    Return a subset of the columns. If list-like, all elements must either\n",
       "    be positional (i.e. integer indices into the document columns) or strings\n",
       "    that correspond to column names provided either by the user in `names` or\n",
       "    inferred from the document header row(s). For example, a valid list-like\n",
       "    `usecols` parameter would be [0, 1, 2] or ['foo', 'bar', 'baz']. Element\n",
       "    order is ignored, so ``usecols=[0, 1]`` is the same as ``[1, 0]``.\n",
       "    To instantiate a DataFrame from ``data`` with element order preserved use\n",
       "    ``pd.read_csv(data, usecols=['foo', 'bar'])[['foo', 'bar']]`` for columns\n",
       "    in ``['foo', 'bar']`` order or\n",
       "    ``pd.read_csv(data, usecols=['foo', 'bar'])[['bar', 'foo']]``\n",
       "    for ``['bar', 'foo']`` order.\n",
       "\n",
       "    If callable, the callable function will be evaluated against the column\n",
       "    names, returning names where the callable function evaluates to True. An\n",
       "    example of a valid callable argument would be ``lambda x: x.upper() in\n",
       "    ['AAA', 'BBB', 'DDD']``. Using this parameter results in much faster\n",
       "    parsing time and lower memory usage.\n",
       "squeeze : boolean, default False\n",
       "    If the parsed data only contains one column then return a Series\n",
       "prefix : str, default None\n",
       "    Prefix to add to column numbers when no header, e.g. 'X' for X0, X1, ...\n",
       "mangle_dupe_cols : boolean, default True\n",
       "    Duplicate columns will be specified as 'X', 'X.1', ...'X.N', rather than\n",
       "    'X'...'X'. Passing in False will cause data to be overwritten if there\n",
       "    are duplicate names in the columns.\n",
       "dtype : Type name or dict of column -> type, default None\n",
       "    Data type for data or columns. E.g. {'a': np.float64, 'b': np.int32}\n",
       "    Use `str` or `object` together with suitable `na_values` settings\n",
       "    to preserve and not interpret dtype.\n",
       "    If converters are specified, they will be applied INSTEAD\n",
       "    of dtype conversion.\n",
       "engine : {'c', 'python'}, optional\n",
       "    Parser engine to use. The C engine is faster while the python engine is\n",
       "    currently more feature-complete.\n",
       "converters : dict, default None\n",
       "    Dict of functions for converting values in certain columns. Keys can either\n",
       "    be integers or column labels\n",
       "true_values : list, default None\n",
       "    Values to consider as True\n",
       "false_values : list, default None\n",
       "    Values to consider as False\n",
       "skipinitialspace : boolean, default False\n",
       "    Skip spaces after delimiter.\n",
       "skiprows : list-like or integer or callable, default None\n",
       "    Line numbers to skip (0-indexed) or number of lines to skip (int)\n",
       "    at the start of the file.\n",
       "\n",
       "    If callable, the callable function will be evaluated against the row\n",
       "    indices, returning True if the row should be skipped and False otherwise.\n",
       "    An example of a valid callable argument would be ``lambda x: x in [0, 2]``.\n",
       "skipfooter : int, default 0\n",
       "    Number of lines at bottom of file to skip (Unsupported with engine='c')\n",
       "nrows : int, default None\n",
       "    Number of rows of file to read. Useful for reading pieces of large files\n",
       "na_values : scalar, str, list-like, or dict, default None\n",
       "    Additional strings to recognize as NA/NaN. If dict passed, specific\n",
       "    per-column NA values.  By default the following values are interpreted as\n",
       "    NaN: '', '#N/A', '#N/A N/A', '#NA', '-1.#IND', '-1.#QNAN', '-NaN', '-nan',\n",
       "    '1.#IND', '1.#QNAN', 'N/A', 'NA', 'NULL', 'NaN', 'n/a', 'nan',\n",
       "    'null'.\n",
       "keep_default_na : bool, default True\n",
       "    Whether or not to include the default NaN values when parsing the data.\n",
       "    Depending on whether `na_values` is passed in, the behavior is as follows:\n",
       "\n",
       "    * If `keep_default_na` is True, and `na_values` are specified, `na_values`\n",
       "      is appended to the default NaN values used for parsing.\n",
       "    * If `keep_default_na` is True, and `na_values` are not specified, only\n",
       "      the default NaN values are used for parsing.\n",
       "    * If `keep_default_na` is False, and `na_values` are specified, only\n",
       "      the NaN values specified `na_values` are used for parsing.\n",
       "    * If `keep_default_na` is False, and `na_values` are not specified, no\n",
       "      strings will be parsed as NaN.\n",
       "\n",
       "    Note that if `na_filter` is passed in as False, the `keep_default_na` and\n",
       "    `na_values` parameters will be ignored.\n",
       "na_filter : boolean, default True\n",
       "    Detect missing value markers (empty strings and the value of na_values). In\n",
       "    data without any NAs, passing na_filter=False can improve the performance\n",
       "    of reading a large file\n",
       "verbose : boolean, default False\n",
       "    Indicate number of NA values placed in non-numeric columns\n",
       "skip_blank_lines : boolean, default True\n",
       "    If True, skip over blank lines rather than interpreting as NaN values\n",
       "parse_dates : boolean or list of ints or names or list of lists or dict, default False\n",
       "\n",
       "    * boolean. If True -> try parsing the index.\n",
       "    * list of ints or names. e.g. If [1, 2, 3] -> try parsing columns 1, 2, 3\n",
       "      each as a separate date column.\n",
       "    * list of lists. e.g.  If [[1, 3]] -> combine columns 1 and 3 and parse as\n",
       "      a single date column.\n",
       "    * dict, e.g. {'foo' : [1, 3]} -> parse columns 1, 3 as date and call result\n",
       "      'foo'\n",
       "\n",
       "    If a column or index contains an unparseable date, the entire column or\n",
       "    index will be returned unaltered as an object data type. For non-standard\n",
       "    datetime parsing, use ``pd.to_datetime`` after ``pd.read_csv``\n",
       "\n",
       "    Note: A fast-path exists for iso8601-formatted dates.\n",
       "infer_datetime_format : boolean, default False\n",
       "    If True and `parse_dates` is enabled, pandas will attempt to infer the\n",
       "    format of the datetime strings in the columns, and if it can be inferred,\n",
       "    switch to a faster method of parsing them. In some cases this can increase\n",
       "    the parsing speed by 5-10x.\n",
       "keep_date_col : boolean, default False\n",
       "    If True and `parse_dates` specifies combining multiple columns then\n",
       "    keep the original columns.\n",
       "date_parser : function, default None\n",
       "    Function to use for converting a sequence of string columns to an array of\n",
       "    datetime instances. The default uses ``dateutil.parser.parser`` to do the\n",
       "    conversion. Pandas will try to call `date_parser` in three different ways,\n",
       "    advancing to the next if an exception occurs: 1) Pass one or more arrays\n",
       "    (as defined by `parse_dates`) as arguments; 2) concatenate (row-wise) the\n",
       "    string values from the columns defined by `parse_dates` into a single array\n",
       "    and pass that; and 3) call `date_parser` once for each row using one or\n",
       "    more strings (corresponding to the columns defined by `parse_dates`) as\n",
       "    arguments.\n",
       "dayfirst : boolean, default False\n",
       "    DD/MM format dates, international and European format\n",
       "iterator : boolean, default False\n",
       "    Return TextFileReader object for iteration or getting chunks with\n",
       "    ``get_chunk()``.\n",
       "chunksize : int, default None\n",
       "    Return TextFileReader object for iteration.\n",
       "    See the `IO Tools docs\n",
       "    <http://pandas.pydata.org/pandas-docs/stable/io.html#io-chunking>`_\n",
       "    for more information on ``iterator`` and ``chunksize``.\n",
       "compression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}, default 'infer'\n",
       "    For on-the-fly decompression of on-disk data. If 'infer' and\n",
       "    `filepath_or_buffer` is path-like, then detect compression from the\n",
       "    following extensions: '.gz', '.bz2', '.zip', or '.xz' (otherwise no\n",
       "    decompression). If using 'zip', the ZIP file must contain only one data\n",
       "    file to be read in. Set to None for no decompression.\n",
       "\n",
       "    .. versionadded:: 0.18.1 support for 'zip' and 'xz' compression.\n",
       "\n",
       "thousands : str, default None\n",
       "    Thousands separator\n",
       "decimal : str, default '.'\n",
       "    Character to recognize as decimal point (e.g. use ',' for European data).\n",
       "float_precision : string, default None\n",
       "    Specifies which converter the C engine should use for floating-point\n",
       "    values. The options are `None` for the ordinary converter,\n",
       "    `high` for the high-precision converter, and `round_trip` for the\n",
       "    round-trip converter.\n",
       "lineterminator : str (length 1), default None\n",
       "    Character to break file into lines. Only valid with C parser.\n",
       "quotechar : str (length 1), optional\n",
       "    The character used to denote the start and end of a quoted item. Quoted\n",
       "    items can include the delimiter and it will be ignored.\n",
       "quoting : int or csv.QUOTE_* instance, default 0\n",
       "    Control field quoting behavior per ``csv.QUOTE_*`` constants. Use one of\n",
       "    QUOTE_MINIMAL (0), QUOTE_ALL (1), QUOTE_NONNUMERIC (2) or QUOTE_NONE (3).\n",
       "doublequote : boolean, default ``True``\n",
       "   When quotechar is specified and quoting is not ``QUOTE_NONE``, indicate\n",
       "   whether or not to interpret two consecutive quotechar elements INSIDE a\n",
       "   field as a single ``quotechar`` element.\n",
       "escapechar : str (length 1), default None\n",
       "    One-character string used to escape delimiter when quoting is QUOTE_NONE.\n",
       "comment : str, default None\n",
       "    Indicates remainder of line should not be parsed. If found at the beginning\n",
       "    of a line, the line will be ignored altogether. This parameter must be a\n",
       "    single character. Like empty lines (as long as ``skip_blank_lines=True``),\n",
       "    fully commented lines are ignored by the parameter `header` but not by\n",
       "    `skiprows`. For example, if ``comment='#'``, parsing\n",
       "    ``#empty\\na,b,c\\n1,2,3`` with ``header=0`` will result in 'a,b,c' being\n",
       "    treated as the header.\n",
       "encoding : str, default None\n",
       "    Encoding to use for UTF when reading/writing (ex. 'utf-8'). `List of Python\n",
       "    standard encodings\n",
       "    <https://docs.python.org/3/library/codecs.html#standard-encodings>`_\n",
       "dialect : str or csv.Dialect instance, default None\n",
       "    If provided, this parameter will override values (default or not) for the\n",
       "    following parameters: `delimiter`, `doublequote`, `escapechar`,\n",
       "    `skipinitialspace`, `quotechar`, and `quoting`. If it is necessary to\n",
       "    override values, a ParserWarning will be issued. See csv.Dialect\n",
       "    documentation for more details.\n",
       "tupleize_cols : boolean, default False\n",
       "    .. deprecated:: 0.21.0\n",
       "       This argument will be removed and will always convert to MultiIndex\n",
       "\n",
       "    Leave a list of tuples on columns as is (default is to convert to\n",
       "    a MultiIndex on the columns)\n",
       "error_bad_lines : boolean, default True\n",
       "    Lines with too many fields (e.g. a csv line with too many commas) will by\n",
       "    default cause an exception to be raised, and no DataFrame will be returned.\n",
       "    If False, then these \"bad lines\" will dropped from the DataFrame that is\n",
       "    returned.\n",
       "warn_bad_lines : boolean, default True\n",
       "    If error_bad_lines is False, and warn_bad_lines is True, a warning for each\n",
       "    \"bad line\" will be output.\n",
       "low_memory : boolean, default True\n",
       "    Internally process the file in chunks, resulting in lower memory use\n",
       "    while parsing, but possibly mixed type inference.  To ensure no mixed\n",
       "    types either set False, or specify the type with the `dtype` parameter.\n",
       "    Note that the entire file is read into a single DataFrame regardless,\n",
       "    use the `chunksize` or `iterator` parameter to return the data in chunks.\n",
       "    (Only valid with C parser)\n",
       "memory_map : boolean, default False\n",
       "    If a filepath is provided for `filepath_or_buffer`, map the file object\n",
       "    directly onto memory and access the data directly from there. Using this\n",
       "    option can improve performance because there is no longer any I/O overhead.\n",
       "\n",
       "Returns\n",
       "-------\n",
       "result : DataFrame or TextParser\n",
       "\u001b[1;31mFile:\u001b[0m      c:\\users\\anhhd3\\appdata\\local\\continuum\\anaconda3\\lib\\site-packages\\pandas\\io\\parsers.py\n",
       "\u001b[1;31mType:\u001b[0m      function\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "?pd.read_csv"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Các câu lệnh cơ bản với dataframe "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import datasets\n",
    "df = datasets.load_iris()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal length (cm)</th>\n",
       "      <th>sepal width (cm)</th>\n",
       "      <th>petal length (cm)</th>\n",
       "      <th>petal width (cm)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)\n",
       "0                5.1               3.5                1.4               0.2\n",
       "1                4.9               3.0                1.4               0.2\n",
       "2                4.7               3.2                1.3               0.2"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris = pd.DataFrame(df.data,\n",
    "                   columns = df.feature_names)\n",
    "iris.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)',\n",
       "       'petal width (cm)'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Rename"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Cấu trúc**:\n",
    "`df.rename(columns = {old_var : new_var})`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "iris2 = iris.rename(columns = {'sepal length (cm)' : 'sepal_length',\\\n",
    "                   'sepal width (cm)' : 'sepal_width',\n",
    "                   'petal length (cm)' : 'petal_length',\n",
    "                   'petal width (cm)' : 'petal_width'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['sepal_length', 'sepal_width', 'petal_length', 'petal_width'], dtype='object')"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris2.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tạo biến mới "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "iris2['new_var'] = 17"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal_length</th>\n",
       "      <th>sepal_width</th>\n",
       "      <th>petal_length</th>\n",
       "      <th>petal_width</th>\n",
       "      <th>new_var</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   sepal_length  sepal_width  petal_length  petal_width  new_var\n",
       "0           5.1          3.5           1.4          0.2       17\n",
       "1           4.9          3.0           1.4          0.2       17\n",
       "2           4.7          3.2           1.3          0.2       17"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris2.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Drop biến\n",
    "iris2 = iris2.drop('new_var',\\\n",
    "                  axis = 'columns')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal_length</th>\n",
       "      <th>sepal_width</th>\n",
       "      <th>petal_length</th>\n",
       "      <th>petal_width</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   sepal_length  sepal_width  petal_length  petal_width\n",
       "0           5.1          3.5           1.4          0.2\n",
       "1           4.9          3.0           1.4          0.2\n",
       "2           4.7          3.2           1.3          0.2"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris2.head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Trong `pandas`, do DF được xử lý theo cả hai chiều nên cần khai báo axis = 'columns'\n",
    "- Có thể rename index, khi đó khai báo `axis = 'index'`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal_length</th>\n",
       "      <th>sepal_width</th>\n",
       "      <th>petal_length</th>\n",
       "      <th>petal_width</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>a</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   sepal_length  sepal_width  petal_length  petal_width\n",
       "0           5.1          3.5           1.4          0.2\n",
       "a           4.9          3.0           1.4          0.2\n",
       "2           4.7          3.2           1.3          0.2\n",
       "3           4.6          3.1           1.5          0.2"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris2.rename({1:'a'}, axis = 'index').head(4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Select "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Trong pandas, cách chọn biến không cho phép sử dụng `lazy evaluation` nên phép select phải liệt kê các cột tương tự như trong R base"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**R**\n",
    "\n",
    "select(df, var1, var2)\n",
    "\n",
    "select(df, -var3)\n",
    "\n",
    "**Python**\n",
    "\n",
    "df[['var1', 'var2']]\n",
    "\n",
    "df.drop('var3', 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "col_var = ['sepal_length', 'sepal_width']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal_length</th>\n",
       "      <th>sepal_width</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   sepal_length  sepal_width\n",
       "0           5.1          3.5\n",
       "1           4.9          3.0\n",
       "2           4.7          3.2\n",
       "3           4.6          3.1"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris2[col_var].head(4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal_width</th>\n",
       "      <th>petal_length</th>\n",
       "      <th>petal_width</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   sepal_width  petal_length  petal_width\n",
       "0          3.5           1.4          0.2\n",
       "1          3.0           1.4          0.2\n",
       "2          3.2           1.3          0.2"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Bỏ biến sepal_length\n",
    "iris2.drop('sepal_length', 1).head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Lưu ý**: Do dataframe của Python đánh dấu theo hai chiều: 0 - dòng, 1 - cột. Do đó, cần thêm index 1 để thể hiện drop theo cột"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Select trong pandas cho phép tương tự `select_if` trong dplyr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "float64    4\n",
       "dtype: int64"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris2.get_dtype_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal_length</th>\n",
       "      <th>sepal_width</th>\n",
       "      <th>petal_length</th>\n",
       "      <th>petal_width</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   sepal_length  sepal_width  petal_length  petal_width\n",
       "0           5.1          3.5           1.4          0.2\n",
       "1           4.9          3.0           1.4          0.2\n",
       "2           4.7          3.2           1.3          0.2"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris2.select_dtypes(include = ['float64']).head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Chọn theo row cho phép sử dụng toán tử `:` như R"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal_length</th>\n",
       "      <th>sepal_width</th>\n",
       "      <th>petal_length</th>\n",
       "      <th>petal_width</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   sepal_length  sepal_width  petal_length  petal_width\n",
       "1           4.9          3.0           1.4          0.2\n",
       "2           4.7          3.2           1.3          0.2"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris2[1:3]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Select nâng cao"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Trong pandas, ta có thể lọc biến nâng cao với 3 options: `loc`, `iloc` và `ix`. \n",
    "\n",
    "- `iloc`: Cho phép lấy biến theo vị trí dạng integer\n",
    "- `loc`: Cho phép lọc theo tên \n",
    "- `ix`: Cho phép lọc theo cả hai cách trên. Tuy nhiên, ix ngày càng ít dùng"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal_length</th>\n",
       "      <th>sepal_width</th>\n",
       "      <th>petal_length</th>\n",
       "      <th>petal_width</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>6.3</td>\n",
       "      <td>2.5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>147</th>\n",
       "      <td>6.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148</th>\n",
       "      <td>6.2</td>\n",
       "      <td>3.4</td>\n",
       "      <td>5.4</td>\n",
       "      <td>2.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "      <td>5.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.1</td>\n",
       "      <td>1.8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>150 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     sepal_length  sepal_width  petal_length  petal_width\n",
       "0             5.1          3.5           1.4          0.2\n",
       "1             4.9          3.0           1.4          0.2\n",
       "2             4.7          3.2           1.3          0.2\n",
       "3             4.6          3.1           1.5          0.2\n",
       "..            ...          ...           ...          ...\n",
       "146           6.3          2.5           5.0          1.9\n",
       "147           6.5          3.0           5.2          2.0\n",
       "148           6.2          3.4           5.4          2.3\n",
       "149           5.9          3.0           5.1          1.8\n",
       "\n",
       "[150 rows x 4 columns]"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal_length</th>\n",
       "      <th>sepal_width</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   sepal_length  sepal_width\n",
       "0           5.1          3.5\n",
       "1           4.9          3.0\n",
       "2           4.7          3.2"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris2.iloc[:3, :2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal_width</th>\n",
       "      <th>petal_length</th>\n",
       "      <th>petal_width</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   sepal_width  petal_length  petal_width\n",
       "0          3.5           1.4          0.2\n",
       "1          3.0           1.4          0.2\n",
       "2          3.2           1.3          0.2\n",
       "3          3.1           1.5          0.2\n",
       "4          3.6           1.4          0.2"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris2.loc[:4,'sepal_width':'petal_width']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\anhhd3\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\ipykernel_launcher.py:1: DeprecationWarning: \n",
      ".ix is deprecated. Please use\n",
      ".loc for label based indexing or\n",
      ".iloc for positional indexing\n",
      "\n",
      "See the documentation here:\n",
      "http://pandas.pydata.org/pandas-docs/stable/indexing.html#ix-indexer-is-deprecated\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal_width</th>\n",
       "      <th>petal_length</th>\n",
       "      <th>petal_width</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   sepal_width  petal_length  petal_width\n",
       "0          3.5           1.4          0.2\n",
       "1          3.0           1.4          0.2\n",
       "2          3.2           1.3          0.2\n",
       "3          3.1           1.5          0.2\n",
       "4          3.6           1.4          0.2"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris2.ix[:4, 'sepal_width':'petal_width']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Arrange"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Không giống như R, `sort_values` là `method` trong Python\n",
    "\n",
    "`df.sort_values('var1')`\n",
    "\n",
    "`df.sort_values('var1', ascending=False)`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal_length</th>\n",
       "      <th>sepal_width</th>\n",
       "      <th>petal_length</th>\n",
       "      <th>petal_width</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>4.3</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.1</td>\n",
       "      <td>0.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>4.4</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>4.4</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    sepal_length  sepal_width  petal_length  petal_width\n",
       "13           4.3          3.0           1.1          0.1\n",
       "42           4.4          3.2           1.3          0.2\n",
       "38           4.4          3.0           1.3          0.2"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris2.sort_values('sepal_length').head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Filter"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**R**\n",
    "\n",
    "filter(df, var > 20000 & var < 30000) \n",
    "\n",
    "filter(df, var == 'string') # df %>% filter(var != 'string')\n",
    "\n",
    "df %>% filter(var != 'string')\n",
    "\n",
    "df %>% group_by(group) %>% filter(sum(var) > 2000000)\n",
    "\n",
    "**Python**\n",
    "\n",
    "df[(df['var'] > 20000) & (df['var'] < 30000)]\n",
    "\n",
    "df[df['var'] == 'string']\n",
    "\n",
    "df[df['var'] != 'string']\n",
    "\n",
    "df.groupby('group').filter(lambda x: sum(x['var']) > 2000000)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Cấu trúc filter của Pandas tương tự như R base"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal_length</th>\n",
       "      <th>sepal_width</th>\n",
       "      <th>petal_length</th>\n",
       "      <th>petal_width</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>6.3</td>\n",
       "      <td>2.5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>147</th>\n",
       "      <td>6.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148</th>\n",
       "      <td>6.2</td>\n",
       "      <td>3.4</td>\n",
       "      <td>5.4</td>\n",
       "      <td>2.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "      <td>5.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.1</td>\n",
       "      <td>1.8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>150 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     sepal_length  sepal_width  petal_length  petal_width\n",
       "0             5.1          3.5           1.4          0.2\n",
       "1             4.9          3.0           1.4          0.2\n",
       "2             4.7          3.2           1.3          0.2\n",
       "3             4.6          3.1           1.5          0.2\n",
       "..            ...          ...           ...          ...\n",
       "146           6.3          2.5           5.0          1.9\n",
       "147           6.5          3.0           5.2          2.0\n",
       "148           6.2          3.4           5.4          2.3\n",
       "149           5.9          3.0           5.1          1.8\n",
       "\n",
       "[150 rows x 4 columns]"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris2[iris2['sepal_length'] <10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>147</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>150 rows × 0 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: []\n",
       "Index: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]\n",
       "\n",
       "[150 rows x 0 columns]"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris2.filter('sepal_length')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- `Pandas` cho phép filter theo hai cách là `loc` và `iloc`\n",
    "    - `loc` cho phép lọc theo tên\n",
    "    - `iloc` cho phép lọc theo vị trí"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal_length</th>\n",
       "      <th>sepal_width</th>\n",
       "      <th>petal_length</th>\n",
       "      <th>petal_width</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   sepal_length  sepal_width  petal_length  petal_width\n",
       "0           5.1          3.5           1.4          0.2\n",
       "1           4.9          3.0           1.4          0.2\n",
       "2           4.7          3.2           1.3          0.2"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris2.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RangeIndex(start=0, stop=150, step=1)"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris2.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "sepal_length    4.7\n",
       "sepal_width     3.2\n",
       "petal_length    1.3\n",
       "petal_width     0.2\n",
       "Name: 2, dtype: float64"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Lấy theo iloc của index\n",
    "iris2.iloc[2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal_length</th>\n",
       "      <th>sepal_width</th>\n",
       "      <th>petal_length</th>\n",
       "      <th>petal_width</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.8</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.7</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.4</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.8</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.8</td>\n",
       "      <td>1.6</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>5.1</td>\n",
       "      <td>2.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>9 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    sepal_length  sepal_width  petal_length  petal_width\n",
       "0            5.1          3.5           1.4          0.2\n",
       "17           5.1          3.5           1.4          0.3\n",
       "19           5.1          3.8           1.5          0.3\n",
       "21           5.1          3.7           1.5          0.4\n",
       "..           ...          ...           ...          ...\n",
       "39           5.1          3.4           1.5          0.2\n",
       "44           5.1          3.8           1.9          0.4\n",
       "46           5.1          3.8           1.6          0.2\n",
       "98           5.1          2.5           3.0          1.1\n",
       "\n",
       "[9 rows x 4 columns]"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris2[iris2['sepal_length'] == 5.1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Tìm hiêu thêm về loc và iloc**:\n",
    "\n",
    "- `df.loc[row_index, column_index]`: cho phép lựa chọn theo thứ tự và sử dụng toán tử `:` như R nhưng chỉ cho phép từ `index_1` đến `index_2-1`\n",
    "\n",
    "- `df.iloc[row_index, column_index]`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal_length</th>\n",
       "      <th>sepal_width</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   sepal_length  sepal_width\n",
       "2           4.7          3.2\n",
       "3           4.6          3.1\n",
       "4           5.0          3.6"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris2.iloc[2:5, 0:2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal_length</th>\n",
       "      <th>petal_length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>1.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.6</td>\n",
       "      <td>1.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>1.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5.4</td>\n",
       "      <td>1.7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   sepal_length  petal_length\n",
       "2           4.7           1.3\n",
       "3           4.6           1.5\n",
       "4           5.0           1.4\n",
       "5           5.4           1.7"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris2.loc[2:5, ['sepal_length', 'petal_length']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Các phương pháp này có thể được sử dụng trong việc gán"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "iris2.iloc[1:4, 3:4] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>petal_width</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   petal_width\n",
       "1          1.0\n",
       "2          1.0\n",
       "3          1.0"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris2.iloc[1:4, 3:4]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### group by"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**R**\n",
    "\n",
    "df %>% group_by(group) \n",
    "\n",
    "df %>% group_by(group1, group2)\n",
    "\n",
    "df %>% ungroup()\n",
    "\n",
    "**Python**\n",
    "\n",
    "df.groupby('group1')\n",
    "\n",
    "df.groupby(['group1', 'group2'])\n",
    "\n",
    "df.reset_index() \n",
    "\n",
    "df.groupby('group1', as_index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.DataFrame({'group': ['A', 'B', 'C', 'A', 'B', 'C'],\n",
    "                    'value1': [3,2,1,4,5,3],\n",
    "                     'value2': [2,4,3,2,1,5]})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>group</th>\n",
       "      <th>value1</th>\n",
       "      <th>value2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>A</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>B</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>C</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  group  value1  value2\n",
       "0     A       3       2\n",
       "1     B       2       4\n",
       "2     C       1       3"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<pandas.core.groupby.groupby.DataFrameGroupBy object at 0x000001E9B0371198>"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('group')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Group summarise"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**R**\n",
    "\n",
    "df %>% group_by(group) %>% summarise(mean_var1 = mean(var1))\n",
    "\n",
    "df %>% group_by(group1, group2) %>% summarise(mean_var1 = mean(var1), \n",
    "                                              sum_var1 = sum(var1), \n",
    "                                              count_var1 = n())\n",
    "\n",
    "**Python**\n",
    "\n",
    "- df.groupby('group1')['var1'].agg({'mean_col' : np.mean()})`\n",
    "\n",
    "- `df.groupby(['group1', 'group2'])['var1]'].agg(['mean', 'sum', 'count'])`\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Tương ứng như `group_by` trong `dplyr`, `groupby` trong Python cho phép nhóm và thực hiện các câu lệnh tương ứng. Khi không đặt điều kiện cụ thể, nhóm aggregate sẽ áp dụng cho tất cả các biến"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value1</th>\n",
       "      <th>value2</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>group</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>3.5</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>3.5</td>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C</th>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       value1  value2\n",
       "group                \n",
       "A         3.5     2.0\n",
       "B         3.5     2.5\n",
       "C         2.0     4.0"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('group').aggregate(np.mean)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>sum</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>group</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>3.5</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>3.5</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C</th>\n",
       "      <td>2.0</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       mean  sum  max\n",
       "group                \n",
       "A       3.5    7    4\n",
       "B       3.5    7    5\n",
       "C       2.0    4    3"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('group')['value1'].agg(['mean', 'sum', 'max'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\anhhd3\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\ipykernel_launcher.py:3: FutureWarning: using a dict on a Series for aggregation\n",
      "is deprecated and will be removed in a future version\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean_value1</th>\n",
       "      <th>sum_value1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>group</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>3.5</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>3.5</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C</th>\n",
       "      <td>2.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       mean_value1  sum_value1\n",
       "group                         \n",
       "A              3.5           7\n",
       "B              3.5           7\n",
       "C              2.0           4"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Summarise chỉ với var1 và đặt tên\n",
    "df.groupby('group')['value1'].agg({'mean_value1': 'mean',\n",
    "                                  'sum_value1': np.sum})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value1</th>\n",
       "      <th>value2</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>group</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>3.5</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>3.5</td>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C</th>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       value1  value2\n",
       "group                \n",
       "A         3.5     2.0\n",
       "B         3.5     2.5\n",
       "C         2.0     4.0"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('group').aggregate(np.mean)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Group mutate"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**R**\n",
    "\n",
    "df %>% group_by(group) %>% mutate(mean_var1 = mean(var1))\n",
    "\n",
    "**Python**\n",
    "\n",
    "df.groupby('group')['var1'].transform(np.mean)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value1</th>\n",
       "      <th>value2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3.5</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3.5</td>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3.5</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3.5</td>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   value1  value2\n",
       "0     3.5     2.0\n",
       "1     3.5     2.5\n",
       "2     2.0     4.0\n",
       "3     3.5     2.0\n",
       "4     3.5     2.5\n",
       "5     2.0     4.0"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Biến đổi biến value thành mean trong từng nhóm\n",
    "df.groupby('group').transform('mean')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['mean_value1'] = df.groupby('group')['value1'].transform('mean')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>group</th>\n",
       "      <th>value1</th>\n",
       "      <th>value2</th>\n",
       "      <th>mean_value1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>A</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>3.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>B</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>3.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>C</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>A</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>3.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>B</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>3.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>C</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  group  value1  value2  mean_value1\n",
       "0     A       3       2          3.5\n",
       "1     B       2       4          3.5\n",
       "2     C       1       3          2.0\n",
       "3     A       4       2          3.5\n",
       "4     B       5       1          3.5\n",
       "5     C       3       5          2.0"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Tạo thêm biến mới"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Tạo hàm normalize\n",
    "def normalize(x):\n",
    "    return (x - np.mean(x)) / np.std(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = [3,2,3,1,3,4,5,6,8]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.888888888888889"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.mean(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.0245407953653998"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.std(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-0.43905704, -0.93299621, -0.43905704, -1.42693538, -0.43905704,\n",
       "        0.05488213,  0.5488213 ,  1.04276047,  2.03063881])"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "normalize(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value1</th>\n",
       "      <th>value2</th>\n",
       "      <th>mean_value1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   value1  value2  mean_value1\n",
       "0    -1.0     NaN          NaN\n",
       "1    -1.0     1.0          NaN\n",
       "2    -1.0    -1.0          NaN\n",
       "3     1.0     NaN          NaN\n",
       "4     1.0    -1.0          NaN\n",
       "5     1.0     1.0          NaN"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('group').transform(normalize)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Join"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Tương tự như R, join trong Python có thể dùng hàm `merge`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Cùng tên key"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  employee        group\n",
      "0      Bob   Accounting\n",
      "1     Jake  Engineering\n",
      "2     Lisa  Engineering\n",
      "3      Sue           HR\n",
      "  employee  hire_date\n",
      "0     Lisa       2004\n",
      "1      Bob       2008\n",
      "2     Jake       2012\n"
     ]
    }
   ],
   "source": [
    "df1 = pd.DataFrame({'employee': ['Bob', 'Jake', 'Lisa', 'Sue'],\n",
    "                    'group': ['Accounting', 'Engineering', 'Engineering', 'HR']})\n",
    "df2 = pd.DataFrame({'employee': ['Lisa', 'Bob', 'Jake'],\n",
    "                    'hire_date': [2004, 2008, 2012]})\n",
    "print(df1); print(df2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>employee</th>\n",
       "      <th>group</th>\n",
       "      <th>hire_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Bob</td>\n",
       "      <td>Accounting</td>\n",
       "      <td>2008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Jake</td>\n",
       "      <td>Engineering</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Lisa</td>\n",
       "      <td>Engineering</td>\n",
       "      <td>2004</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  employee        group  hire_date\n",
       "0      Bob   Accounting       2008\n",
       "1     Jake  Engineering       2012\n",
       "2     Lisa  Engineering       2004"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.merge(df1, df2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Lưu ý**: Khi dùng merge, sẽ tự động bỏ các trường không chứa trong cả 2 bảng. Nếu muốn chuyển thành `left_join`, cần thêm option `how`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>employee</th>\n",
       "      <th>group</th>\n",
       "      <th>hire_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Bob</td>\n",
       "      <td>Accounting</td>\n",
       "      <td>2008.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Jake</td>\n",
       "      <td>Engineering</td>\n",
       "      <td>2012.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Lisa</td>\n",
       "      <td>Engineering</td>\n",
       "      <td>2004.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Sue</td>\n",
       "      <td>HR</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  employee        group  hire_date\n",
       "0      Bob   Accounting     2008.0\n",
       "1     Jake  Engineering     2012.0\n",
       "2     Lisa  Engineering     2004.0\n",
       "3      Sue           HR        NaN"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.merge(df1, df2, how = \"left\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>employee</th>\n",
       "      <th>group</th>\n",
       "      <th>hire_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Bob</td>\n",
       "      <td>Accounting</td>\n",
       "      <td>2008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Jake</td>\n",
       "      <td>Engineering</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Lisa</td>\n",
       "      <td>Engineering</td>\n",
       "      <td>2004</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  employee        group  hire_date\n",
       "0      Bob   Accounting       2008\n",
       "1     Jake  Engineering       2012\n",
       "2     Lisa  Engineering       2004"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.merge(df1, df2, how = 'right')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Khác tên key"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  employee        group\n",
      "0      Bob   Accounting\n",
      "1     Jake  Engineering\n",
      "2     Lisa  Engineering\n",
      "3      Sue           HR\n",
      "   name  salary\n",
      "0   Bob   70000\n",
      "1  Jake   80000\n",
      "2  Lisa  120000\n",
      "3   Sue   90000\n"
     ]
    }
   ],
   "source": [
    "df3 = pd.DataFrame({'name': ['Bob', 'Jake', 'Lisa', 'Sue'],\n",
    "                    'salary': [70000, 80000, 120000, 90000]})\n",
    "print(df1); print(df3);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>employee</th>\n",
       "      <th>group</th>\n",
       "      <th>name</th>\n",
       "      <th>salary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Bob</td>\n",
       "      <td>Accounting</td>\n",
       "      <td>Bob</td>\n",
       "      <td>70000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Jake</td>\n",
       "      <td>Engineering</td>\n",
       "      <td>Jake</td>\n",
       "      <td>80000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Lisa</td>\n",
       "      <td>Engineering</td>\n",
       "      <td>Lisa</td>\n",
       "      <td>120000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Sue</td>\n",
       "      <td>HR</td>\n",
       "      <td>Sue</td>\n",
       "      <td>90000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  employee        group  name  salary\n",
       "0      Bob   Accounting   Bob   70000\n",
       "1     Jake  Engineering  Jake   80000\n",
       "2     Lisa  Engineering  Lisa  120000\n",
       "3      Sue           HR   Sue   90000"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.merge(df1, df3, left_on = 'employee', right_on = 'name')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>employee</th>\n",
       "      <th>group</th>\n",
       "      <th>salary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Bob</td>\n",
       "      <td>Accounting</td>\n",
       "      <td>70000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Jake</td>\n",
       "      <td>Engineering</td>\n",
       "      <td>80000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Lisa</td>\n",
       "      <td>Engineering</td>\n",
       "      <td>120000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Sue</td>\n",
       "      <td>HR</td>\n",
       "      <td>90000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  employee        group  salary\n",
       "0      Bob   Accounting   70000\n",
       "1     Jake  Engineering   80000\n",
       "2     Lisa  Engineering  120000\n",
       "3      Sue           HR   90000"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Drop name khi không cần thiết\n",
    "pd.merge(df1, df3, left_on = 'employee', right_on = 'name').drop('name', axis = 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Ghép dữ liệu"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Ghép dòng"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   a  b\n",
      "1  4  7\n",
      "2  5  8\n",
      "3  6  9\n",
      "   a  b\n",
      "0  1  8\n",
      "1  2  9\n"
     ]
    }
   ],
   "source": [
    "df1 = pd.DataFrame(\n",
    "{\"a\" : [4 ,5, 6], \n",
    "\"b\" : [7, 8, 9]},    \n",
    "index = [1, 2, 3])\n",
    "\n",
    "df2 = pd.DataFrame({\n",
    "    \"a\" : [1,2],\n",
    "    \"b\" : [8, 9]\n",
    "})\n",
    "print(df1); print(df2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   a  b\n",
       "1  4  7\n",
       "2  5  8\n",
       "3  6  9\n",
       "0  1  8\n",
       "1  2  9"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "pd.concat([df1, df2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "df3 = pd.DataFrame({\n",
    "    \"c\" : ['x', 'y', 'z']})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>c</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>x</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     a    b    c\n",
       "0  NaN  NaN    x\n",
       "1  4.0  7.0    y\n",
       "2  5.0  8.0    z\n",
       "3  6.0  9.0  NaN"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.concat([df1, df3], axis = 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Lưu ý**: Xảy ra lỗi trên vì df1 và df3 đang có 2 hệ thống index khác nhau. Muốn concat bình thường cần reset index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>c</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>x</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "      <td>y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>z</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index  a  b  c\n",
       "0      1  4  7  x\n",
       "1      2  5  8  y\n",
       "2      3  6  9  z"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.concat([df1.reset_index(), df3], axis = 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tổng hợp dữ liệu"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>group</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>11.740247</td>\n",
       "      <td>-8.013371</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>9.726445</td>\n",
       "      <td>5.039583</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4</td>\n",
       "      <td>10.125931</td>\n",
       "      <td>15.275393</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>10.321403</td>\n",
       "      <td>10.794729</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>4</td>\n",
       "      <td>8.600681</td>\n",
       "      <td>6.613261</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>3</td>\n",
       "      <td>8.783985</td>\n",
       "      <td>-3.364650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>4</td>\n",
       "      <td>9.683695</td>\n",
       "      <td>10.172871</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>3</td>\n",
       "      <td>10.942680</td>\n",
       "      <td>-5.578044</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>20 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    group          x          y\n",
       "0       2  11.740247  -8.013371\n",
       "1       2   9.726445   5.039583\n",
       "2       4  10.125931  15.275393\n",
       "3       4  10.321403  10.794729\n",
       "..    ...        ...        ...\n",
       "16      4   8.600681   6.613261\n",
       "17      3   8.783985  -3.364650\n",
       "18      4   9.683695  10.172871\n",
       "19      3  10.942680  -5.578044\n",
       "\n",
       "[20 rows x 3 columns]"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_df = pd.DataFrame({\n",
    "    'group' : np.random.randint(1,5, 20),\n",
    "    'x' : np.random.normal(10,1, 20),\n",
    "    'y' : np.random.normal(1, 10, 20)\n",
    "})\n",
    "my_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>group</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>20.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>20.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.450000</td>\n",
       "      <td>10.031887</td>\n",
       "      <td>4.142517</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.998683</td>\n",
       "      <td>0.801657</td>\n",
       "      <td>8.121944</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>8.600681</td>\n",
       "      <td>-8.530172</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>9.624235</td>\n",
       "      <td>-1.553094</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>10.169494</td>\n",
       "      <td>4.621493</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>10.419861</td>\n",
       "      <td>10.328336</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>11.740247</td>\n",
       "      <td>17.593020</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           group          x          y\n",
       "count  20.000000  20.000000  20.000000\n",
       "mean    2.450000  10.031887   4.142517\n",
       "std     0.998683   0.801657   8.121944\n",
       "min     1.000000   8.600681  -8.530172\n",
       "25%     2.000000   9.624235  -1.553094\n",
       "50%     2.000000  10.169494   4.621493\n",
       "75%     3.000000  10.419861  10.328336\n",
       "max     4.000000  11.740247  17.593020"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Summary toàn bộ data.frame\n",
    "my_df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>group</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3.0</td>\n",
       "      <td>10.510913</td>\n",
       "      <td>0.258013</td>\n",
       "      <td>10.213056</td>\n",
       "      <td>10.433628</td>\n",
       "      <td>10.654200</td>\n",
       "      <td>10.659841</td>\n",
       "      <td>10.665483</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9.0</td>\n",
       "      <td>9.933752</td>\n",
       "      <td>0.847335</td>\n",
       "      <td>8.702006</td>\n",
       "      <td>9.445856</td>\n",
       "      <td>9.843213</td>\n",
       "      <td>10.223554</td>\n",
       "      <td>11.740247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>10.242382</td>\n",
       "      <td>1.019629</td>\n",
       "      <td>8.783985</td>\n",
       "      <td>9.916606</td>\n",
       "      <td>10.618413</td>\n",
       "      <td>10.944189</td>\n",
       "      <td>10.948716</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4.0</td>\n",
       "      <td>9.682928</td>\n",
       "      <td>0.769234</td>\n",
       "      <td>8.600681</td>\n",
       "      <td>9.412941</td>\n",
       "      <td>9.904813</td>\n",
       "      <td>10.174799</td>\n",
       "      <td>10.321403</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       count       mean       std        min        25%        50%        75%  \\\n",
       "group                                                                           \n",
       "1        3.0  10.510913  0.258013  10.213056  10.433628  10.654200  10.659841   \n",
       "2        9.0   9.933752  0.847335   8.702006   9.445856   9.843213  10.223554   \n",
       "3        4.0  10.242382  1.019629   8.783985   9.916606  10.618413  10.944189   \n",
       "4        4.0   9.682928  0.769234   8.600681   9.412941   9.904813  10.174799   \n",
       "\n",
       "             max  \n",
       "group             \n",
       "1      10.665483  \n",
       "2      11.740247  \n",
       "3      10.948716  \n",
       "4      10.321403  "
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Summary theo nhóm\n",
    "my_df.groupby('group')['x'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "       group\n",
       "count  1         3.000000\n",
       "       2         9.000000\n",
       "       3         4.000000\n",
       "       4         4.000000\n",
       "                  ...    \n",
       "max    1        10.665483\n",
       "       2        11.740247\n",
       "       3        10.948716\n",
       "       4        10.321403\n",
       "Length: 32, dtype: float64"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Summary theo nhóm, chuyển thành data.frame\n",
    "my_df.groupby('group')['x'].describe().unstack()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Aggregate, filter, transform & apply"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Tương tự như R, Python cũng có thể áp dụng phương pháp: filter, transform, apply"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>key</th>\n",
       "      <th>data1</th>\n",
       "      <th>data2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>A</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>B</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>C</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>A</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>B</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>C</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  key  data1  data2\n",
       "0   A      0      5\n",
       "1   B      1      0\n",
       "2   C      2      3\n",
       "3   A      3      3\n",
       "4   B      4      7\n",
       "5   C      5      9"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Set seed\n",
    "rng = np.random.RandomState(0)\n",
    "df = pd.DataFrame({'key': ['A', 'B', 'C', 'A', 'B', 'C'],\n",
    "                    'data1': range(6),\n",
    "                    'data2': rng.randint(0, 10, 6)},\n",
    "                    columns = ['key', 'data1', 'data2'])\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"2\" halign=\"left\">data1</th>\n",
       "      <th colspan=\"2\" halign=\"left\">data2</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>min</th>\n",
       "      <th>median</th>\n",
       "      <th>min</th>\n",
       "      <th>median</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>key</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>0</td>\n",
       "      <td>1.5</td>\n",
       "      <td>3</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>1</td>\n",
       "      <td>2.5</td>\n",
       "      <td>0</td>\n",
       "      <td>3.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C</th>\n",
       "      <td>2</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    data1        data2       \n",
       "      min median   min median\n",
       "key                          \n",
       "A       0    1.5     3    4.0\n",
       "B       1    2.5     0    3.5\n",
       "C       2    3.5     3    6.0"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('key').aggregate(['min', np.median])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Tìm min của data1 và max data2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>data1</th>\n",
       "      <th>data2</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>key</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>1</td>\n",
       "      <td>3.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C</th>\n",
       "      <td>2</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     data1  data2\n",
       "key              \n",
       "A        0    4.0\n",
       "B        1    3.5\n",
       "C        2    6.0"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('key').aggregate({'data1': 'min',\n",
    "                           'data2': np.median})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Filter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [],
   "source": [
    "def filter_func(x):\n",
    "    return x['data2'].std > 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  key  data1  data2\n",
      "0   A      0      5\n",
      "1   B      1      0\n",
      "2   C      2      3\n",
      "3   A      3      3\n",
      "4   B      4      7\n",
      "5   C      5      9\n",
      "       data1     data2\n",
      "key                   \n",
      "A    2.12132  1.414214\n",
      "B    2.12132  4.949747\n",
      "C    2.12132  4.242641\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>data1</th>\n",
       "      <th>data2</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>key</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>2.12132</td>\n",
       "      <td>1.414214</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>2.12132</td>\n",
       "      <td>4.949747</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C</th>\n",
       "      <td>2.12132</td>\n",
       "      <td>4.242641</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       data1     data2\n",
       "key                   \n",
       "A    2.12132  1.414214\n",
       "B    2.12132  4.949747\n",
       "C    2.12132  4.242641"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#df.groupby('key').std()\n",
    "df2 = df.groupby('key').aggregate('std')\n",
    "print(df); print(df2)\n",
    "df2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Apply"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Toán tử `x/= y` tương ứng với $x = \\frac{x}{y}$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [],
   "source": [
    "def norm_data2(x):\n",
    "    x['data1'] /= x['data2'].sum()\n",
    "    return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>key</th>\n",
       "      <th>data1</th>\n",
       "      <th>data2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>A</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>B</td>\n",
       "      <td>0.142857</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>C</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>A</td>\n",
       "      <td>0.375000</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>B</td>\n",
       "      <td>0.571429</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>C</td>\n",
       "      <td>0.416667</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  key     data1  data2\n",
       "0   A  0.000000      5\n",
       "1   B  0.142857      0\n",
       "2   C  0.166667      3\n",
       "3   A  0.375000      3\n",
       "4   B  0.571429      7\n",
       "5   C  0.416667      9"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('key').apply(norm_data2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Kiểm tra các đặc tính khác của df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "key      object\n",
       "data1     int64\n",
       "data2     int32\n",
       "dtype: object"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 6 entries, 0 to 5\n",
      "Data columns (total 3 columns):\n",
      "key      6 non-null object\n",
      "data1    6 non-null int64\n",
      "data2    6 non-null int32\n",
      "dtypes: int32(1), int64(1), object(1)\n",
      "memory usage: 200.0+ bytes\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a6971cb2e8>"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot data\n",
    "iris2.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a6975048d0>"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "iris2['sepal_length'].plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Làm việc với missing value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_null = pd.Series([1, np.nan, 'hello', None])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    False\n",
       "1     True\n",
       "2    False\n",
       "3     True\n",
       "dtype: bool"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_null.isnull()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   0    1    2\n",
       "0  1  NaN  3.0\n",
       "1  2  3.0  NaN\n",
       "2  1  2.0  3.0"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_null = pd.DataFrame([[1, np.nan, 3],\n",
    "                        [2, 3, np.nan],\n",
    "                        [1,2,3]])\n",
    "df_null"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   0    1    2\n",
       "2  1  2.0  3.0"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# dropna sẽ loại tất cả các dòng chứa missing value\n",
    "df_null.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   0\n",
       "0  1\n",
       "1  2\n",
       "2  1"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_null.dropna(axis = 'columns')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- `fillna`: Cho phép điền giá trị thiếu vào missing value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>99.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>3.0</td>\n",
       "      <td>99.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   0     1     2\n",
       "0  1  99.0   3.0\n",
       "1  2   3.0  99.0\n",
       "2  1   2.0   3.0"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_null.fillna(99)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Pivot table"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Tương tự như reshape2 của R với dcast, pandas cho phép sử dụng pivot table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [],
   "source": [
    "titanic = pd.read_csv('./99_dataset/titanic.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"3\" halign=\"left\">fare</th>\n",
       "      <th colspan=\"3\" halign=\"left\">survived</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>class</th>\n",
       "      <th>First</th>\n",
       "      <th>Second</th>\n",
       "      <th>Third</th>\n",
       "      <th>First</th>\n",
       "      <th>Second</th>\n",
       "      <th>Third</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sex</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>female</th>\n",
       "      <td>106.125798</td>\n",
       "      <td>21.970121</td>\n",
       "      <td>16.118810</td>\n",
       "      <td>91</td>\n",
       "      <td>70</td>\n",
       "      <td>72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>male</th>\n",
       "      <td>67.226127</td>\n",
       "      <td>19.741782</td>\n",
       "      <td>12.661633</td>\n",
       "      <td>45</td>\n",
       "      <td>17</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              fare                       survived             \n",
       "class        First     Second      Third    First Second Third\n",
       "sex                                                           \n",
       "female  106.125798  21.970121  16.118810       91     70    72\n",
       "male     67.226127  19.741782  12.661633       45     17    47"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic.pivot_table(index = 'sex', columns = 'class',\n",
    "                   aggfunc = {'survived': sum,\n",
    "                             'fare': 'mean'})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Melt data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_df = pd.DataFrame({\n",
    "    'id' : [1,2,3],\n",
    "    'var1' : [3,4,5],\n",
    "    'var2' : ['a', 'a', 'b'],\n",
    "    'var3' : ['x', 'y', 'z']\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>var1</th>\n",
       "      <th>var2</th>\n",
       "      <th>var3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>a</td>\n",
       "      <td>x</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>a</td>\n",
       "      <td>y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>b</td>\n",
       "      <td>z</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id  var1 var2 var3\n",
       "0   1     3    a    x\n",
       "1   2     4    a    y\n",
       "2   3     5    b    z"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>variable</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>var1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>var1</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>var1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>var2</td>\n",
       "      <td>a</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>3</td>\n",
       "      <td>var2</td>\n",
       "      <td>b</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1</td>\n",
       "      <td>var3</td>\n",
       "      <td>x</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2</td>\n",
       "      <td>var3</td>\n",
       "      <td>y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>3</td>\n",
       "      <td>var3</td>\n",
       "      <td>z</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>9 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    id variable value\n",
       "0    1     var1     3\n",
       "1    2     var1     4\n",
       "2    3     var1     5\n",
       "3    1     var2     a\n",
       "..  ..      ...   ...\n",
       "5    3     var2     b\n",
       "6    1     var3     x\n",
       "7    2     var3     y\n",
       "8    3     var3     z\n",
       "\n",
       "[9 rows x 3 columns]"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.melt(my_df, 'id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>var1</th>\n",
       "      <th>variable</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>var2</td>\n",
       "      <td>a</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>var2</td>\n",
       "      <td>a</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>var2</td>\n",
       "      <td>b</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>var3</td>\n",
       "      <td>x</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>var3</td>\n",
       "      <td>y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>var3</td>\n",
       "      <td>z</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id  var1 variable value\n",
       "0   1     3     var2     a\n",
       "1   2     4     var2     a\n",
       "2   3     5     var2     b\n",
       "3   1     3     var3     x\n",
       "4   2     4     var3     y\n",
       "5   3     5     var3     z"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.melt(my_df, ['id', 'var1'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Các hàm khác"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Lag"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   date  value\n",
       "0     1      6\n",
       "1     2      7\n",
       "2     3      8"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.DataFrame({\n",
    "    'date' : [1,2,3],\n",
    "    'value' : [6,7,8]\n",
    "})\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['value_1'] = df['value'].shift(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>value</th>\n",
       "      <th>value_1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>7</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   date  value  value_1\n",
       "0     1      6      NaN\n",
       "1     2      7      6.0\n",
       "2     3      8      7.0"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Rank"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_df = pd.DataFrame({\n",
    "    'id' : [1,2,3],\n",
    "    'var1' : [5,4,2],\n",
    "    'var2' : ['a', 'a', 'b'],\n",
    "    'var3' : ['x', 'y', 'z']\n",
    "})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Lưu dữ liệu"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_df = pd.DataFrame({\n",
    "    'x' : [1,2,3],\n",
    "    'y' : [3,4,5],\n",
    "    'group' : ['a', 'a', 'b']\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save data\n",
    "my_df.to_pickle('my_df.pkl')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load dữ liệu\n",
    "my_df2 = pd.read_pickle('my_df.pkl')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_df2.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Tài liệu tham khảo\n",
    "- https://github.com/jorisvandenbossche/pandas-tutorial"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [],
   "source": [
    "list_df = %who_ls DataFrame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [],
   "source": [
    "for x in list_df[:2]:\n",
    "    eval(x)['new'] = 'a'\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['countries', 'df']"
      ]
     },
     "execution_count": 197,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list_df[:2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>value</th>\n",
       "      <th>value_1</th>\n",
       "      <th>new</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>a</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>7</td>\n",
       "      <td>6.0</td>\n",
       "      <td>a</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "      <td>7.0</td>\n",
       "      <td>a</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   date  value  value_1 new\n",
       "0     1      6      NaN   a\n",
       "1     2      7      6.0   a\n",
       "2     3      8      7.0   a"
      ]
     },
     "execution_count": 199,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Mục lục",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "360px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  },
  "toc-autonumbering": true,
  "toc-showcode": false,
  "toc-showmarkdowntxt": true,
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "position": {
    "height": "204px",
    "left": "1394.79px",
    "right": "20px",
    "top": "78.9792px",
    "width": "351px"
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
