R & SQL Server
==============

Cách 1: Sử dụng RODBC
---------------------

Cách này khá đơn giản tuy nhiên chỉ hỗ trợ các câu lệnh truy vấn và lưu
cả bảng và database mà không cho phép thực hiện các câu lệnh phức tạp
hơn như Update, Delete. Cách thức thực hiện như sau.

-  **Bước 1**: Vào Control Panel >> Administrative Tool >> ODBC Data
   Source >> Add >> Chọn Server >> Lựa chọn login vào Server >> Test
   Data >> Test Data Source
-  **Bước 2**: Khởi tạo connection với SQL từ R

.. code:: r

   #Cài đặt connection với SQLServer
   library(RODBC)
   ch <- odbcConnect("sql", uid = "sa", pwd = "123")
   #Kết nối SQL với R
   df <- sqlQuery(ch, "
            SELECT top 100 * from learnsql.dbo.account") 

Cách 2: Sử dụng DBI, odbc
-------------------------

Cách sử dụng với ``DBI`` và ``odbc`` ưu việt hơn so với sử dụng
``RODBC``. Cách tiếp cận này thậm chí cho phép ``translate`` từ
``dplyr`` sang ``SQL``

Các câu lệnh truy vấn
~~~~~~~~~~~~~~~~~~~~~

.. code:: r

   library(dbplyr)
   library(dplyr)
   library(DBI)
   library(odbc)
   library(RSQLServer)
   sessionInfo()
   # Step 1: Tạo connection với odbc

   con <- dbConnect(odbc::odbc(),
                    Driver    = "SQL Server", 
                    Server    = "localhost",
                    Database  = "learningsql",
                    UID       = "sa",
                    PWD       = 123456,
                    Port      = 1433)

   #Xem danh sách các bảng trong DB

   dbListTables(con, schema_name = "dbo")

   #Xem danh sách các cột trong 1 bảng

   dbListFields(con, "CUSTOMER_PRODUCT_HOLDING")

   #Preview 1 bảng
   con %>% tbl("KPI_2017")

   #Đếm số dòng với tally

   con %>% tbl("KPI_2017") %>% tally

   #Convert sang SQL Query

   con %>% tbl("KPI_2017") %>% tally %>% show_query()

   con %>% tbl("KPI_2017") %>%
     group_by(SEGMENT) %>% 
     summarise(n = n()) %>% 
     show_query()

   con %>% tbl("KPI_2017") %>%
     group_by(SEGMENT) %>% 
     mutate(n = dense_rank(Volumn)) %>% 
     show_query()

   tbl(con, "KPI_2017") %>% 
     left_join(tbl(con, "DimDate"), by = c("Date" = "DateKey"))  -> df
    
   # Write dataframe vào bảng
   con %>% tbl("CUSTOMER_PRODUCT_HOLDING") %>% 
     select(CIF, 12:28) %>% 
     head(100) -> df

   # Collect dữ liệu về dataframe
   df %>% collect %>% gather(var, value, -CIF) -> df2

   dbWriteTable(con, "customer_ph_melt", df2)

   dbSendQuery(con, "select top 10 * from [TRANGTQ2].[DBS_DAILY].[dbo].[CARD_20170621]") %>% 
     dbFetch()

   dbGetQuery(con, "select top 10 * from [TRANGTQ2].[DBS_DAILY].[dbo].[CARD_20170621]")  %>% 
     tbl

Các câu lệnh biến đổi dữ liệu
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: r

   query <- "
   update analytics.dbo.iris
   set y = 5

   delete from analytics.dbo.iris
   where cut = 'Ideal'
   "

   dbSendQuery(con, query)

   tbl(con, "iris") %>% 
     select(cut, y) %>% 
     collect %>% 
     mutate(cut = as.factor(cut)) %>% summary

**Lưu ý**:

-  Khi tạo string query trong, nên dùng dâu ``""``
-  Dâu ’’ trong SQL có thể dùng trong dấu ``""`` mà không gặp vấn đề gì

Các ứng dụng nâng cao
~~~~~~~~~~~~~~~~~~~~~

.. code:: r

   #Hỗ trợ hiển thị nhiều lần query trong cùng 1 bảng
   con %>% tbl("CUSTOMER") %>% 
     group_by(CITY) %>% 
     mutate(no = paste0(STATE, "_new")) -> df
   df %>% filter(no == "HA") %>% head(10) %>% show_query()
   #Lần 1
   df1 <- head(df)  %>% ungroup 
   #Lần 2
   df %>% 
     ungroup %>% 
     filter(CUST_ID %in% c(1,2)) %>% 
     show_query()

   #Khi biến đổi trên nhiều bảng,
   #chưa cho phép biến đổi linh hoạt như R

   df %>% filter(CUST_ID %in% (df1 %>% collect)$CUST_ID) %>% 
     show_query()
                      

   df1.data$CUST_ID

.. code:: r

   # Tạo hàm cho connection

   vp_dbConnect <- function(database = "master", 
                            UID = "sa", 
                            PWD = "123456",
                            Server = "localhost"){
     connect <- dbConnect(odbc::odbc(),
                          Driver    = "SQL Server", 
                          Server    = "localhost",
                          Database  = database,
                          UID       = UID,
                          PWD       = PWD,
                          Port      = 1433)
     return(connect)
   }


   daily_connect <- vp_dbConnect(database = "DATA")

   vp_dbConnect("DATA") %>% 
     tbl("TBL_LIMIT_ORG")

   vp_dbConnect("DBS_BI") %>% 
     tbl("CUSTOMER_PRODUCT_HOLDING") %>% 
     collect

   #connect với H2O
   library(h2o)
   h2o.init()
   vp_dbConnect("DATA") %>% 
     tbl("TBL_LIMIT_ORG") %>% 
     as.h2o -> df.h2o
   df.h2o %>% h2o.summary

   #Connect với Spark
   library(sparklyr)
   spark_install(version = "2.1.0")
   sc <- spark_connect(master = "local", version = "2.1.0")

   #Cách 1: Copy từ data frame
   vp_dbConnect("DATA") %>%
             tbl("TBL_LIMIT_ORG") %>% collect -> df
   copy_to(sc, df, overwrite = T) -> tbl_new

   #Cách 2: Copy trực tiếp từ tbl_sql
   vp_dbConnect("DATA") %>%
             tbl("TBL_LIMIT_ORG") -> tbl_sql
   copy_to(sc, tbl_sql, overwrite = T) -> tbl_new2

   #So sánh
   df %>% object.size()
   tbl_new2 %>% object.size()
   tbl_new %>% object.size()

   tbl_new %>% 
     group_by(ACCOUNT) %>% 
     summarise(no = max(INTERNAL_AMOUNT)) %>% 
     filter(no > 1000000) %>% 
     arrange(no) %>%
     mutate(no = no %>% as.numeric()) %>% 
     collect %>% 
     summary
     
   tbl_sql %>% 
     group_by(ACCOUNT) %>% 
     summarise(no = max(INTERNAL_AMOUNT)) %>% 
     filter(no > 1000000) %>% 
     arrange(no) %>% 
     show_query()
