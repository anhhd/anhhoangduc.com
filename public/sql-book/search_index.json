[
["pivot-unpivot.html", "Chương 3 Pivot - Unpivot 3.1 Nhóm câu lệnh cơ bản 3.2 Procedure pivot 3.3 Procedure unpivot", " Chương 3 Pivot - Unpivot 3.1 Nhóm câu lệnh cơ bản -- Tạo bảng create table #student ( id int, mark1 float, mark2 float, mark3 float ) insert into #student values (1, 1,2,3) insert into #student values (2, 5,6,7) insert into #student values (3, 7,4,2) -- UNPIVOT SELECT * FROM (SELECT * FROM #Student) a UNPIVOT (value_var FOR group_var IN (Mark1, Mark2, Mark3) ) b -- PIVOT SELECT * into #student_pivot FROM (SELECT * FROM #Student) a UNPIVOT (value_var FOR group_var IN (Mark1, Mark2, Mark3) ) b select * from (select * from #student_pivot) a pivot (sum(value_var) for group_var in (mark1, mark2, mark3)) b 3.2 Procedure pivot Dynamic sql declare @data nvarchar(30) declare @group nvarchar(30) set @data = &#39;#student_pivot&#39; set @group = STUFF( (SELECT &#39;,&#39; + b.group_var FROM (select distinct group_var from #student_pivot where group_var not like &#39;mark1&#39;) b FOR XML PATH (&#39;&#39;)),1,1,&#39;&#39;) declare @sqlstr nvarchar(max) set @sqlstr = N&#39;select * from (select * from &#39;+ @data +&#39;) a pivot (sum(value_var) for group_var in (&#39; + @group + &#39;)) b &#39; exec sp_executesql @sqlstr Procedure drop procedure if exists sql_pivot create procedure sql_pivot @data nvarchar(max), @group nvarchar(max), -- Variable to pivot @row nvarchar(max), -- Column to keep as key @value nvarchar(max), -- Column to calculate @function nvarchar(max) = &#39;sum&#39;, -- Function to calculate @stored_data nvarchar(max) = &#39;##pivot_result&#39; -- Store data result as begin declare @sql nvarchar(max) set @sql = &#39; declare @group_value nvarchar(max) set @group_value = STUFF( (SELECT &#39;&#39;,&#39;&#39; + b.&#39;+@group+&#39; FROM (select distinct &#39;+ @group +&#39; from &#39;+ @data +&#39;) b FOR XML PATH (&#39;&#39;&#39;&#39;)),1,1,&#39;&#39;&#39;&#39;) declare @sqlstr nvarchar(max) set @sqlstr = N&#39;&#39; drop table if exists &#39;+ @stored_data +&#39; select * into &#39;+ @stored_data +&#39; from (select &#39;+ @group+ &#39;,&#39; + @row + &#39;, &#39;+@value +&#39; from &#39;+ @data +&#39;) a pivot (&#39;+@function+&#39;(&#39;+ @value +&#39;) for &#39;+@group+&#39; in (&#39;&#39; + @group_value + &#39;&#39;)) b &#39;&#39; exec sp_executesql @sqlstr &#39; exec sp_executesql @sql end; Ví dụ: sql_pivot @data = &#39;##student_pivot&#39;, @row = &#39;id&#39;, @group= &#39;group_var&#39;, @value = &#39;value_var&#39;, @function = &#39;sum&#39; select * from ##pivot_result 3.3 Procedure unpivot Dynamic sql: Cho phép nhiều ID Cách 1: Chỉ sử dụng với các data trong máy local declare @data nvarchar(max) = &#39;student&#39; declare @id_var nvarchar(max) = &#39;&#39;&#39;id&#39;&#39;,&#39;&#39;mark1&#39;&#39;&#39; declare @group_var nvarchar(max) = &#39;group_var&#39; declare @value_var nvarchar(max) = &#39;value_var&#39; declare @sql nvarchar(max) set @sql = &#39; declare @cols AS NVARCHAR(MAX) select @cols = STUFF((SELECT &#39;&#39;,&#39;&#39; + QUOTENAME(column_name) FROM ( select table_name, column_name, ordinal_position, data_type from information_schema.columns where table_name = &#39;&#39;&#39;+@data+&#39;&#39;&#39; and column_name not in (&#39;+@id_var+&#39;) ) cols ORDER BY ordinal_position FOR XML PATH(&#39;&#39;&#39;&#39;), TYPE).value(&#39;&#39;.&#39;&#39;, &#39;&#39;NVARCHAR(MAX)&#39;&#39;),1,1,&#39;&#39;&#39;&#39;) select @cols declare @key AS NVARCHAR(MAX) select @key = STUFF((SELECT &#39;&#39;,&#39;&#39; + QUOTENAME(column_name) FROM ( select table_name, column_name, ordinal_position, data_type from information_schema.columns where table_name = &#39;&#39;&#39;+@data+&#39;&#39;&#39; and column_name in (&#39;+@id_var+&#39;) ) cols ORDER BY ordinal_position FOR XML PATH(&#39;&#39;&#39;&#39;), TYPE).value(&#39;&#39;.&#39;&#39;, &#39;&#39;NVARCHAR(MAX)&#39;&#39;),1,1,&#39;&#39;&#39;&#39;) select @key declare @sqlstr nvarchar(max) set @sqlstr = N&#39;&#39; select &#39;&#39;+@key+&#39;&#39;, &#39;+@group_var+&#39;, &#39;+@value_var+&#39; from( select * from &#39;+@data+&#39; ) as a unpivot ( &#39;+@value_var+&#39; for &#39;+@group_var+&#39; in (&#39;&#39; + @cols + &#39;&#39;) ) as b&#39;&#39; print @sqlstr exec sp_executesql @sqlstr &#39; exec sp_executesql @sql Cách 2: Khái quát dynamic sql declare @db nvarchar(max) = &#39;tempdb&#39; declare @data nvarchar(max) = &#39;##student&#39; declare @id_var nvarchar(max) = &#39;&#39;&#39;id&#39;&#39;&#39; declare @group_var nvarchar(max) = &#39;group_var&#39; declare @value_var nvarchar(max) = &#39;value_var&#39; declare @stored_data nvarchar(max) = &#39;##a&#39; declare @sql nvarchar(max) set @sql = N&#39; drop table if exists ##all_cols select name into ##all_cols from &#39;+@db+&#39;.sys.columns where object_id in (select object_id from &#39;+@db+&#39;.sys.tables where name like &#39;&#39;%&#39;+@data+&#39;&#39;&#39;) declare @cols AS NVARCHAR(MAX) select @cols = STUFF((SELECT &#39;&#39;,&#39;&#39; + QUOTENAME(name) FROM ( select name from ##all_cols where name not in (&#39;+@id_var+&#39;) ) cols FOR XML PATH(&#39;&#39;&#39;&#39;), TYPE).value(&#39;&#39;.&#39;&#39;, &#39;&#39;NVARCHAR(MAX)&#39;&#39;),1,1,&#39;&#39;&#39;&#39;) select @cols declare @key AS NVARCHAR(MAX) select @key = STUFF((SELECT &#39;&#39;,&#39;&#39; + QUOTENAME(name) FROM ( select name from ##all_cols where name in (&#39;+@id_var+&#39;) ) cols FOR XML PATH(&#39;&#39;&#39;&#39;), TYPE).value(&#39;&#39;.&#39;&#39;, &#39;&#39;NVARCHAR(MAX)&#39;&#39;),1,1,&#39;&#39;&#39;&#39;) select @key --Run procedure declare @sqlstr nvarchar(max) set @sqlstr = N&#39;&#39; drop table if exists &#39;+@stored_data+&#39; select &#39;&#39;+@key+&#39;&#39;, &#39;+@group_var+&#39;, &#39;+@value_var+&#39; into &#39;+@stored_data+&#39; from( select * from &#39;+@db+&#39;.dbo.[&#39;+@data+&#39;] ) as a unpivot ( &#39;+@value_var+&#39; for &#39;+@group_var+&#39; in (&#39;&#39; + @cols + &#39;&#39;) ) as b select * from &#39;+@stored_data+&#39; &#39;&#39; print @sqlstr exec sp_executesql @sqlstr &#39; exec sp_executesql @sql Lưu ý: Các bảng phải là bảng trong db hoặc bảng lưu ở global environment Procedure drop procedure if exists sql_unpivot create procedure sql_unpivot @db nvarchar(max) = &#39;tempdb&#39;, --Database contains data @data nvarchar(max), -- Name of data @id_var nvarchar(max), -- Key variables @group_var nvarchar(max) = &#39;group_var&#39;, --Name of groups variable @value_var nvarchar(max) = &#39;value_var&#39;, -- Name of value variable @stored_data nvarchar(max) = &#39;##unpivot_result&#39; -- Data storage as begin declare @sql nvarchar(max) set @sql = N&#39; drop table if exists ##all_cols select name into ##all_cols from &#39;+@db+&#39;.sys.columns where object_id in (select object_id from &#39;+@db+&#39;.sys.tables where name like &#39;&#39;%&#39;+@data+&#39;&#39;&#39;) declare @cols AS NVARCHAR(MAX) select @cols = STUFF((SELECT &#39;&#39;,&#39;&#39; + QUOTENAME(name) FROM ( select name from ##all_cols where name not in (&#39;+@id_var+&#39;) ) cols FOR XML PATH(&#39;&#39;&#39;&#39;), TYPE).value(&#39;&#39;.&#39;&#39;, &#39;&#39;NVARCHAR(MAX)&#39;&#39;),1,1,&#39;&#39;&#39;&#39;) -- Show columns print @cols declare @key AS NVARCHAR(MAX) select @key = STUFF((SELECT &#39;&#39;,&#39;&#39; + QUOTENAME(name) FROM ( select name from ##all_cols where name in (&#39;+@id_var+&#39;) ) cols FOR XML PATH(&#39;&#39;&#39;&#39;), TYPE).value(&#39;&#39;.&#39;&#39;, &#39;&#39;NVARCHAR(MAX)&#39;&#39;),1,1,&#39;&#39;&#39;&#39;) -- Show key print @key --Run procedure declare @sqlstr nvarchar(max) set @sqlstr = N&#39;&#39; drop table if exists &#39;+@stored_data+&#39; select &#39;&#39;+@key+&#39;&#39;, &#39;+@group_var+&#39;, &#39;+@value_var+&#39; into &#39;+@stored_data+&#39; from( select * from &#39;+@db+&#39;.dbo.[&#39;+@data+&#39;] ) as a unpivot ( &#39;+@value_var+&#39; for &#39;+@group_var+&#39; in (&#39;&#39; + @cols + &#39;&#39;) ) as b select * from &#39;+@stored_data+&#39; &#39;&#39; print @sqlstr exec sp_executesql @sqlstr &#39; exec sp_executesql @sql end exec sql_unpivot @db = &#39;loan_db&#39;, @data = &#39;MONTHLY_LCY_AMOUNT - M74 - BICDATA&#39;, @id_var = &#39;&#39;&#39;id&#39;&#39;, &#39;&#39;YEARMONTH&#39;&#39;, &#39;&#39;APP&#39;&#39;,&#39;&#39;ACCTNO&#39;&#39;, &#39;&#39;CIF&#39;&#39;, &#39;&#39;AVERAGE_BAL&#39;&#39;, &#39;&#39;BI_SEGMENT&#39;&#39;&#39; Lưu ý: Bắt buộc phải có alias sau bảng "],
["chia-mt-ct-thanh-nhiu-ct.html", "Chương 4 Chia một cột thành nhiều cột", " Chương 4 Chia một cột thành nhiều cột CREATE TABLE tbl_SplitColumns (col1 varchar(max)) GO INSERT INTO tbl_SplitColumns VALUES (&#39;part1 part2 part3&#39;),(&#39;abc xyz pqr&#39;),(&#39;one two three&#39;), (&#39;Hello man nua nha&#39;) GO select * from tbl_SplitColumns DECLARE @delimiter VARCHAR(5) SET @delimiter=&#39; &#39; ;WITH CTE AS ( SELECT col1, CAST(&#39;&lt;A&gt;&#39; + REPLACE(col1, @delimiter , &#39;&lt;/A&gt;&lt;A&gt;&#39;) + &#39;&lt;/A&gt;&#39; AS XML) AS XMLString FROM tbl_SplitColumns ) select * from CTE SELECT XMLString.value(&#39;/A[1]&#39;, &#39;varchar(10)&#39;) As C1 ,XMLString.value(&#39;/A[2]&#39;, &#39;varchar(10)&#39;) As C2 ,XMLString.value(&#39;/A[3]&#39;, &#39;varchar(10)&#39;) As C3 ,XMLString.value(&#39;/A[4]&#39;, &#39;varchar(10)&#39;) As C4 FROM CTE GO "]
]
