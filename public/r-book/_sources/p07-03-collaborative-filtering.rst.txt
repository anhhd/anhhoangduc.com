Collaborative Filtering
=======================

Giới thiệu
----------

Khi sử dụng internet chúng ta có thể gặp rất nhiều hiện tượng như sau:

-  Khi kết thúc 1 video, Youtube tự động chuyển sang 1 video khác mà khả
   năng cao người dùng sẽ thích

-  Facebook suggest những quảng cáo dựa trên hành vi của người dùng

-  Facebook gợi ý kết bạn

-  Khi mua hàng trên Amazon hệ thống sẽ gợi ý những món hành có thể mua
   cùng (Frequently bought together)

-  Facebook gợi ý kết bạn

Bằng cách quảng cáo sản phẩm hướng vào các đối tượng tiềm năng sẽ làm
cho hiệu quả của Marketing tăng lên cũng như hiệu quả của kinh doanh.
Thuật toán đứng đằng sau những ứng dụng như này có tên gọi chung là
Recommendation Systems. Recommendation Systems có tuổi đời khá trẻ so
với các thuật toán Machine Learning khác vì nó xuất hiện từ nhu cầu bùng
nổ của Internet cách đây 10-15 năm trước.

Các ``Recommendation Systems`` thường được chia thành 2 nhóm lớn:

-  Content-based systems: hệ thống sẽ recommend dựa trên đặc tính của
   Item. VD: một User xem rất nhiều video trên Youtube thể loại nhạc trẻ
   Việt của Sơn Tùng thì hệ thống Recommendation Systems sẽ gợi ý cho
   Users này một số video cùng thể loại như Chạy ngay đi. Đặc điểm của
   Content-based Recommendation Systems là việc xây dựng mô hình cho mỗi
   user không phụ thuộc vào các users khác mà phụ thuộc vào profile của
   mỗi items. Việc làm này có lợi thế là tiết kiệm bộ nhớ và thời gian
   tính toán. Cách tiếp cận này yêu cầu việc sắp xếp các Item vào các
   nhóm rõ ràng, tuy nhiên nếu Item không có nhóm cụ thể hoặc khó xác
   định nhóm thì việc sử dụng Content-based Systems là không thể

-  Neighborhood-based Collaborative Filtering (Khi nói về
   Collaborarative Filtering ta có thể ngầm hiểu đây là phương pháp
   NBCF): Ý tưởng cơ bản của NBCF là xác định mức độ quan tâm của một
   user tới một item dựa trên các users khác gần giống với user này.
   Việc gần giống nhau giữa các users có thể được xác định thông qua mức
   độ quan tâm của các users này tới các items khác mà hệ thống đã biết.
   VD: A,T,N đều thích xem video về nhạc trẻ, ngoài ra T và A thích xem
   video của Chim sẻ đi nắng. Dựa trên thông tin của T và A, hệ thống sẽ
   tính toán sự tương quan giữa 3 users và dự đoán rằng N sẽ thích xem
   video của Chim Sẻ Đi Nắng và gợi ý cho người dùng này

Trong bài viết này ta sẽ đi vào nghiên cứu Collaborative Filtering do có
tính ứng dụng cao hơn trong thực tế

Phương pháp
-----------

Collaborative Filtering được chia thành 2 nhóm: User-based CF và
Item-based CF

User-user CF
~~~~~~~~~~~~

Phương pháp này sẽ tính toán sự tương quan giữa các users với nhau
(similarity).

Các bước tính toán:

-  Bước 1: Xây dựng ma trận rating matrix dựa trên mức độ đánh giá các
   bộ phim của các khách hàng này

.. raw:: html

   <center>

|image0|

.. raw:: html

   </center>

-  Bước 2: Normalise dữ liệu rating: Việc đầu tiên CF sẽ tính trung bình
   các rating của từng User, sau đó sẽ tính giá trị giữa các các rating
   đến các giá trị trung bình này. Bản chất của việc normalise dữ liệu
   đến từ việc tính cách của khách hàng luôn khác nhau (có những người
   khi xem bộ phim thấy rất hay sẽ đánh giá 5đ, tuy nhiên có những người
   khó tính hơn chỉ đánh giá 4). Do vậy, khi tính toán trung bình sẽ
   mang lại mức đánh giá là tốt nhất khi những giá trị lớn hơn trung
   bình là bộ phim khách hàng thích còn dưới trung bình là không thích.

-  Bước 3: Tính toán Similarities giữa các Users và Items : Phương pháp
   thường được sử dụng là Cosine Similarity giữa các Users với nhau. Giá
   trị của Cosin Similarity giữa các Users sẽ trong khoảng [-1,1]. Giá
   trị 1 thể hiện 2 vector hoàn toàn tương đồng với nhau, với - 1 sẽ thể
   hiện ngược lại qua đó sẽ tạo ra ma trận Similarity. Từ ma trận
   Similarity ta sẽ biết những Users nào có hành vi giống với Users nào.

-  Bước 4: Sử dụng concept của phương pháp K-nearest neighbor để dự báo
   giá trị rating bị missing. CF sẽ lựa chọn k Users có mức độ
   similarity cao nhất (tức các khách hàng có hành vi giống nhất)

-  Bước 5: Tính giá trị dự báo rating items dựa trên trung bình điều hòa
   giá trị similarity và rating của các k users giống nó nhất

Item-Item CF
~~~~~~~~~~~~

Phương pháp này sẽ tính toán sự tương quan giữa các Item với nhau
(similarity). Các bước tính toán tương tự tuy nhiên sẽ thực hiện việc
tính toán similarity theo các Item với nhau

Thực hành
---------

Data được sử dụng là MovieLense ghi nhận lịch sử rating phim của 943
khách hàng với 1664 bộ phim. Các bộ phim được rating sẽ có giá trị từ 1
đến 5. Mục tiêu của bài thực hành là xây dựng và kiểm định
recommendation model để suggest cho khách hàng nên xem bộ phim gì tiếp
theo.

-  **Bước 1**: Chia bộ data thành 2 phần: Train (chiếm 90% dữ liệu),
   Test (10% còn lại). Ở đây ta sẽ chia Test thành 2 data nhỏ là
   Test_known dùng để predict và Test_unknown dùng để kiểm định sự chính
   xác của mô hình

.. code:: r

   library(recommenderlab)
   rm(list = ls())
   data(MovieLense)
   MovieLense

::

   ## 943 x 1664 rating matrix of class 'realRatingMatrix' with 99392 ratings.

.. code:: r

   MovieLenseMeta[1:5,1:10]

::

   ##               title year
   ## 1  Toy Story (1995) 1995
   ## 2  GoldenEye (1995) 1995
   ## 3 Four Rooms (1995) 1995
   ## 4 Get Shorty (1995) 1995
   ## 5    Copycat (1995) 1995
   ##                                                      url unknown Action
   ## 1  http://us.imdb.com/M/title-exact?Toy%20Story%20(1995)       0      0
   ## 2    http://us.imdb.com/M/title-exact?GoldenEye%20(1995)       0      1
   ## 3 http://us.imdb.com/M/title-exact?Four%20Rooms%20(1995)       0      0
   ## 4 http://us.imdb.com/M/title-exact?Get%20Shorty%20(1995)       0      1
   ## 5      http://us.imdb.com/M/title-exact?Copycat%20(1995)       0      0
   ##   Adventure Animation Children's Comedy Crime
   ## 1         0         1          1      1     0
   ## 2         1         0          0      0     0
   ## 3         0         0          0      0     0
   ## 4         0         0          0      1     0
   ## 5         0         0          0      0     1

.. code:: r

   evaluation_value <- evaluationScheme(MovieLense, 
                                        method = "split", 
                                        train = 0.9,
                                        given = 12)
   train <- getData(evaluation_value, "train")
   test_known <- getData(evaluation_value, "known")
   test_unknown <- getData(evaluation_value, "unknown")

-  **Bước 2**: Xây dựng mô hình CF dựa trên tập Train và Predict trên
   tập Test_known

.. code:: r

   ubcf_model <- Recommender(train, 
                           "UBCF",
                           param = list(method = "Cosine", nn = 50))
   pred_ubcf <- predict(ubcf_model, test_known, type="ratings") 
   as(pred_ubcf, "matrix")[,1:5]

::

   ##     Toy Story (1995) GoldenEye (1995) Four Rooms (1995) Get Shorty (1995)
   ## 4           4.421210         4.415353          4.328985          4.349323
   ## 10          4.327399         4.119472          4.136775          4.028380
   ## 11          3.747648         3.648259          3.645138          3.629051
   ## 31          4.192838         4.127646          4.101834          4.073601
   ## 33          3.697059         3.666006          3.649045          3.666667
   ## 36          4.032523         3.983421          4.000000          3.979622
   ## 45          3.967710         3.746192          3.706468          3.747949
   ## 46          3.590443         3.569516          3.541151          3.568813
   ## 57                NA         3.407113          3.435862          3.389376
   ## 59          3.981359         3.568130          3.662826          3.557073
   ## 63          3.086330         3.119000          3.062735          3.065928
   ## 96          4.365256         4.179174          4.273285          4.264496
   ## 147         4.330704         4.412868          4.408210          4.438387
   ## 148         4.449344         4.437918          4.410389          4.415094
   ## 157               NA         3.666667                NA          3.666667
   ## 168         3.464049         3.401360          3.317032          3.293521
   ## 172         3.855446         3.600111          3.648172          3.498847
   ## 185         4.463785         4.150303          4.226950          4.103887
   ## 189         4.079474         3.695849          3.772761          3.856601
   ## 190         3.302981         3.057035          3.032170          3.068976
   ## 191         3.773430         3.750000          3.750000          3.750000
   ## 194         3.409557         3.189066          3.208680          3.198428
   ## 202               NA         3.315959          3.338321          3.287643
   ## 203               NA         3.485993          3.465214          3.489449
   ## 206         2.776407         2.750000          2.750000          2.750000
   ## 228         3.198686         3.038269          3.083333          3.112435
   ## 243         3.556658         3.367506          3.372734          3.350273
   ## 283         4.638194         4.377335          4.291894          4.331916
   ## 294         3.774074         3.464827          3.516965          3.500316
   ## 298         4.246827         3.956409          3.946195          4.011294
   ## 303         3.462658               NA          3.066977          3.124955
   ## 320         4.117976         3.790795          3.833678          3.989945
   ## 325         3.364207         3.048275          2.974332          3.194193
   ## 336         3.566418         3.275910          3.237078          3.225717
   ## 340               NA         3.478552          3.493617          3.435268
   ## 345         3.586931         3.428216          3.470760          3.546982
   ## 349         3.271529         3.259560          3.108025          3.273441
   ## 352         3.834929         3.529398          3.574594                NA
   ## 356         3.686729         3.677354          3.614135          3.651825
   ## 357         4.318820         3.945769          3.959001          3.887399
   ## 379         4.259583         3.934495          4.042642          3.946607
   ## 380         3.659541         3.736171          3.750000          3.757606
   ## 381         3.743719         3.609775          3.569597          3.750270
   ## 391         3.786741         3.417585          3.541873          3.598313
   ## 396         3.307081         3.247506          3.201906          3.310960
   ## 404         3.640390         3.660740          3.666667          3.641921
   ## 409         4.051701         3.864687          3.897893          3.906178
   ## 410         3.185437         3.154045          3.168670          3.178490
   ## 428         4.492538         4.500000          4.505900          4.500000
   ## 437         3.163682         3.046623          3.016246          3.109037
   ## 445         1.785159         1.645848          1.630869          1.699021
   ## 447         3.544904         3.373493          3.445247          3.327320
   ## 448         3.385320         3.316556          3.263134          3.386167
   ## 454         3.423612         3.094043          3.064652          3.194893
   ## 457         4.227903         3.975448          3.814544          4.156500
   ## 476         3.406993         3.234772          3.226912          3.237005
   ## 482         3.417870         3.333333          3.333333          3.334018
   ## 488         3.530775         3.285775          3.250205          3.237218
   ## 493         4.113215         4.058984          4.075187          4.040324
   ## 494         4.462195         4.138111          4.151412          4.302865
   ## 497         3.687607         3.196707          3.254281          3.232400
   ## 506         4.081485               NA          3.707885          3.712408
   ## 522         4.169110         4.150476          4.174633          4.081425
   ## 529         3.936662         3.928018          3.848747          3.942050
   ## 530         4.111370         3.878635          3.884378          3.817576
   ## 544         2.772268         2.750000          2.750000          2.733676
   ## 547         3.610305         3.582395          3.590027          3.576489
   ## 548         3.839451         3.542633          3.546385          3.627520
   ## 558         4.515969         4.236132          4.190858          4.280905
   ## 583         4.512440         4.496981          4.448377          4.459553
   ## 596         3.479272         3.404228          3.408611          3.416667
   ## 597         4.371617         4.250100          4.214995          4.265026
   ## 599         3.321265         3.204270          3.166667          3.186756
   ## 601         3.179556         2.919252          2.986829          3.006350
   ## 656         2.351673         2.280497          2.338155          2.358080
   ## 663         3.533815         3.510499          3.494117          3.546157
   ## 672         3.366210         3.153478          3.112639          3.228239
   ## 680         4.635366         4.295543          4.366697          4.347775
   ## 685         2.175485         2.166667          2.151160          2.166667
   ## 694         4.387524         3.953829          4.077882          4.091980
   ## 702         2.881379         2.727640          2.700859          2.764000
   ## 743         3.608690         3.591369          3.505860          3.575213
   ## 762         2.982651         2.810421          2.784074          2.853868
   ## 764         3.421090         3.349072          3.274665                NA
   ## 775         3.780282         3.701606          3.750000          3.747973
   ## 836         3.956130         3.906194          3.884871          3.914651
   ## 861         4.604179         4.313583          4.333333          4.285423
   ## 884         3.278944         3.234255          3.250000          3.247500
   ## 892               NA         4.110925          4.128243          4.270527
   ## 899         4.136189         3.527420          3.626439          3.810787
   ## 902               NA         3.717717          3.790148          3.751735
   ## 911         4.272261         3.955468          4.092492          4.036452
   ## 915         3.028829         2.996028          2.992589          3.006817
   ## 926         3.553952         3.500000          3.500000          3.505415
   ## 932         4.145433         4.105183          4.092053          4.122045
   ##     Copycat (1995)
   ## 4         4.426313
   ## 10        4.144196
   ## 11        3.666667
   ## 31        4.166667
   ## 33        3.662628
   ## 36        3.970813
   ## 45        3.728947
   ## 46        3.568813
   ## 57        3.403259
   ## 59        3.637915
   ## 63        3.083333
   ## 96        4.208555
   ## 147       4.411374
   ## 148       4.403140
   ## 157       3.666667
   ## 168       3.484905
   ## 172       3.623445
   ## 185       4.231078
   ## 189       3.875460
   ## 190       3.069484
   ## 191       3.750000
   ## 194       3.240270
   ## 202       3.341292
   ## 203       3.500995
   ## 206       2.750000
   ## 228       3.054865
   ## 243       3.433316
   ## 283       4.453989
   ## 294       3.432212
   ## 298       3.953042
   ## 303       3.153972
   ## 320       3.848457
   ## 325       3.016766
   ## 336       3.232369
   ## 340       3.521269
   ## 345       3.423285
   ## 349       3.231314
   ## 352       3.663718
   ## 356       3.691886
   ## 357       3.945058
   ## 379       3.995460
   ## 380       3.724620
   ## 381       3.615732
   ## 391       3.541482
   ## 396       3.251382
   ## 404       3.666667
   ## 409       3.895246
   ## 410       3.174569
   ## 428       4.500000
   ## 437       3.027523
   ## 445       1.634370
   ## 447       3.403772
   ## 448       3.333333
   ## 454       3.172592
   ## 457       4.023719
   ## 476       3.260005
   ## 482       3.333333
   ## 488       3.263776
   ## 493       4.080609
   ## 494       4.276698
   ## 497       3.249245
   ## 506       3.708058
   ## 522       4.170016
   ## 529       3.882665
   ## 530       3.913959
   ## 544       2.750000
   ## 547       3.583333
   ## 548       3.556005
   ## 558       4.226618
   ## 583       4.465414
   ## 596       3.416667
   ## 597       4.244800
   ## 599       3.175642
   ## 601       2.989184
   ## 656       2.291794
   ## 663       3.475169
   ## 672       3.163281
   ## 680       4.311907
   ## 685       2.164329
   ## 694       4.041241
   ## 702       2.740292
   ## 743       3.583333
   ## 762       2.833333
   ## 764       3.365283
   ## 775       3.738197
   ## 836       3.894848
   ## 861       4.368685
   ## 884       3.224997
   ## 892       4.228859
   ## 899       3.751624
   ## 902       3.742559
   ## 911       4.096225
   ## 915       3.000000
   ## 926       3.500000
   ## 932       4.131351

-  **Bước 3**: Kiểm định mô hình trên tập Test_unknown

.. code:: r

   acc_ubcf <- calcPredictionAccuracy(pred_ubcf, test_unknown)
   as(acc_ubcf,"matrix")

::

   ##          [,1]
   ## RMSE 1.031062
   ## MSE  1.063088
   ## MAE  0.817224

-  **Bước 4**: Tiếp theo ta sẽ sử dựng mô hình Item based CF để tính
   toán các chỉ số accuracy

.. code:: r

   ibcf_model <- Recommender(train, 
                           "IBCF",
                           param = list(method = "Cosine", nn = 50))

::

   ## Available parameter (with default values):
   ## k     =  30
   ## method    =  Cosine
   ## normalize     =  center
   ## normalize_sim_matrix  =  FALSE
   ## alpha     =  0.5
   ## na_as_zero    =  FALSE
   ## verbose   =  FALSE

.. code:: r

   pred_ibcf <- predict(ibcf_model, test_known, type="ratings") 
   acc_ibcf <- calcPredictionAccuracy(pred_ibcf, test_unknown)
   as(acc_ibcf,"matrix")

::

   ##           [,1]
   ## RMSE 1.0697308
   ## MSE  1.1443241
   ## MAE  0.7573085

.. code:: r

   acc <- rbind(UBCF = acc_ubcf, IBCF = acc_ibcf)
   acc

::

   ##          RMSE      MSE       MAE
   ## UBCF 1.031062 1.063088 0.8172240
   ## IBCF 1.069731 1.144324 0.7573085

-  **Bước 5**: Sau khi thấy được mô hình User basd CF có chất lượng tốt
   hơn ta sẽ áp dụng mô hình này để đưa gợi ý khách hàng xem 5 bộ phim
   khác

.. code:: r

   recommended_next_film <- predict(ibcf_model, MovieLense[1:10,], n=5)
   as(recommended_next_film, "list")

::

   ## $`1`
   ## [1] "Ulee's Gold (1997)"          "Deconstructing Harry (1997)"
   ## [3] "Wag the Dog (1997)"          "Incognito (1997)"           
   ## [5] "Bananas (1971)"             
   ## 
   ## $`2`
   ## [1] "Babe (1995)"                "Usual Suspects, The (1995)"
   ## [3] "Braveheart (1995)"          "Taxi Driver (1976)"        
   ## [5] "Hoop Dreams (1994)"        
   ## 
   ## $`3`
   ## [1] "Outbreak (1995)"                    
   ## [2] "Faster Pussycat! Kill! Kill! (1965)"
   ## [3] "Welcome to the Dollhouse (1995)"    
   ## [4] "Frighteners, The (1996)"            
   ## [5] "Phenomenon (1996)"                  
   ## 
   ## $`4`
   ## [1] "Crow, The (1994)"                  
   ## [2] "Searching for Bobby Fischer (1993)"
   ## [3] "Blade Runner (1982)"               
   ## [4] "Flipper (1996)"                    
   ## [5] "Lone Star (1996)"                  
   ## 
   ## $`5`
   ## [1] "Entertaining Angels: The Dorothy Day Story (1996)"         
   ## [2] "Richard III (1995)"                                        
   ## [3] "Postino, Il (1994)"                                        
   ## [4] "Horseman on the Roof, The (Hussard sur le toit, Le) (1995)"
   ## [5] "Cold Comfort Farm (1995)"                                  
   ## 
   ## $`6`
   ## [1] "Heavy Metal (1981)"                             
   ## [2] "Black Beauty (1994)"                            
   ## [3] "Night of the Living Dead (1968)"                
   ## [4] "Seventh Seal, The (Sjunde inseglet, Det) (1957)"
   ## [5] "Bride of Frankenstein (1935)"                   
   ## 
   ## $`7`
   ## [1] "Disclosure (1994)"         "Breaking the Waves (1996)"
   ## [3] "Gattaca (1997)"            "Leaving Las Vegas (1995)" 
   ## [5] "Ulee's Gold (1997)"       
   ## 
   ## $`8`
   ## [1] "Very Natural Thing, A (1974)" "Walk in the Sun, A (1945)"   
   ## [3] "Get Shorty (1995)"            "Postino, Il (1994)"          
   ## [5] "Hoop Dreams (1994)"          
   ## 
   ## $`9`
   ## [1] "King of New York (1990)"    "Toy Story (1995)"          
   ## [3] "GoldenEye (1995)"           "Usual Suspects, The (1995)"
   ## [5] "Braveheart (1995)"         
   ## 
   ## $`10`
   ## [1] "Breakfast at Tiffany's (1961)"                           
   ## [2] "Ulee's Gold (1997)"                                      
   ## [3] "Man Who Knew Too Little, The (1997)"                     
   ## [4] "Night of the Living Dead (1968)"                         
   ## [5] "Nosferatu (Nosferatu, eine Symphonie des Grauens) (1922)"

.. |image0| image:: Images/p07-03-cf01.png

