Sử dụng GIT
===========

Giới thiệu về Git
-----------------

Git là công cụ cho phép quản lý nhiều version của code. Việc sử dụng
``git`` thành thạo sẽ giúp gia tăng hiệu quả quản lý version, source
code. Luồng làm việc với ``git`` có thể chia làm 2 nhóm lớn:

-  Làm việc trên local - cho phép quản lý và xử lý các version khác nhau
   của code do chính mình tạo

-  Làm việc trên github - cho phép quản lý và tương tác với nhiều thành
   viên/project khác nhau

-  Mỗi folder chứa 1 file .git lưu lại toàn bộ lịch sử cả project

-  Một project có chưa các file, foder, lịch sử của cả project được gọi
   là 1 repository

-  Khi lưu file trong directory nhưng chưa commit, toàn bộ các file được
   đưa vào stagging area. Sau khi commit, lịch sử các file mới được lưu
   lại tại .git

|image0|

Git cơ bản
----------

Các khái niệm cơ bản
~~~~~~~~~~~~~~~~~~~~

-  ``repository`` (``(repo)``): Một cơ sở dữ liệu (database)/folder có
   chứa tất cả các checkpoint (các điểm thay đổi file) cùng với
   metadata.
-  ``branch``: Các version khác nhau của 1 repo
-  ``master``: Branch gốc
-  ``add``: Là việc add file(s) vào repo
-  ``commit``: Là việc xác nhận sự thay đổi thông tin trong repo (sửa
   file, thêm file mới, etc.)
-  ``remote``: Là việc link đến một repo gốc trên một máy tính khác
-  ``merging``: Là việc kết hợp các version từ các branch khác nhau lại
   thành một
-  ``conflict``: Là việc version trên các ``branch``

**Lưu ý**:

-  Khi chỉ commit, git sẽ yêu cầu nhâp message thay đổi file
-  Các phần comment bắt đầu với # sẽ không lưu

Luồng làm việc của GIT khi làm việc online
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-  **fork**: Copy một project sang account github của cá nhân
-  **clone**: Download project từ github xuống local
-  **add**: Thêm file vào project
-  **commit**: Là việc xác nhận sự thay đổi thông tin trong repo (sửa
   file, thêm file mới, etc.)
-  **push**: Đẩy version gần nhất được commit từ local lên github
-  **pull**: Download các commit mà những thành viên khác đã tạo và tích
   hợp với bản gốc

|image1|

Cơ chế lưu trữ thông tin của Git
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Thông tin cơ bản**: Git sử dụng cấu trúc dữ liệu nhiều lớp để lưu trữ
lịch sử thông tin

-  Blob: Unique version của mỗi file
-  Tree: theo dõi tên và địa chỉ của mỗi file
-  Commit: Lưu trữ các thông tin với mỗi version

|image2|

Hash
^^^^

-  Mỗi commit có một ID gọi là hash
-  Default khi sử dụng git show sẽ ra version gần nhất, nếu muốn version
   tiếp theo sẽ sử dụng HEAD~2, HEAD~3

Branch
^^^^^^

-  Git cho phép tạo các branch, mỗi branch là một folder từ master và
   hoạt động độc lập với nhau. Branch chỉ ảnh hưởng khi merge lại với
   nhau

-  Git sẽ tạo 1 branch master mặc định

-  Một số trường hợp, branch có các conflict

.. code:: r

   #Xem branch
   git branch #Current branch sẽ hiển thị sau dấu *

   # Xem sự khác biệt giữa các branch
   git diff branch1..branch2

   # Switch giữa các branch
   git checkout branch-name

   # Tạo branch
   git checkout -b branch_name

   # Merge branch
   git merge source destination -m "message"

Các câu lệnh cơ bản
~~~~~~~~~~~~~~~~~~~

.. code:: r

   # Tạo git project
   git init 
   git init path_project

   # Clone new project vào thư mục dental
   git clone file:///home/thunk/repo dental

   #Kiểm tra các file nào đang ở stagging area
   git status

   # So sánh trạng thài các file
   git diff file.rename

   #So sánh trạng thái tất cả các file
   git diff

   #Add file vào stagging area
   git add filename

   # Add tất cả các file
   git add .

   # So sánh trạng thái của file trong stagging area
   git diff -r HEAD data/northern.csv

   HEAD: version gần nhất


   #Commit
   git commit -m "Message to commit"

   # Kiểm tra log
   git log

   git log --oneline

   # Thoát log: Q + Enter

   # Kiểm tra log 1 file
   git log file_path


   # Kiểm tra thông tin gần nhất
   git show

   # Kiểm tra thông tin trên mỗi commit
   git show hash #Không cần thể hiện hết thông tin của hash, chỉ cần vài ký tự đầu

   # Kiểm tra sự thay đổi trong version thứ 2
   git show HEAD~2

   # So sánh các version
   git diff hash1..hash2
   git diff 71ee..78e4

   # Xóa file không track
   ls
   git clean -f

   # Undo changes file chưa staged (file mới lưu Ctrl+S nhưng chưa add
   )
   git checkout -- filename

   # Unstage với file đât được staged
   git reset HEAD filename

   # Reset version cũ của một file
   git checkout hash filename
   git checkout abd78 report.txt
   git commit -m "newversion"

   #Rest toàn bộ file về version gần nhất
   git reset HEAD .

   # Merge một branch với branch đang có
   git merge branch_name

-  Commit tất cả các file

.. code:: bash

   git commit --message "Commit message" -a

-  Revert một file

.. code:: bash

   git checkout SHA "file to roll back"
   git checkout ab0a6de7 "Github with R.Rmd"

-  Revert tất cả các file

.. code:: bash

   git checkout SHA *
   git checkout 2708f7c4 *

Luồng làm việc cơ bản với git trên local
----------------------------------------

Tạo branch & merge conflict
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: bash

   # Kiểm tra các branch
   git branch -l
   # Check out và tạo branch mới (ducanh)
   git checkout -n ducanh
   # Add file
   git add .
   # Commit
   git commit -m "Test"
   # Check out sang master
   git checkout master
   # Merge
   git merge ducanh
   # Resolve conflict nếu cần thiết
   git add .
   git commit "Resolve conflict"

   # Delte branch nhánh
   git branch -d ducanh

Revert về version cũ
~~~~~~~~~~~~~~~~~~~~

.. code:: bash

   # Kiểm tra version
   git log --oneline
   # Roll back 1 file sang version cũ
   git checkout 19dd151 test.txt
   # Roll back tất cả file
   git checkout 19dd151 .

   # Add lại và commit
   git add test.txt
   # Commit
   git commit -m "Rolling back"
   # Kiểm tra lại
   git log --oneline

**Hướng dẫn sử dụng Git với R**

-  Khi tạo project, chọn version control từ Project option là Git

Làm việc nhóm trên Github
-------------------------

Luồng làm việc với central workflow
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Với luồng làm việc tạo central workflow, manager cần thực hiện:

1. Tạo repository trên github
2. Add collaborator với quyền ``write`` trên github

|image3|

Trong luồng làm việc này, có một số lưu ý sau:

-  Project được lưu trữ trên ``github`` được gọi là ``origin``, các
   repository trên máy được gọi là ``local``.
-  ``Collaborator`` có thể tương tác với project trên git theo 2 cách:

   -  Kéo project về máy local ``git pull origin master``
   -  Đẩy các thay đổi từ local lên git ``git push origin master``

-  Các luồng xử lý trên local thực hiện như thông thường

**Luồng làm việc cơ bản**

**Collaborator 1**

.. code:: bash

   # Clone
   git clone repository

   # Pull changes made by others
   git pull origin master

   # Tạo sự thay đổi, solve conflict
   git add .
   git commit --no-edit

   # Push vào master
   git push origin master

   # Push vào branch mới
   git push origin -u new-chart

**Collaborator 2**

.. code:: bash

   # Download commit
   git fetch origin 

   # Swich sang branch new-chart
   git checkout new-chart

   # Chỉnh sửa code

   # Add, commit và merge
   git add .
   git commit -m "Chỉnh sửa chart"

   # Push vào origin
   git push origin new-chart

**Master**

.. code:: bash

   # Pull thay đổi của new-chart
   git pull origin new-chart

   # Merge
   git checkout master
   git merge new-chart

   # Fix conflict

   # Push origin
   git push orign master

   # Delete branch new-chart local
   git branch -d new-chart 

   # Delete branch new-chart github
   git push origin -d new-chart

**Lưu ý**:

-  ``git pull`` là cách đi ngắn gọn của ``git fetch`` và ``git merge``
-  Luồng làm việc này phù hợp với làm việc trong team nhỏ

Luồng làm việc online theo ``fork``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Luồng làm việc này, mỗi ``collaborator`` sẽ ``fork`` project về và tạo
``pull request`` để yêu cầu thay đổi.

|image4|

**Luồng làm việc tối thiểu**

-  Fork project trên Github về account trước.
-  Clone về local: ``git clone http://github.com/myaccount/project-xxx``
-  Tạo branch riêng để phát triển: ``git checkout -b feature-01``
-  Code loằng ngoằng xong thì commit lên branch riêng đấy:
   ``git commit -m "Feature xong het roi."``
-  Gộp vào nhánh source code chính:
   ``git checkout master && git merge feature-01``
-  Đẩy code lên account cá nhân: ``git push origin master``
-  Vào link project gốc thấy cái nút Pull Request , click vào để điền
   nội dung merge code vào project chính.
-  Người quản lý project chính, thấy có ông nào đó PR (Pull Request)
   lên, sẽ kiểm tra code, nếu được thì merge và push lên mainstream.

**Lưu ý**:

-  Luồng làm việc này phù hợp với các project cộng đồng

Các tricks khi làm việc với git
-------------------------------

Chặn proxy git
~~~~~~~~~~~~~~

.. code:: r

   git config --global http.proxy http://username:password@proxy.server.com:8080 
   git config --global https.proxy http://username:password@proxy.server.com:8080  
   #If password contain @ replace by %40 

.. code:: r

    git config --global https.proxy http://anhhd3:VPBank2016*@10.128.10.88:8080
    git config --global http.proxy http://anhhd3:VPBank2016*@10.128.10.88:8080

Tạo gitignore
~~~~~~~~~~~~~

``.gitignore`` là file quản lý các dạng file mà ta không muốn đẩy lên
github.

.. code:: r

   # Tạo file git
   touch gitignore

Sau khi tạo ``.gitignore``, ta có thể đưa các định dạng file không muốn
đưa lên Github (mặc dù vẫn tồn tại ở local master). Ví dụ các file trong
``.gitignore`` như sau.

.. code:: r

   *.Rmd
   *.Rda
   *.xlsx

Set config bị lỗi
~~~~~~~~~~~~~~~~~

Khi set config bị lỡi, có thể reset lại như sau

.. code:: bash

   git config --global --unset credential.helper

Reset lại global git config
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: bash

   git config --global --edit

Revert vs. Reset
~~~~~~~~~~~~~~~~

-  **Revert**: Revert opposite - do đó, **KHÔNG** dùng khi muốn revert
   version
-  **Reset**: Reset về version cũ, mất toàn bộ lịch sử

.. code:: bash

   git revert 5sdf312
   git reset 5sdf312

Set-up local git server
~~~~~~~~~~~~~~~~~~~~~~~

-  `Bonobo git server <https://bonobogitserver.com/>`__

Tài liệu tham khảo
------------------

-  http://r-pkgs.had.co.nz/git.html
-  http://happygitwithr.com/
-  http://archive.fabacademy.org/archives/2016/doc/gitCheatSheet.html
-  https://campus.datacamp.com/courses/introduction-to-git-for-data-science/repositories?ex=1
-  **Học git online**: https://learngitbranching.js.org/
-  

.. |image0| image:: Images/git-03.png
.. |image1| image:: Images/git-01.png
.. |image2| image:: Images/git-03.png
.. |image3| image:: Images/git-04.png
.. |image4| image:: Images/git-05.png

